<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有间博客</title>
  
  
  <link href="https://xxnjdg.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxnjdg.github.io/"/>
  <updated>2021-06-25T05:12:20.410Z</updated>
  <id>https://xxnjdg.github.io/</id>
  
  <author>
    <name>xxnjdg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>elasticsearch-3</title>
    <link href="https://xxnjdg.github.io/2021/06/20/elasticsearch-3-1/"/>
    <id>https://xxnjdg.github.io/2021/06/20/elasticsearch-3-1/</id>
    <published>2021-06-20T14:34:24.000Z</published>
    <updated>2021-06-25T05:12:20.410Z</updated>
    
    <content type="html"><![CDATA[<p>timeout = {TimeValue@8576} “30s”<br>masterNodeTimeout = {TimeValue@8463} “1m”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel -&gt;</span><br><span class="line">                client.index(indexRequest, <span class="keyword">new</span> RestStatusToXContentListener&lt;&gt;(channel, r -&gt; r.getLocation(indexRequest.routing())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ActionListener&lt;BulkResponse&gt; <span class="title">wrapBulkResponse</span><span class="params">(ActionListener&lt;Response&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ActionListener.wrap(bulkItemResponses -&gt; &#123;</span><br><span class="line">            <span class="keyword">assert</span> bulkItemResponses.getItems().length == <span class="number">1</span> : <span class="string">&quot;expected only one item in bulk request&quot;</span>;</span><br><span class="line">            BulkItemResponse bulkItemResponse = bulkItemResponses.getItems()[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (bulkItemResponse.isFailed() == <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> DocWriteResponse response = bulkItemResponse.getResponse();</span><br><span class="line">                listener.onResponse((Response) response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onFailure(bulkItemResponse.getFailure().getCause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, listener::onFailure);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">k</span><span class="params">()</span></span>&#123;</span><br><span class="line">        createIndex(index, bulkRequest.timeout(), <span class="keyword">new</span> ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(CreateIndexResponse result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                    executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!(ExceptionsHelper.unwrapCause(e) <span class="keyword">instanceof</span> ResourceAlreadyExistsException)) &#123;</span><br><span class="line">                    <span class="comment">// fail all requests involving this index, if create didn&#x27;t work</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bulkRequest.requests.size(); i++) &#123;</span><br><span class="line">                        DocWriteRequest request = bulkRequest.requests.get(i);</span><br><span class="line">                        <span class="keyword">if</span> (request != <span class="keyword">null</span> &amp;&amp; setResponseFailureIfIndexMatches(responses, i, request, index, e)) &#123;</span><br><span class="line">                            bulkRequest.requests.set(i, <span class="keyword">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                    executeBulk(task, bulkRequest, startTime, ActionListener.wrap(listener::onResponse, inner -&gt; &#123;</span><br><span class="line">                        inner.addSuppressed(e);</span><br><span class="line">                        listener.onFailure(inner);</span><br><span class="line">                    &#125;), responses, indicesThatCannotBeCreated);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ActionListener&lt;Response&gt; delegate = <span class="keyword">new</span> ActionListener&lt;Response&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">            listener.onResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Discovery.FailedToCommitClusterStateException</span><br><span class="line">                    || (t <span class="keyword">instanceof</span> NotMasterException)) &#123;</span><br><span class="line">                logger.debug((org.apache.logging.log4j.util.Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">&quot;master could not publish cluster state or stepped down before publishing action [&#123;&#125;], scheduling a retry&quot;</span>, actionName), t);</span><br><span class="line">                retry(t, masterChangePredicate);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onFailure(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开启线程</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        createIndexService.createIndex(updateRequest, ActionListener.wrap(response -&gt;</span><br><span class="line">                        listener.onResponse(<span class="keyword">new</span> CreateIndexResponse(response.isAcknowledged(), response.isShardsAcked(), indexName)),</span><br><span class="line">                listener::onFailure));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        listenerDJR = onlyCreateIndex(request, ActionListener.wrap(response -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isAcknowledged()) &#123;</span><br><span class="line">                activeShardsObserver.waitForActiveShards(<span class="keyword">new</span> String[]&#123;request.index()&#125;, request.waitForActiveShards(), request.ackTimeout(),</span><br><span class="line">                        shardsAcked -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (shardsAcked == <span class="keyword">false</span>) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;[&#123;&#125;] index created, but the operation timed out while waiting for &quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;enough shards to be started.&quot;</span>, request.index());</span><br><span class="line">                            &#125;</span><br><span class="line">                            listener.onResponse(<span class="keyword">new</span> CreateIndexClusterStateUpdateResponse(response.isAcknowledged(), shardsAcked));</span><br><span class="line">                        &#125;, listener::onFailure);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onResponse(<span class="keyword">new</span> CreateIndexClusterStateUpdateResponse(<span class="keyword">false</span>, <span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, listener::onFailure));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        clusterService.submitStateUpdateTask(<span class="string">&quot;create-index [&quot;</span> + request.index() + <span class="string">&quot;], cause [&quot;</span> + request.cause() + <span class="string">&quot;]&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> IndexCreationTask(logger, allocationService, request, listenerDJR, indicesService, aliasValidator, xContentRegistry, settings,</span><br><span class="line">                        <span class="keyword">this</span>::validate));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">BatchedTask</span> </span>&#123;</span><br><span class="line">        <span class="comment">//SafeAckedClusterStateTaskListener.listener = IndexCreationTask</span></span><br><span class="line">        <span class="keyword">final</span> ClusterStateTaskListener listener;</span><br><span class="line"></span><br><span class="line">        UpdateTask(Priority priority, String source, Object task, ClusterStateTaskListener listener,</span><br><span class="line">                   ClusterStateTaskExecutor&lt;?&gt; executor) &#123;</span><br><span class="line">            <span class="keyword">super</span>(priority, source, executor, task);</span><br><span class="line">            <span class="keyword">this</span>.listener = listener;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">describeTasks</span><span class="params">(List&lt;? extends BatchedTask&gt; tasks)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((ClusterStateTaskExecutor&lt;Object&gt;) batchingKey).describeTasks(</span><br><span class="line">                    tasks.stream().map(BatchedTask::getTask).collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ackListener = DelegetingAckListener</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegetingAckListener</span> <span class="keyword">implements</span> <span class="title">Discovery</span>.<span class="title">AckListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////ackedListener = (SafeAckedClusterStateTaskListener.listener = IndexCreationTask)</span></span><br><span class="line">        <span class="comment">//ackListeners.add(new AckCountDownListener(ackedListener, newClusterState.version(), newClusterState.nodes(),threadPool));</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Discovery.AckListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">DelegetingAckListener</span><span class="params">(List&lt;Discovery.AckListener&gt; listeners)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.listeners = listeners;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNodeAck</span><span class="params">(DiscoveryNode node, <span class="meta">@Nullable</span> Exception e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Discovery.AckListener listener : listeners) &#123;</span><br><span class="line">                listener.onNodeAck(node, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;no timeout delegation&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">aa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Supplier&lt;ThreadContext.StoredContext&gt; storedContextSupplier = threadPool.getThreadContext().newRestorableContext(<span class="keyword">true</span>);</span><br><span class="line">        TransportResponseHandler&lt;T&gt; responseHandler = <span class="keyword">new</span> ContextRestoreResponseHandler&lt;&gt;(storedContextSupplier, handler);</span><br><span class="line">        clientHandlers.put(requestId, <span class="keyword">new</span> RequestHolder&lt;&gt;(responseHandler, connection, action, timeoutHandler));</span><br><span class="line">        FailedToCommitClusterStateException</span><br><span class="line"></span><br><span class="line">        sendingController.getPublishResponseHandler().onResponse(node);sendingController.getPublishResponseHandler().onResponse(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">aaaa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShardStartedClusterStateTaskExecutor;</span><br><span class="line">        clusterService.submitStateUpdateTask(</span><br><span class="line">                <span class="string">&quot;shard-started &quot;</span> + request,</span><br><span class="line">                request,</span><br><span class="line">                ClusterStateTaskConfig.build(Priority.URGENT),</span><br><span class="line">                shardStartedClusterStateTaskExecutor,</span><br><span class="line">                shardStartedClusterStateTaskExecutor);</span><br><span class="line"></span><br><span class="line">        request = <span class="keyword">new</span> StartRecoveryRequest(</span><br><span class="line">                recoveryTarget.shardId(),</span><br><span class="line">                recoveryTarget.indexShard().routingEntry().allocationId().getId(),</span><br><span class="line">                recoveryTarget.sourceNode(),</span><br><span class="line">                clusterService.localNode(),</span><br><span class="line">                Store.MetadataSnapshot.EMPTY,</span><br><span class="line">                recoveryTarget.state().getPrimary() = <span class="keyword">false</span>,</span><br><span class="line">                recoveryTarget.recoveryId(),</span><br><span class="line">                SequenceNumbers.UNASSIGNED_SEQ_NO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return new Checkpoint(0, 0, 1, minSeqNo, maxSeqNo, -2, 1);<br>return new Checkpoint(offset, 0, 1, minSeqNo, maxSeqNo, -2, 1);</p><p>fields.add(new Field(NAME, id, fieldType));</p><p>public static SequenceIDFields emptySeqID() {<br>return new SequenceIDFields(new LongPoint(NAME, SequenceNumbers.UNASSIGNED_SEQ_NO),<br>new NumericDocValuesField(NAME, SequenceNumbers.UNASSIGNED_SEQ_NO),<br>new NumericDocValuesField(PRIMARY_TERM_NAME, 0));<br>context.seqID(seqID);<br>fields.add(seqID.seqNo);<br>fields.add(seqID.seqNoDocValue);<br>fields.add(seqID.primaryTerm);</p><p>fields.add(new StoredField(fieldType().name(), ref.bytes, ref.offset, ref.length));</p><p>final Field version = new NumericDocValuesField(NAME, -1L);</p><p>builder = new TextFieldMapper.Builder(currentFieldName)<br>.addMultiField(new KeywordFieldMapper.Builder(“keyword”).ignoreAbove(256));</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;timeout = {TimeValue@8576} “30s”&lt;br&gt;masterNodeTimeout = {TimeValue@8463} “1m”&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="elasticsearch" scheme="https://xxnjdg.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch-3</title>
    <link href="https://xxnjdg.github.io/2021/05/07/elasticsearch-3/"/>
    <id>https://xxnjdg.github.io/2021/05/07/elasticsearch-3/</id>
    <published>2021-05-07T05:20:36.000Z</published>
    <updated>2021-06-25T10:48:26.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="org-elasticsearch-action-bulk-TransportBulkAction-createIndex"><a href="#org-elasticsearch-action-bulk-TransportBulkAction-createIndex" class="headerlink" title="org.elasticsearch.action.bulk.TransportBulkAction#createIndex"></a>org.elasticsearch.action.bulk.TransportBulkAction#createIndex</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="comment">//创建索引</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(String index, TimeValue timeout, ActionListener&lt;CreateIndexResponse&gt; listener)</span> </span>&#123;</span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest();</span><br><span class="line">        createIndexRequest.index(index);</span><br><span class="line">        createIndexRequest.cause(<span class="string">&quot;auto(bulk api)&quot;</span>);</span><br><span class="line">        createIndexRequest.masterNodeTimeout(timeout);</span><br><span class="line">        createIndexAction.execute(createIndexRequest, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引创建请求发送到主节点处理</p><h1 id="org-elasticsearch-action-admin-indices-create-TransportCreateIndexAction-masterOperation"><a href="#org-elasticsearch-action-admin-indices-create-TransportCreateIndexAction-masterOperation" class="headerlink" title="org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction#masterOperation"></a>org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction#masterOperation</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportCreateIndexAction</span> <span class="keyword">extends</span> <span class="title">TransportMasterNodeAction</span>&lt;<span class="title">CreateIndexRequest</span>, <span class="title">CreateIndexResponse</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">masterOperation</span><span class="params">(<span class="keyword">final</span> CreateIndexRequest request, <span class="keyword">final</span> ClusterState state, <span class="keyword">final</span> ActionListener&lt;CreateIndexResponse&gt; listener)</span> </span>&#123;</span><br><span class="line">        String cause = request.cause();</span><br><span class="line">        <span class="keyword">if</span> (cause.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            cause = <span class="string">&quot;api&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//索引名</span></span><br><span class="line">        <span class="keyword">final</span> String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());</span><br><span class="line">        <span class="keyword">final</span> CreateIndexClusterStateUpdateRequest updateRequest = <span class="keyword">new</span> CreateIndexClusterStateUpdateRequest(request, cause, indexName, request.index(), request.updateAllTypes())</span><br><span class="line">                .ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout())</span><br><span class="line">                .settings(request.settings()).mappings(request.mappings())</span><br><span class="line">                .aliases(request.aliases()).customs(request.customs())</span><br><span class="line">                .waitForActiveShards(request.waitForActiveShards());</span><br><span class="line"></span><br><span class="line">        createIndexService.createIndex(updateRequest, ActionListener.wrap(response -&gt;</span><br><span class="line">                        listener.onResponse(<span class="keyword">new</span> CreateIndexResponse(response.isAcknowledged(), response.isShardsAcked(), indexName)),</span><br><span class="line">                listener::onFailure));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetaDataCreateIndexService</span> <span class="keyword">extends</span> <span class="title">AbstractComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(<span class="keyword">final</span> CreateIndexClusterStateUpdateRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> ActionListener&lt;CreateIndexClusterStateUpdateResponse&gt; listener)</span> </span>&#123;</span><br><span class="line">        onlyCreateIndex(request, ActionListener.wrap(response -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isAcknowledged()) &#123;</span><br><span class="line">                activeShardsObserver.waitForActiveShards(<span class="keyword">new</span> String[]&#123;request.index()&#125;, request.waitForActiveShards(), request.ackTimeout(),</span><br><span class="line">                        shardsAcked -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (shardsAcked == <span class="keyword">false</span>) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;[&#123;&#125;] index created, but the operation timed out while waiting for &quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;enough shards to be started.&quot;</span>, request.index());</span><br><span class="line">                            &#125;</span><br><span class="line">                            listener.onResponse(<span class="keyword">new</span> CreateIndexClusterStateUpdateResponse(response.isAcknowledged(), shardsAcked));</span><br><span class="line">                        &#125;, listener::onFailure);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onResponse(<span class="keyword">new</span> CreateIndexClusterStateUpdateResponse(<span class="keyword">false</span>, <span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, listener::onFailure));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onlyCreateIndex</span><span class="params">(<span class="keyword">final</span> CreateIndexClusterStateUpdateRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">final</span> ActionListener&lt;ClusterStateUpdateResponse&gt; listener)</span> </span>&#123;</span><br><span class="line">        Settings.Builder updatedSettingsBuilder = Settings.builder();</span><br><span class="line">        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();</span><br><span class="line">        indexScopedSettings.validate(build, <span class="keyword">true</span>); <span class="comment">// we do validate here - index setting must be consistent</span></span><br><span class="line">        request.settings(build);</span><br><span class="line">        <span class="comment">//提交任务</span></span><br><span class="line">        clusterService.submitStateUpdateTask(<span class="string">&quot;create-index [&quot;</span> + request.index() + <span class="string">&quot;], cause [&quot;</span> + request.cause() + <span class="string">&quot;]&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> IndexCreationTask(logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, settings,</span><br><span class="line">                        <span class="keyword">this</span>::validate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IndexCreationTask</p><p>SafeAckedClusterStateTaskListener<br>TieBreakingPrioritizedRunnable</p><p>Index 相关 API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#查看索引相关信息</span><br><span class="line">GET kibana_sample_data_ecommerce</span><br><span class="line"></span><br><span class="line">#查看索引的文档总数</span><br><span class="line">GET kibana_sample_data_ecommerce&#x2F;_count</span><br><span class="line"></span><br><span class="line">#查看前10条文档，了解文档格式</span><br><span class="line">POST kibana_sample_data_ecommerce&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#_cat indices API</span><br><span class="line">#查看indices</span><br><span class="line">GET &#x2F;_cat&#x2F;indices&#x2F;kibana*?v&amp;s&#x3D;index</span><br><span class="line"></span><br><span class="line">#查看状态为绿的索引</span><br><span class="line">GET &#x2F;_cat&#x2F;indices?v&amp;health&#x3D;green</span><br><span class="line"></span><br><span class="line">#按照文档个数排序</span><br><span class="line">GET &#x2F;_cat&#x2F;indices?v&amp;s&#x3D;docs.count:desc</span><br><span class="line"></span><br><span class="line">#查看具体的字段</span><br><span class="line">GET &#x2F;_cat&#x2F;indices&#x2F;kibana*?pri&amp;v&amp;h&#x3D;health,index,pri,rep,docs.count,mt</span><br><span class="line"></span><br><span class="line">#How much memory is used per index?</span><br><span class="line">GET &#x2F;_cat&#x2F;indices?v&amp;h&#x3D;i,tm&amp;s&#x3D;tm:desc</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">get _cat&#x2F;nodes?v</span><br><span class="line">GET &#x2F;_nodes&#x2F;es7_01,es7_02</span><br><span class="line">GET &#x2F;_cat&#x2F;nodes?v</span><br><span class="line">GET &#x2F;_cat&#x2F;nodes?v&amp;h&#x3D;id,ip,port,v,m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET _cluster&#x2F;health</span><br><span class="line">GET _cluster&#x2F;health?level&#x3D;shards</span><br><span class="line">GET &#x2F;_cluster&#x2F;health&#x2F;kibana_sample_data_ecommerce,kibana_sample_data_flights</span><br><span class="line">GET &#x2F;_cluster&#x2F;health&#x2F;kibana_sample_data_flights?level&#x3D;shards</span><br><span class="line"></span><br><span class="line">#### cluster state</span><br><span class="line">The cluster state API allows access to metadata representing the state of the whole cluster. This includes information such as</span><br><span class="line">GET &#x2F;_cluster&#x2F;state</span><br><span class="line"></span><br><span class="line">#cluster get settings</span><br><span class="line">GET &#x2F;_cluster&#x2F;settings</span><br><span class="line">GET &#x2F;_cluster&#x2F;settings?include_defaults&#x3D;true</span><br><span class="line"></span><br><span class="line">GET _cat&#x2F;shards</span><br><span class="line">GET _cat&#x2F;shards?h&#x3D;index,shard,prirep,state,unassigned.reason</span><br></pre></td></tr></table></figure><p>final CreateIndexClusterStateUpdateRequest updateRequest = new CreateIndexClusterStateUpdateRequest(request, cause, indexName, request.index(), request.updateAllTypes())<br>.ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout())<br>.settings(request.settings()).mappings(request.mappings())<br>.aliases(request.aliases()).customs(request.customs())<br>.waitForActiveShards(request.waitForActiveShards());</p><pre><code>    createIndexService.createIndex(updateRequest, ActionListener.wrap(response -&gt;        listener.onResponse(new CreateIndexResponse(response.isAcknowledged(), response.isShardsAcked(), indexName)),        listener::onFailure));</code></pre><p>new IndexCreationTask(logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, settings,<br>this::validate))</p><p>1 从集群状态元数据找出 templates<br>2 从请求中解析出mappings<br>3 设置索引setting,优先使用templates，如果没有使用默认setting<br>4 构造了新 indexMetaData<br>5 把 indexMetaData 设置进 MetaData，生成新 MetaData<br>6 把 MetaData 设置进 ClusterState，生成新 ClusterState<br>7 重新设置路由表，把 RoutingTable 设置进 ClusterState<br>8 返回新状态，得到新集群状态后，开始给节点分配分片，刚开始只会把主分片分给节点，副分片不动，主分片状态由UNASSIGNED 转成 INITIALIZING<br>9 开始把新的集群状态发送给集群所有节点<br>10 org.elasticsearch.cluster.service.ClusterApplierService#callClusterStateAppliers 方法开始对新集群状态设置<br>org.elasticsearch.indices.cluster.IndicesClusterStateService#applyClusterState</p><p>11 接受到状态后，查找该节点分配到的分片，创建分片IndexShard<br>创建_state和index文件夹，_state下写入state-0.st文件的是否为主分片，索引id,分片id<br>translog translog.ckp translog-1.tlog</p><p>org.elasticsearch.index.engine.InternalEngine#getIndexWriterConfig</p><p>创建 IndexWriterConfig</p><p>org.elasticsearch.index.engine.InternalEngine#createWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig)</p><p>//创建 IndexWriter</p><p>seqNoStats = new SeqNoStats(<br>SequenceNumbers.NO_OPS_PERFORMED,<br>SequenceNumbers.NO_OPS_PERFORMED,<br>SequenceNumbers.UNASSIGNED_SEQ_NO);</p><p>seqNoService.getGlobalCheckpoint()</p><p>final long minSeqNo = SequenceNumbers.NO_OPS_PERFORMED;<br>final long maxSeqNo = SequenceNumbers.NO_OPS_PERFORMED;</p><p>Translog.ckp</p><p>return new Checkpoint(offset = 0, numOps=0, generation=1, minSeqNo=-1, maxSeqNo=-1, globalCheckpoint=-2, minTranslogGeneration=1);</p><p>Checkpoint数据写入Translog.ckp文件</p><p>translog-1.tlog</p><p>CodecUtil.writeHeader(out, TRANSLOG_CODEC, VERSION);<br>translogUUID</p><p>ref=translogUUID<br>return new Checkpoint(offset = getHeaderLength(ref.length), numOps=0, generation=1, minSeqNo=-1, maxSeqNo=-1, globalCheckpoint=-2, minTranslogGeneration=1);</p><p>段提交</p><p>开始生成 StandardDirectoryReader,并生成IndexSearcher<br>internalSearcherManager.addListener(versionMap);<br>//new RefreshMetricUpdater(refreshMetric)<br>this.internalSearcherManager.addListener(listener);<br>//buildRefreshListeners()<br>this.externalSearcherManager.addListener(listener);</p><p>refresh * 2</p><p>主分片状态由INITIALIZING 转成 STARTED<br>给主节点发送请求开始为副分片分配节点<br>从新得到新的集群状态，发布新状态，得到新的状态节点开始更新</p><p>主分片更新</p><p>IndexNotFoundException FileNotFoundException IOException    </p><p>副分片创建IndexShared,后开始索引恢复，发送请求给主分片节点</p><p>主分片节点接受到请求后，传送主分片给副分片，副分片创建 Engine,副分片恢复成功</p><p>副分片更新，只是换了状态</p><p>nonFailedTasks.forEach(task -&gt; task.listener.clusterStateProcessed(task.source(), previousClusterState, newClusterState));<br>taskInputs.executor.clusterStatePublished(clusterChangedEvent);</p><p>SubReaderWrapper</p><p>onTragicEvent</p><p>tragicEvent</p><p>@Override<br>public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {<br>IndexSearcher searcher = super.newSearcher(reader, previousReader);<br>searcher.setQueryCache(engineConfig.getQueryCache());<br>searcher.setQueryCachingPolicy(engineConfig.getQueryCachingPolicy());<br>searcher.setSimilarity(engineConfig.getSimilarity());<br>return searcher;<br>}</p><p>(searcher) -&gt; { IndexShard shard =  getShardOrNull(shardId.getId()); if (shard != null) { warmer.warm(searcher, shard, IndexService.this.indexSettings);}}</p><p>org.elasticsearch.index.shard.IndexShard#newEngineConfig</p><p>DirectoryReader.openIfChanged((DirectoryReader) r);</p><p>专家：返回只读读取器，涵盖对索引的所有已提交和未提交的更改。 这提供了“近乎实时”的搜索，因为在 IndexWriter 会话期间所做的更改可以快速用于搜索，而无需关闭 writer 或调用 {@link #commit}。</p><p>请注意，这在功能上等同于调用 {flush} 然后打开一个新的阅读器。但是这种方法的周转时间应该更快，因为它避免了潜在的代价高昂的 {@link #commit}。</p><p>一旦使用完毕，您必须关闭此方法返回的 {@link IndexReader}。</p><p>它<i>接近</i>实时，因为没有硬性保证在使用 IndexWriter 进行更改后您能多快获得新阅读器。 您必须根据自己的情况进行试验，以确定它是否足够快。 由于这是一个新的实验性功能，请报告您的发现，以便我们可以学习、改进和迭代。</p><p>生成的阅读器支持 {@link DirectoryReader#openIfChanged}，但该调用将简单地转发回此方法（尽管将来可能会改变）。</p><p>第一次调用此方法时，此写入器实例将尽一切努力将其打开的读取器池化以进行合并、应用删除等。这意味着额外的资源（RAM、文件描述符、CPU 时间）将被占用 消耗。</p><p>为了降低重新打开阅读器的延迟，您应该调用 {@link IndexWriterConfig#setMergedSegmentWarmer} 在新合并的段提交到索引之前对其进行预热。 这对于在大型合并后最小化索引到搜索的延迟很重要。</p><p>如果 addIndexes* 调用正在另一个线程中运行，那么这个读取器将只从外部索引中搜索到目前为止已成功复制的那些段。</p><p><b>注意</b>：一旦写入器关闭，任何未完成的读取器可能会继续使用。但是，如果您尝试重新打开这些读取器中的任何一个，您将遇到 {@link AlreadyClosedException}。</p><p>索引中有多少文档，或者正在添加（保留）的过程中。 例如，像 addIndexes 这样的操作将在实际更改索引之前首先保留添加 N 个文档的权利，就像酒店如何在您的信用卡上放置“授权保留”以确保他们稍后可以在您退房时向您收费。</p><p>final IndicesService indicesService = new IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry,<br>analysisModule.getAnalysisRegistry(),<br>clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,<br>threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays, scriptModule.getScriptService(),<br>client, metaStateService);</p><p>this.buildInIndexListener =<br>Arrays.asList(<br>peerRecoverySourceService,<br>recoveryTargetService,<br>searchService,<br>syncedFlushService,<br>snapshotShardsService);</p><p>shardStartedClusterStateTaskExecutor<br>threadPool.schedule(activityTimeout, ThreadPool.Names.GENERIC,<br>new RecoveryMonitor(recoveryTarget.recoveryId(), recoveryTarget.lastAccessTime(), activityTimeout));</p><p>org.elasticsearch.indices.recovery.PeerRecoveryTargetService#doRecovery</p><p>当节点异常重启时， 写入磁盘的数据先到文件系统的缓冲， 未必来得及刷盘， 如果不通过某种方式将未刷盘的数据找回来， 则会丢失一些数据， 这是保持数据完整性的体现；<br>另一方面， 由于写入操作在多个分片副本上没有来得及全部执行， 副分片需要同步成和主分片完全一致， 这是数据副 本一致性的体现</p><p>主分片从translog中自我恢复， 尚未执行flush到磁盘的Lucene分段<br>可以从translog中重建；<br>· 副分片需要从主分片中拉取Lucene分段和translog进行恢复。 但是<br>有机会跳过拉取Lucene分段的过程。<br>索引恢复的触发条件包括从快照备份恢复、 节点加入和离开、 索引<br>的_open操作等</p><p>org.apache.lucene.codecs.lucene90.Lucene90Codec<br>org.apache.lucene.codecs.lucene90.Lucene90Codec<br>Lucene90CompressingStoredFieldsWriter</p><p>CharTermAttribute<br>PackedTokenAttributeImpl</p><p>this.attributes = input.attributes;<br>this.attributeImpls = input.attributeImpls;<br>this.currentState = input.currentState;<br>this.factory = input.factory;</p><p>return new TokenStreamComponents(<br>r -&gt; {<br>src.setMaxTokenLength(StandardAnalyzer.this.maxTokenLength);<br>src.setReader(r);<br>},<br>tok);</p><p>schema.reset(docId);<br>invertState.reset();<br>stream.reset();</p><p>Lucene90NormsProducer</p><p>final SegmentInfos sis = new SegmentInfos(config.getIndexCreatedVersionMajor());</p><p>final SegmentWriteState flushState =<br>new SegmentWriteState(<br>infoStream,<br>directory,<br>segmentInfo,<br>fieldInfos.finish(),<br>pendingUpdates,<br>new IOContext(new FlushInfo(numDocsInRAM, lastCommittedBytesUsed)));</p><p>org.apache.lucene.index.DocumentsWriter#flushAllThreads<br>加锁</p><p>org.apache.lucene.index.DocumentsWriterFlushControl#markForFullFlush </p><p>加锁换DocumentsWriterDeleteQueue</p><p>DeltaPackedLongValues</p><p>Lucene90PostingsWriter</p><p>new FreqProxTerms(perField)</p><p>FreqProxTermsEnum termsEnum = new FreqProxTermsEnum(terms);</p><p>posEnum = new FreqProxPostingsEnum(terms, postingsArray);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;org-elasticsearch-action-bulk-TransportBulkAction-createIndex&quot;&gt;&lt;a href=&quot;#org-elasticsearch-action-bulk-TransportBulkAction-createInd</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="elasticsearch" scheme="https://xxnjdg.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch数据写入</title>
    <link href="https://xxnjdg.github.io/2021/05/04/elasticsearch-2/"/>
    <id>https://xxnjdg.github.io/2021/05/04/elasticsearch-2/</id>
    <published>2021-05-04T11:42:00.000Z</published>
    <updated>2021-06-22T20:46:03.729Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.cn/article/13533">https://elasticsearch.cn/article/13533</a></p><h1 id="写入入口-RestIndexAction"><a href="#写入入口-RestIndexAction" class="headerlink" title="写入入口 RestIndexAction"></a>写入入口 RestIndexAction</h1><table>    <tr>        <td>参数</td>         <td>简介</td>    </tr>    <tr>        <td>version</td>         <td>设置文档版本号。主要用于实现乐观锁</td>    </tr>    <tr>        <td>version type</td>         <td>默认为internal，请求参数指定的版本号与存储的文档版本号相同则写入。其他可选值有external等类型，为external类型时，如果当前存储的文档版本号小于请求参数指定的版本号，则写入数据。version type主要控制版本号的比较机制，用于对文档进行并发更新操作时同步数据</td>    </tr>    <tr>        <td>op type</td>         <td>可设置为create，代表仅在文档不存在时才写入。如果文档已存在，则写请求将失败</td>    </tr>    <tr>        <td>routing</td>         <td>ES默认使用文档ID进行路由，指定routing可使用routing值进行路由</td>     </tr>    <tr>        <td>wait for active shards</td>         <td>用于控制写一致性，当指定数量的分片副本可用时才执行写入，否则重试直至超时。默认为1，主分片可用即执行写入</td>     </tr>    <tr>        <td>refresh</td>         <td>写入完毕后执行refresh,使其对搜索可见</td>     </tr>    <tr>        <td>timeout</td>         <td>请求超时时间，默认为1分钟</td>     </tr>    <tr>        <td>pipeline</td>         <td>指定事先创建好的pipeline名称</td>    </tr></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestIndexAction</span> <span class="keyword">extends</span> <span class="title">BaseRestHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RestIndexAction</span><span class="params">(Settings settings, RestController controller)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(settings);</span><br><span class="line">        <span class="comment">//1 写入文档，自动生成id, 注册 post 请求 /&#123;index&#125;/&#123;type&#125; 对应的处理函数 this</span></span><br><span class="line">        controller.registerHandler(POST, <span class="string">&quot;/&#123;index&#125;/&#123;type&#125;&quot;</span>, <span class="keyword">this</span>); <span class="comment">// auto id creation</span></span><br><span class="line">        controller.registerHandler(PUT, <span class="string">&quot;/&#123;index&#125;/&#123;type&#125;/&#123;id&#125;&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">        controller.registerHandler(POST, <span class="string">&quot;/&#123;index&#125;/&#123;type&#125;/&#123;id&#125;&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">        CreateHandler createHandler = <span class="keyword">new</span> CreateHandler(settings);</span><br><span class="line">        controller.registerHandler(PUT, <span class="string">&quot;/&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/_create&quot;</span>, createHandler);</span><br><span class="line">        controller.registerHandler(POST, <span class="string">&quot;/&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/_create&quot;</span>, createHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;document_index_action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateHandler</span> <span class="keyword">extends</span> <span class="title">BaseRestHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">CreateHandler</span><span class="params">(Settings settings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(settings);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;document_create_action&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RestChannelConsumer <span class="title">prepareRequest</span><span class="params">(RestRequest request, <span class="keyword">final</span> NodeClient client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            request.params().put(<span class="string">&quot;op_type&quot;</span>, <span class="string">&quot;create&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> RestIndexAction.<span class="keyword">this</span>.prepareRequest(request, client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 对应处理器方法执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestChannelConsumer <span class="title">prepareRequest</span><span class="params">(<span class="keyword">final</span> RestRequest request, <span class="keyword">final</span> NodeClient client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解析各种请求参数,请求体</span></span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(request.param(<span class="string">&quot;index&quot;</span>), request.param(<span class="string">&quot;type&quot;</span>), request.param(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="comment">//默认id路由</span></span><br><span class="line">        indexRequest.routing(request.param(<span class="string">&quot;routing&quot;</span>));</span><br><span class="line">        indexRequest.parent(request.param(<span class="string">&quot;parent&quot;</span>));</span><br><span class="line">        indexRequest.setPipeline(request.param(<span class="string">&quot;pipeline&quot;</span>));</span><br><span class="line">        <span class="comment">//请求体，即文档内容</span></span><br><span class="line">        indexRequest.source(request.requiredContent(), request.getXContentType());</span><br><span class="line">        <span class="comment">//默认1分钟超时</span></span><br><span class="line">        indexRequest.timeout(request.paramAsTime(<span class="string">&quot;timeout&quot;</span>, IndexRequest.DEFAULT_TIMEOUT));</span><br><span class="line">        <span class="comment">//默认不刷新</span></span><br><span class="line">        indexRequest.setRefreshPolicy(request.param(<span class="string">&quot;refresh&quot;</span>));</span><br><span class="line">        <span class="comment">//设置版本号，用于乐观锁</span></span><br><span class="line">        indexRequest.version(RestActions.parseVersion(request));</span><br><span class="line">        indexRequest.versionType(VersionType.fromString(request.param(<span class="string">&quot;version_type&quot;</span>), indexRequest.versionType()));</span><br><span class="line">        String sOpType = request.param(<span class="string">&quot;op_type&quot;</span>);</span><br><span class="line">        String waitForActiveShards = request.param(<span class="string">&quot;wait_for_active_shards&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (waitForActiveShards != <span class="keyword">null</span>) &#123;</span><br><span class="line">            indexRequest.waitForActiveShards(ActiveShardCount.parseString(waitForActiveShards));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sOpType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            indexRequest.opType(sOpType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 执行这个方法</span></span><br><span class="line">        <span class="keyword">return</span> channel -&gt;</span><br><span class="line">                client.index(indexRequest, <span class="keyword">new</span> RestStatusToXContentListener&lt;&gt;(channel, r -&gt; r.getLocation(indexRequest.routing())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入这个方法</p><h2 id="org-elasticsearch-action-bulk-TransportBulkAction-doExecute-org-elasticsearch-tasks-Task-org-elasticsearch-action-bulk-BulkRequest-org-elasticsearch-action-ActionListener-lt-org-elasticsearch-action-bulk-BulkResponse-gt"><a href="#org-elasticsearch-action-bulk-TransportBulkAction-doExecute-org-elasticsearch-tasks-Task-org-elasticsearch-action-bulk-BulkRequest-org-elasticsearch-action-ActionListener-lt-org-elasticsearch-action-bulk-BulkResponse-gt" class="headerlink" title="org.elasticsearch.action.bulk.TransportBulkAction#doExecute(org.elasticsearch.tasks.Task, org.elasticsearch.action.bulk.BulkRequest, org.elasticsearch.action.ActionListener&lt;org.elasticsearch.action.bulk.BulkResponse&gt;)"></a>org.elasticsearch.action.bulk.TransportBulkAction#doExecute(org.elasticsearch.tasks.Task, org.elasticsearch.action.bulk.BulkRequest, org.elasticsearch.action.ActionListener&lt;org.elasticsearch.action.bulk.BulkResponse&gt;)</h2><p>这个方法做了以下事情</p><h3 id="1-ingest-pipeline"><a href="#1-ingest-pipeline" class="headerlink" title="1. ingest pipeline"></a>1. ingest pipeline</h3><p>查看该请求是否符合某个ingest pipeline的pattern, 如果符合则执行pipeline中的逻辑，一般是对文档进行各种预处理，如格式调整，增加字段等。如果当前节点没有ingest角色，则需要将请求转发给有ingest角色的节点执行。</p><h3 id="2-自动创建索引"><a href="#2-自动创建索引" class="headerlink" title="2. 自动创建索引"></a>2. 自动创建索引</h3><p>判断索引是否存在，如果开启了自动创建则交给主节点自动创建，否则报错</p><h3 id="3-设置routing"><a href="#3-设置routing" class="headerlink" title="3. 设置routing"></a>3. 设置routing</h3><p>获取请求URL或mapping中的_routing，如果没有则使用_id, 如果没有指定_id则ES会自动生成一个全局唯一ID。该_routing字段用于决定文档分配在索引的哪个shard上。</p><h3 id="4-构建BulkShardRequest"><a href="#4-构建BulkShardRequest" class="headerlink" title="4. 构建BulkShardRequest"></a>4. 构建BulkShardRequest</h3><p>由于Bulk Request中包含多种(Index/Update/Delete)请求，这些请求分别需要到不同的shard上执行，因此协调节点，会将请求按照shard分开，同一个shard上的请求聚合到一起，构建BulkShardRequest</p><h3 id="5-将请求发送给primary-shard"><a href="#5-将请求发送给primary-shard" class="headerlink" title="5. 将请求发送给primary shard"></a>5. 将请求发送给primary shard</h3><p>因为当前执行的是写操作，因此只能在primary上完成，所以需要把请求路由到primary shard所在节点</p><h3 id="6-等待primary-shard返回"><a href="#6-等待primary-shard返回" class="headerlink" title="6. 等待primary shard返回"></a>6. 等待primary shard返回</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportBulkAction</span> <span class="keyword">extends</span> <span class="title">HandledTransportAction</span>&lt;<span class="title">BulkRequest</span>, <span class="title">BulkResponse</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(Task task, BulkRequest bulkRequest, ActionListener&lt;BulkResponse&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 处理pipeline请求</span></span><br><span class="line">        <span class="keyword">if</span> (bulkRequest.hasIndexRequestsWithPipelines()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clusterService.localNode().isIngestNode()) &#123;</span><br><span class="line">                processBulkIndexIngestRequest(task, bulkRequest, listener);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ingestForwarder.forwardIngestRequest(BulkAction.INSTANCE, bulkRequest, listener);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> startTime = relativeTime();</span><br><span class="line">        <span class="keyword">final</span> AtomicArray&lt;BulkItemResponse&gt; responses = <span class="keyword">new</span> AtomicArray&lt;&gt;(bulkRequest.requests.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认为true</span></span><br><span class="line">        <span class="keyword">if</span> (needToCheck()) &#123;</span><br><span class="line">            <span class="comment">// Attempt to create all the indices that we&#x27;re going to need during the bulk before we start.</span></span><br><span class="line">            <span class="comment">// Step 1: collect all the indices in the request</span></span><br><span class="line">            <span class="comment">//获取索引名字</span></span><br><span class="line">            <span class="keyword">final</span> Set&lt;String&gt; indices = bulkRequest.requests.stream()</span><br><span class="line">                    <span class="comment">// delete requests should not attempt to create the index (if the index does not</span></span><br><span class="line">                    <span class="comment">// exists), unless an external versioning is used</span></span><br><span class="line">                    .filter(request -&gt; request.opType() != DocWriteRequest.OpType.DELETE</span><br><span class="line">                            || request.versionType() == VersionType.EXTERNAL</span><br><span class="line">                            || request.versionType() == VersionType.EXTERNAL_GTE)</span><br><span class="line">                    .map(DocWriteRequest::index)</span><br><span class="line">                    .collect(Collectors.toSet());</span><br><span class="line">            <span class="comment">/* Step 2: filter that to indices that don&#x27;t exist and we can create. At the same time build a map of indices we can&#x27;t create</span></span><br><span class="line"><span class="comment">             * that we&#x27;ll use when we try to run the requests. */</span></span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, IndexNotFoundException&gt; indicesThatCannotBeCreated = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Set&lt;String&gt; autoCreateIndices = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            ClusterState state = clusterService.state();</span><br><span class="line">            <span class="keyword">for</span> (String index : indices) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> shouldAutoCreate;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//是否自动创建索引,从路由表查询索引是否存在，如果不存在那么就自动创建索引,路由表在集群状态中保存</span></span><br><span class="line">                    shouldAutoCreate = shouldAutoCreate(index, state);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IndexNotFoundException e) &#123;</span><br><span class="line">                    shouldAutoCreate = <span class="keyword">false</span>;</span><br><span class="line">                    indicesThatCannotBeCreated.put(index, e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (shouldAutoCreate) &#123;</span><br><span class="line">                    autoCreateIndices.add(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Step 3: create all the indices that are missing, if there are any missing. start the bulk after all the creates come back.</span></span><br><span class="line">            <span class="keyword">if</span> (autoCreateIndices.isEmpty()) &#123;</span><br><span class="line">                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//需要自动创建索引</span></span><br><span class="line">                <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(autoCreateIndices.size());</span><br><span class="line">                <span class="keyword">for</span> (String index : autoCreateIndices) &#123;</span><br><span class="line">                    <span class="comment">//2 这个方法就是创建索引</span></span><br><span class="line">                    createIndex(index, bulkRequest.timeout(), <span class="keyword">new</span> ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(CreateIndexResponse result)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//创建完所有索引后执行</span></span><br><span class="line">                                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (!(ExceptionsHelper.unwrapCause(e) <span class="keyword">instanceof</span> ResourceAlreadyExistsException)) &#123;</span><br><span class="line">                                <span class="comment">// fail all requests involving this index, if create didn&#x27;t work</span></span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bulkRequest.requests.size(); i++) &#123;</span><br><span class="line">                                    DocWriteRequest request = bulkRequest.requests.get(i);</span><br><span class="line">                                    <span class="keyword">if</span> (request != <span class="keyword">null</span> &amp;&amp; setResponseFailureIfIndexMatches(responses, i, request, index, e)) &#123;</span><br><span class="line">                                        bulkRequest.requests.set(i, <span class="keyword">null</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                                executeBulk(task, bulkRequest, startTime, ActionListener.wrap(listener::onResponse, inner -&gt; &#123;</span><br><span class="line">                                    inner.addSuppressed(e);</span><br><span class="line">                                    listener.onFailure(inner);</span><br><span class="line">                                &#125;), responses, indicesThatCannotBeCreated);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            executeBulk(task, bulkRequest, startTime, listener, responses, emptyMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executeBulk</span><span class="params">(Task task, <span class="keyword">final</span> BulkRequest bulkRequest, <span class="keyword">final</span> <span class="keyword">long</span> startTimeNanos, <span class="keyword">final</span> ActionListener&lt;BulkResponse&gt; listener,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">final</span> AtomicArray&lt;BulkItemResponse&gt; responses, Map&lt;String, IndexNotFoundException&gt; indicesThatCannotBeCreated)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BulkOperation(task, bulkRequest, listener, responses, startTimeNanos, indicesThatCannotBeCreated).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BulkOperation</span> <span class="keyword">extends</span> <span class="title">AbstractRunnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ClusterState clusterState = observer.setAndGetObservedState();</span><br><span class="line">            <span class="keyword">if</span> (handleBlockExceptions(clusterState)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ConcreteIndices concreteIndices = <span class="keyword">new</span> ConcreteIndices(clusterState, indexNameExpressionResolver);</span><br><span class="line">            MetaData metaData = clusterState.metaData();</span><br><span class="line">            <span class="comment">//遍历所有请求</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bulkRequest.requests.size(); i++) &#123;</span><br><span class="line">                DocWriteRequest docWriteRequest = bulkRequest.requests.get(i);</span><br><span class="line">                <span class="comment">//the request can only be null because we set it to null in the previous step, so it gets ignored</span></span><br><span class="line">                <span class="keyword">if</span> (docWriteRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检查索引状态是否可用</span></span><br><span class="line">                <span class="keyword">if</span> (addFailureIfIndexIsUnavailable(docWriteRequest, i, concreteIndices, metaData)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Index concreteIndex = concreteIndices.resolveIfAbsent(docWriteRequest);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//opType 默认 INDEX</span></span><br><span class="line">                    <span class="keyword">switch</span> (docWriteRequest.opType()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> CREATE:</span><br><span class="line">                        <span class="keyword">case</span> INDEX:</span><br><span class="line">                            IndexRequest indexRequest = (IndexRequest) docWriteRequest;</span><br><span class="line">                            <span class="keyword">final</span> IndexMetaData indexMetaData = metaData.index(concreteIndex);</span><br><span class="line">                            MappingMetaData mappingMd = indexMetaData.mappingOrDefault(indexRequest.type());</span><br><span class="line">                            Version indexCreated = indexMetaData.getCreationVersion();</span><br><span class="line">                            <span class="comment">//3 设置 routing，获取请求URL或mapping中的_routing，如果没有则使用_id</span></span><br><span class="line">                            indexRequest.resolveRouting(metaData);</span><br><span class="line">                            <span class="comment">//如果id为空，生成id</span></span><br><span class="line">                            indexRequest.process(indexCreated, mappingMd, concreteIndex.getName());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> UPDATE:</span><br><span class="line">                            TransportUpdateAction.resolveAndValidateRouting(metaData, concreteIndex.getName(), (UpdateRequest) docWriteRequest);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> DELETE:</span><br><span class="line">                            docWriteRequest.routing(metaData.resolveIndexRouting(docWriteRequest.parent(), docWriteRequest.routing(), docWriteRequest.index()));</span><br><span class="line">                            <span class="comment">// check if routing is required, if so, throw error if routing wasn&#x27;t specified</span></span><br><span class="line">                            <span class="keyword">if</span> (docWriteRequest.routing() == <span class="keyword">null</span> &amp;&amp; metaData.routingRequired(concreteIndex.getName(), docWriteRequest.type())) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> RoutingMissingException(concreteIndex.getName(), docWriteRequest.type(), docWriteRequest.id());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;request type not supported: [&quot;</span> + docWriteRequest.opType() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ElasticsearchParseException | IllegalArgumentException | RoutingMissingException e) &#123;</span><br><span class="line">                    BulkItemResponse.Failure failure = <span class="keyword">new</span> BulkItemResponse.Failure(concreteIndex.getName(), docWriteRequest.type(), docWriteRequest.id(), e);</span><br><span class="line">                    BulkItemResponse bulkItemResponse = <span class="keyword">new</span> BulkItemResponse(i, docWriteRequest.opType(), failure);</span><br><span class="line">                    responses.set(i, bulkItemResponse);</span><br><span class="line">                    <span class="comment">// make sure the request gets never processed again</span></span><br><span class="line">                    bulkRequest.requests.set(i, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// first, go over all the requests and create a ShardId -&gt; Operations mapping</span></span><br><span class="line">            Map&lt;ShardId, List&lt;BulkItemRequest&gt;&gt; requestsByShard = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bulkRequest.requests.size(); i++) &#123;</span><br><span class="line">                DocWriteRequest request = bulkRequest.requests.get(i);</span><br><span class="line">                <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取索引名</span></span><br><span class="line">                String concreteIndex = concreteIndices.getConcreteIndex(request.index()).getName();</span><br><span class="line">                <span class="comment">//根据id 或 _routing 算出要写入到的分片id</span></span><br><span class="line">                ShardId shardId = clusterService.operationRouting().indexShards(clusterState, concreteIndex, request.id(), request.routing()).shardId();</span><br><span class="line">                List&lt;BulkItemRequest&gt; shardRequests = requestsByShard.computeIfAbsent(shardId, shard -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                <span class="comment">//把同一分片的请求合并一起</span></span><br><span class="line">                shardRequests.add(<span class="keyword">new</span> BulkItemRequest(i, request));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (requestsByShard.isEmpty()) &#123;</span><br><span class="line">                listener.onResponse(<span class="keyword">new</span> BulkResponse(responses.toArray(<span class="keyword">new</span> BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(requestsByShard.size());</span><br><span class="line">            String nodeId = clusterService.localNode().getId();</span><br><span class="line">            <span class="comment">//遍历每个分片请求</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;ShardId, List&lt;BulkItemRequest&gt;&gt; entry : requestsByShard.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">final</span> ShardId shardId = entry.getKey();</span><br><span class="line">                <span class="keyword">final</span> List&lt;BulkItemRequest&gt; requests = entry.getValue();</span><br><span class="line">                <span class="comment">//4 构建BulkShardRequest</span></span><br><span class="line">                BulkShardRequest bulkShardRequest = <span class="keyword">new</span> BulkShardRequest(shardId, bulkRequest.getRefreshPolicy(),</span><br><span class="line">                        requests.toArray(<span class="keyword">new</span> BulkItemRequest[requests.size()]));</span><br><span class="line">                bulkShardRequest.waitForActiveShards(bulkRequest.waitForActiveShards());</span><br><span class="line">                bulkShardRequest.timeout(bulkRequest.timeout());</span><br><span class="line">                <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bulkShardRequest.setParentTask(nodeId, task.getId());</span><br><span class="line">                &#125;</span><br><span class="line">                shardBulkAction.execute(bulkShardRequest, <span class="keyword">new</span> ActionListener&lt;BulkShardResponse&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BulkShardResponse bulkShardResponse)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (BulkItemResponse bulkItemResponse : bulkShardResponse.getResponses()) &#123;</span><br><span class="line">                            <span class="comment">// we may have no response if item failed</span></span><br><span class="line">                            <span class="keyword">if</span> (bulkItemResponse.getResponse() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                bulkItemResponse.getResponse().setShardInfo(bulkShardResponse.getShardInfo());</span><br><span class="line">                            &#125;</span><br><span class="line">                            responses.set(bulkItemResponse.getItemId(), bulkItemResponse);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                            finishHim();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// create failures for all relevant requests</span></span><br><span class="line">                        <span class="keyword">for</span> (BulkItemRequest request : requests) &#123;</span><br><span class="line">                            <span class="keyword">final</span> String indexName = concreteIndices.getConcreteIndex(request.index()).getName();</span><br><span class="line">                            DocWriteRequest docWriteRequest = request.request();</span><br><span class="line">                            responses.set(request.id(), <span class="keyword">new</span> BulkItemResponse(request.id(), docWriteRequest.opType(),</span><br><span class="line">                                    <span class="keyword">new</span> BulkItemResponse.Failure(indexName, docWriteRequest.type(), docWriteRequest.id(), e)));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (counter.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">                            finishHim();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishHim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        listener.onResponse(<span class="keyword">new</span> BulkResponse(responses.toArray(<span class="keyword">new</span> BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportReplicationAction</span>&lt;</span></span><br><span class="line"><span class="class">        <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">ReplicationRequest</span>&lt;<span class="title">Request</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">ReplicaRequest</span> <span class="keyword">extends</span> <span class="title">ReplicationRequest</span>&lt;<span class="title">ReplicaRequest</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">Response</span> <span class="keyword">extends</span> <span class="title">ReplicationResponse</span></span></span><br><span class="line"><span class="class">        &gt; <span class="keyword">extends</span> <span class="title">TransportAction</span>&lt;<span class="title">Request</span>, <span class="title">Response</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(Task task, Request request, ActionListener&lt;Response&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ReroutePhase((ReplicationTask) task, request, listener).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReroutePhase</span> <span class="keyword">extends</span> <span class="title">AbstractRunnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ActionListener&lt;Response&gt; listener;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Request request;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ReplicationTask task;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ClusterStateObserver observer;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean finished = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            finishWithUnexpectedFailure(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            setPhase(task, <span class="string">&quot;routing&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> ClusterState state = observer.setAndGetObservedState();</span><br><span class="line">            <span class="keyword">if</span> (handleBlockExceptions(state)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// request does not have a shardId yet, we need to pass the concrete index to resolve shardId</span></span><br><span class="line">            <span class="keyword">final</span> String concreteIndex = concreteIndex(state);</span><br><span class="line">            <span class="keyword">final</span> IndexMetaData indexMetaData = state.metaData().index(concreteIndex);</span><br><span class="line">            <span class="keyword">if</span> (indexMetaData == <span class="keyword">null</span>) &#123;</span><br><span class="line">                retry(<span class="keyword">new</span> IndexNotFoundException(concreteIndex));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (indexMetaData.getState() == IndexMetaData.State.CLOSE) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexClosedException(indexMetaData.getIndex());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// resolve all derived request fields, so we can route and apply it</span></span><br><span class="line">            resolveRequest(indexMetaData, request);</span><br><span class="line">            <span class="keyword">assert</span> request.shardId() != <span class="keyword">null</span> : <span class="string">&quot;request shardId must be set in resolveRequest&quot;</span>;</span><br><span class="line">            <span class="keyword">assert</span> request.waitForActiveShards() != ActiveShardCount.DEFAULT : <span class="string">&quot;request waitForActiveShards must be set in resolveRequest&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据请求分片id获取主分片</span></span><br><span class="line">            <span class="keyword">final</span> ShardRouting primary = primary(state);</span><br><span class="line">            <span class="keyword">if</span> (retryIfUnavailable(state, primary)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取主分片所在的节点</span></span><br><span class="line">            <span class="keyword">final</span> DiscoveryNode node = state.nodes().get(primary.currentNodeId());</span><br><span class="line">            <span class="comment">//5 因为当前执行的是写操作，因此只能在primary上完成，所以需要把请求路由到primary shard所在节点</span></span><br><span class="line">            <span class="keyword">if</span> (primary.currentNodeId().equals(state.nodes().getLocalNodeId())) &#123;</span><br><span class="line">                <span class="comment">//主分片在当前节点</span></span><br><span class="line">                performLocalAction(state, primary, node, indexMetaData);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//在其他节点</span></span><br><span class="line">                performRemoteAction(state, primary, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performLocalAction</span><span class="params">(ClusterState state, ShardRouting primary, DiscoveryNode node, IndexMetaData indexMetaData)</span> </span>&#123;</span><br><span class="line">            setPhase(task, <span class="string">&quot;waiting_on_primary&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;send action [&#123;&#125;] to local primary [&#123;&#125;] for request [&#123;&#125;] with cluster state version [&#123;&#125;] to [&#123;&#125;] &quot;</span>,</span><br><span class="line">                        transportPrimaryAction, request.shardId(), request, state.version(), primary.currentNodeId());</span><br><span class="line">            &#125;</span><br><span class="line">            performAction(node, transportPrimaryAction, <span class="keyword">true</span>,</span><br><span class="line">                    <span class="keyword">new</span> ConcreteShardRequest&lt;&gt;(request, primary.allocationId().getId(), indexMetaData.primaryTerm(primary.id())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAction</span><span class="params">(<span class="keyword">final</span> DiscoveryNode node, <span class="keyword">final</span> String action, <span class="keyword">final</span> <span class="keyword">boolean</span> isPrimaryAction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">final</span> TransportRequest requestToPerform)</span> </span>&#123;</span><br><span class="line">            transportService.sendRequest(node, action, requestToPerform, transportOptions, <span class="keyword">new</span> TransportResponseHandler&lt;Response&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Response <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> newResponseInstance();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">executor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ThreadPool.Names.SAME;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">                    finishOnSuccess(response);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(TransportException exp)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// if we got disconnected from the node, or the node / shard is not in the right state (being closed)</span></span><br><span class="line">                        <span class="keyword">final</span> Throwable cause = exp.unwrapCause();</span><br><span class="line">                        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> ConnectTransportException || cause <span class="keyword">instanceof</span> NodeClosedException ||</span><br><span class="line">                                (isPrimaryAction &amp;&amp; retryPrimaryException(cause))) &#123;</span><br><span class="line">                            logger.trace(</span><br><span class="line">                                    (org.apache.logging.log4j.util.Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(</span><br><span class="line">                                            <span class="string">&quot;received an error from node [&#123;&#125;] for request [&#123;&#125;], scheduling a retry&quot;</span>,</span><br><span class="line">                                            node.getId(),</span><br><span class="line">                                            requestToPerform),</span><br><span class="line">                                    exp);</span><br><span class="line">                            retry(exp);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            finishAsFailed(exp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.addSuppressed(exp);</span><br><span class="line">                        finishWithUnexpectedFailure(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TransportShardBulkAction</p><h2 id="primary-shard"><a href="#primary-shard" class="headerlink" title="primary shard"></a>primary shard</h2><p>Primary请求的入口是PrimaryOperationTransportHandler的MessageReceived, 当接收到请求时，执行的逻辑如下</p><h3 id="1-判断操作类型"><a href="#1-判断操作类型" class="headerlink" title="1. 判断操作类型"></a>1. 判断操作类型</h3><p>遍历bulk请求中的各子请求，根据不同的操作类型跳转到不同的处理逻辑</p><h3 id="2-将update操作转换为Index和Delete操作"><a href="#2-将update操作转换为Index和Delete操作" class="headerlink" title="2. 将update操作转换为Index和Delete操作"></a>2. 将update操作转换为Index和Delete操作</h3><p>获取文档的当前内容，与update内容合并生成新文档，然后将update请求转换成index请求，此处文档设置一个version v1</p><h3 id="3-Parse-Doc"><a href="#3-Parse-Doc" class="headerlink" title="3. Parse Doc"></a>3. Parse Doc</h3><p>解析文档的各字段，并添加如_uid等ES相关的一些系统字段</p><h3 id="4-更新mapping"><a href="#4-更新mapping" class="headerlink" title="4. 更新mapping"></a>4. 更新mapping</h3><p>对于新增字段会根据dynamic mapping或dynamic template生成对应的mapping，如果mapping中有dynamic mapping相关设置则按设置处理，如忽略或抛出异常</p><h3 id="5-获取sequence-Id和Version"><a href="#5-获取sequence-Id和Version" class="headerlink" title="5. 获取sequence Id和Version"></a>5. 获取sequence Id和Version</h3><p>从SequcenceNumberService获取一个sequenceID和Version。SequcenID用于初始化LocalCheckPoint， verion是根据当前Versoin+1用于防止并发写导致数据不一致。</p><h3 id="6-写入lucene"><a href="#6-写入lucene" class="headerlink" title="6. 写入lucene"></a>6. 写入lucene</h3><p>这一步开始会对文档uid加锁，然后判断uid对应的version v2和之前update转换时的versoin v1是否一致，不一致则返回第二步重新执行。 如果version一致，如果同id的doc已经存在，则调用lucene的updateDocument接口，如果是新文档则调用lucene的addDoucument. 这里有个问题，如何保证Delete-Then-Add的原子性，ES是通过在Delete之前会加上已refresh锁，禁止被refresh，只有等待Add完成后释放了Refresh Lock, 这样就保证了这个操作的原子性。</p><h3 id="7-写入translog"><a href="#7-写入translog" class="headerlink" title="7. 写入translog"></a>7. 写入translog</h3><p>写入Lucene的Segment后，会以key value的形式写Translog， Key是Id, Value是Doc的内容。当查询的时候，如果请求的是GetDocById则可以直接根据_id从translog中获取。满足nosql场景的实时性。</p><h3 id="8-重构bulk-request"><a href="#8-重构bulk-request" class="headerlink" title="8. 重构bulk request"></a>8. 重构bulk request</h3><p>因为primary shard已经将update操作转换为index操作或delete操作，因此要对之前的bulkrequest进行调整，只包含index或delete操作，不需要再进行update的处理操作。</p><h3 id="9-flush-translog"><a href="#9-flush-translog" class="headerlink" title="9. flush translog"></a>9. flush translog</h3><p>默认情况下，translog要在此处落盘完成，如果对可靠性要求不高，可以设置translog异步，那么translog的fsync将会异步执行，但是落盘前的数据有丢失风险。</p><h3 id="10-发送请求给replicas"><a href="#10-发送请求给replicas" class="headerlink" title="10. 发送请求给replicas"></a>10. 发送请求给replicas</h3><p>将构造好的bulkrequest并发发送给各replicas，等待replica返回，这里需要等待所有的replicas返回，响应请求给协调节点。如果某个shard执行失败，则primary会给master发请求remove该shard。这里会同时把sequenceID， primaryTerm, GlobalCheckPoint等传递给replica。</p><h3 id="11-等待replica响应"><a href="#11-等待replica响应" class="headerlink" title="11. 等待replica响应"></a>11. 等待replica响应</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportReplicationAction</span>&lt;</span></span><br><span class="line"><span class="class">        <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">ReplicationRequest</span>&lt;<span class="title">Request</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">ReplicaRequest</span> <span class="keyword">extends</span> <span class="title">ReplicationRequest</span>&lt;<span class="title">ReplicaRequest</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">Response</span> <span class="keyword">extends</span> <span class="title">ReplicationResponse</span></span></span><br><span class="line"><span class="class">        &gt; <span class="keyword">extends</span> <span class="title">TransportAction</span>&lt;<span class="title">Request</span>, <span class="title">Response</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryOperationTransportHandler</span> <span class="keyword">implements</span> <span class="title">TransportRequestHandler</span>&lt;<span class="title">ConcreteShardRequest</span>&lt;<span class="title">Request</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(ConcreteShardRequest&lt;Request&gt; request, TransportChannel channel, Task task)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> AsyncPrimaryAction(request.request, request.targetAllocationID, request.primaryTerm, channel, (ReplicationTask) task).run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AsyncPrimaryAction</span> <span class="keyword">extends</span> <span class="title">AbstractRunnable</span> <span class="keyword">implements</span> <span class="title">ActionListener</span>&lt;<span class="title">PrimaryShardReference</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            acquirePrimaryShardReference(request.shardId(), targetAllocationID, primaryTerm, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当所有的replica返回请求时，更细primary shard的LocalCheckPoint。</p><p>Defaults.FIELD_TYPE<br>FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);<br>FIELD_TYPE.setTokenized(false);<br>FIELD_TYPE.setStored(true);<br>FIELD_TYPE.setOmitNorms(true);<br>FIELD_TYPE.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);<br>FIELD_TYPE.setSearchAnalyzer(Lucene.KEYWORD_ANALYZER);<br>FIELD_TYPE.setName(NAME);<br>FIELD_TYPE.freeze();<br>defaultFieldType.setIndexOptions(IndexOptions.NONE);<br>defaultFieldType.setStored(false);</p><p>org.apache.lucene.index.DefaultIndexingChain#processField</p><p>id</p><pre><code>    context.seqID(seqID);    fields.add(seqID.seqNo);    fields.add(seqID.seqNoDocValue);    fields.add(seqID.primaryTerm);</code></pre><p>source<br>version<br>first json<br>Field field = new Field(fieldType().name(), binaryValue, fieldType());<br>fields.add(new SortedSetDocValuesField(fieldType().name(), binaryValue));</p><p>return new KeywordFieldMapper(<br>name, fieldType, defaultFieldType, ignoreAbove, includeInAll,<br>context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);</p><pre><code>        return new TextFieldMapper(                name, fieldType, defaultFieldType, positionIncrementGap, includeInAll,                context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);</code></pre><p>return new IndexingStrategy(true, false, true, seqNoForIndexing, 1, null);<br>return new IndexResult(plan.versionForIndexing, plan.seqNoForIndexing, plan.currentNotFoundOrDeleted);</p><p>out.writeVInt(SERIALIZATION_FORMAT);<br>out.writeString(id);<br>out.writeString(type);<br>out.writeBytesReference(source);<br>out.writeOptionalString(routing);<br>out.writeOptionalString(parent);<br>out.writeLong(version);</p><pre><code>        out.writeByte(versionType.getValue());        out.writeLong(autoGeneratedIdTimestamp);        out.writeLong(seqNo);        out.writeLong(primaryTerm);</code></pre><p>BulkItemResponse primaryResponse = new BulkItemResponse(replicaRequest.id(), opType, response);<br>// set a blank ShardInfo so we can safely send it to the replicas. We won’t use it in the real response though.<br>primaryResponse.getResponse().setShardInfo(new ShardInfo());<br>return primaryResponse;</p><p>return new WritePrimaryResult&lt;&gt;(request, response, location, null, primary, logger);</p><p>1<br>createIndexService.createIndex(updateRequest, ActionListener.wrap(response -&gt;<br>listener.onResponse(new CreateIndexResponse(response.isAcknowledged(), response.isShardsAcked(), indexName)),<br>listener::onFailure));</p><p>2<br>ActionListener.wrap(response -&gt; {<br>if (response.isAcknowledged()) {<br>activeShardsObserver.waitForActiveShards(new String[]{request.index()}, request.waitForActiveShards(), request.ackTimeout(),<br>shardsAcked -&gt; {<br>if (shardsAcked == false) {<br>logger.debug(“[{}] index created, but the operation timed out while waiting for “ +<br>“enough shards to be started.”, request.index());<br>}<br>listener.onResponse(new CreateIndexClusterStateUpdateResponse(response.isAcknowledged(), shardsAcked));<br>}, listener::onFailure);<br>} else {<br>listener.onResponse(new CreateIndexClusterStateUpdateResponse(false, false));<br>}<br>}, listener::onFailure)</p><p>SafeAckedClusterStateTaskListener 任务</p><p>AckCountDownListener</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://elasticsearch.cn/article/13533&quot;&gt;https://elasticsearch.cn/article/13533&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;写入入口-RestIndexAction&quot;&gt;&lt;a href=&quot;#写</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="elasticsearch" scheme="https://xxnjdg.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>调试elasticsearch源码笔记</title>
    <link href="https://xxnjdg.github.io/2021/03/23/elasticsearch-1/"/>
    <id>https://xxnjdg.github.io/2021/03/23/elasticsearch-1/</id>
    <published>2021-03-22T18:21:43.000Z</published>
    <updated>2021-06-25T10:42:19.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>window10</p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>7.11.2</p><h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p><a href="https://github.com/elastic/elasticsearch.git">https://github.com/elastic/elasticsearch.git</a></p><p><a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a>:elastic/elasticsearch.git</p><h1 id="二进制包下载"><a href="#二进制包下载" class="headerlink" title="二进制包下载"></a>二进制包下载</h1><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h1 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h1><p>不同版本的es要求对应的jdk版本不一样，当前版本至少要jdk15，可参考以下编译文档</p><p><a href="https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md">https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md</a></p><h1 id="gradle-配置"><a href="#gradle-配置" class="headerlink" title="gradle 配置"></a>gradle 配置</h1><p>可以参考网上教程，我偷懒不想配置了，打开源码让他自行下载gradle，包下载嫌慢下载路径可以改到阿里云，都不配的情况下，可能要等1，2小时</p><h1 id="build"><a href="#build" class="headerlink" title="build"></a>build</h1><p>打开idea，要求2020.1版本，版本要求同样参考上面的编译文档，我是使用 project from version control,能直接识别是gradle项目</p><p>如果是直接git clone,再用idea打开,选择 build.gradle 也能识别是gradle项目，接着等待idea帮我们build</p><h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><p>入口函数如下，直接运行</p><p>org.elasticsearch.bootstrap.Elasticsearch#main(java.lang.String[])</p><p>会直接提示你有错误</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk-15.0.2\bin\java.exe&quot; ...</span><br><span class="line">ERROR: the system property [es.path.conf] must be set</span><br><span class="line"></span><br><span class="line">Process finished with exit code 78</span><br></pre></td></tr></table></figure><p>添加</p><p>-Des.networkaddress.cache.ttl=60<br>-Des.networkaddress.cache.negative.ttl=10<br>-Djava.awt.headless=true<br>-Dfile.encoding=UTF-8<br>-Djna.nosys=true<br>-Dio.netty.noUnsafe=true<br>-Dio.netty.noKeySetOptimization=true<br>-Dio.netty.recycler.maxCapacityPerThread=0<br>-Dio.netty.allocator.numDirectArenas=0<br>-Dlog4j.shutdownHookEnabled=false<br>-Dlog4j2.disable.jmx=true<br>-Djava.locale.providers=SPI,COMPAT<br>–add-opens=java.base/java.io=ALL-UNNAMED<br>-Delasticsearch<br>-Des.distribution.flavor=default<br>-Des.distribution.type=zip<br>-Des.bundled_jdk=true<br>-Des.path.home=D:\a\elasticsearch-7.12.0<br>-Des.path.conf=D:\a\elasticsearch-7.12.0\config<br>-Djava.io.tmpdir=D:\a\tmp<br>-Xms512m<br>-Xms512m<br>-cp D:\a\elasticsearch-7.12.0\lib*</p><p>“cluster.name” -&gt; “elasticsearch”<br>“node.name” -&gt; null<br>“path.home” -&gt; “D:\a\elasticsearch-7.11.2\elasticsearch-7.11.2”<br>“path.logs” -&gt; “D:\a\elasticsearch-7.11.2\elasticsearch-7.11.2\logs”</p><p><a href="https://blog.csdn.net/weixin_36146690/article/details/114086786">https://blog.csdn.net/weixin_36146690/article/details/114086786</a></p><p><a href="https://www.colabug.com/2021/0307/8044055/">https://www.colabug.com/2021/0307/8044055/</a></p><p>interface org.elasticsearch.painless.spi.PainlessExtension</p><p>“x-pack-autoscaling” -&gt; {ArrayList@4353}  size = 1<br>“lang-painless” -&gt; {ArrayList@4050}  size = 10<br>“x-pack-ql” -&gt; {ArrayList@4377}  size = 2<br>“x-pack-core” -&gt; {ArrayList@4390}  size = 37</p><p>org.elasticsearch.search.aggregations.matrix.MatrixAggregationPlugin<br>org.elasticsearch.analysis.common.CommonAnalysisPlugin<br>org.elasticsearch.xpack.constantkeyword.ConstantKeywordMapperPlugin 1<br>org.elasticsearch.xpack.flattened.FlattenedMapperPlugin<br>org.elasticsearch.xpack.frozen.FrozenIndices<br>org.elasticsearch.ingest.common.IngestCommonPlugin<br>org.elasticsearch.ingest.geoip.IngestGeoIpPlugin<br>org.elasticsearch.ingest.useragent.IngestUserAgentPlugin<br>org.elasticsearch.kibana.KibanaPlugin<br>org.elasticsearch.script.expression.ExpressionPlugin<br>org.elasticsearch.script.mustache.MustachePlugin<br>org.elasticsearch.painless.PainlessPlugin 1<br>org.elasticsearch.index.mapper.MapperExtrasPlugin<br>org.elasticsearch.xpack.versionfield.VersionFieldPlugin<br>org.elasticsearch.join.ParentJoinPlugin<br>org.elasticsearch.percolator.PercolatorPlugin<br>org.elasticsearch.index.rankeval.RankEvalPlugin<br>org.elasticsearch.index.reindex.ReindexPlugin<br>org.elasticsearch.xpack.repositories.metering.RepositoriesMeteringPlugin<br>org.elasticsearch.repositories.encrypted.EncryptedRepositoryPlugin 1<br>org.elasticsearch.plugin.repository.url.URLRepositoryPlugin<br>org.elasticsearch.xpack.searchablesnapshots.SearchableSnapshots 1<br>org.elasticsearch.xpack.searchbusinessrules.SearchBusinessRules<br>org.elasticsearch.repositories.blobstore.testkit.SnapshotRepositoryTestKit<br>org.elasticsearch.xpack.spatial.SpatialPlugin<br>org.elasticsearch.xpack.transform.Transform 1<br>org.elasticsearch.transport.Netty4Plugin<br>org.elasticsearch.xpack.unsignedlong.UnsignedLongMapperPlugin<br>org.elasticsearch.xpack.vectors.Vectors<br>org.elasticsearch.xpack.wildcard.Wildcard<br>org.elasticsearch.xpack.aggregatemetric.AggregateMetricMapperPlugin 1<br>org.elasticsearch.xpack.analytics.AnalyticsPlugin 1<br>org.elasticsearch.xpack.async.AsyncResultsIndexPlugin 1<br>org.elasticsearch.xpack.search.AsyncSearch<br>org.elasticsearch.xpack.autoscaling.Autoscaling 1<br>org.elasticsearch.xpack.ccr.Ccr  1<br>org.elasticsearch.xpack.core.XPackPlugin 1<br>org.elasticsearch.xpack.datastreams.DataStreamsPlugin 1<br>org.elasticsearch.xpack.deprecation.Deprecation<br>org.elasticsearch.xpack.enrich.EnrichPlugin 1<br>org.elasticsearch.xpack.eql.plugin.EqlPlugin<br>org.elasticsearch.xpack.fleet.Fleet<br>org.elasticsearch.xpack.graph.Graph 1<br>org.elasticsearch.xpack.idp.IdentityProviderPlugin<br>org.elasticsearch.xpack.ilm.IndexLifecycle 1<br>org.elasticsearch.xpack.ingest.IngestPlugin<br>org.elasticsearch.xpack.logstash.Logstash<br>org.elasticsearch.xpack.ml.MachineLearning 1<br>org.elasticsearch.xpack.monitoring.Monitoring 1<br>org.elasticsearch.xpack.ql.plugin.QlPlugin<br>org.elasticsearch.xpack.rollup.Rollup 1<br>org.elasticsearch.xpack.runtimefields.RuntimeFields 1<br>org.elasticsearch.xpack.security.Security 1<br>org.elasticsearch.xpack.sql.plugin.SqlPlugin<br>org.elasticsearch.xpack.stack.StackPlugin<br>org.elasticsearch.xpack.textstructure.TextStructurePlugin<br>org.elasticsearch.cluster.coordination.VotingOnlyNodePlugin 1<br>org.elasticsearch.xpack.watcher.Watcher 1</p><p>“client.type” -&gt; “node”<br>“cluster.name” -&gt; “elasticsearch”<br>“node.name” -&gt; null<br>“path.home” -&gt; “D:\a\elasticsearch-7.12.0”<br>“path.logs” -&gt; “D:\a\elasticsearch-7.12.0\logs”</p><p>org.elasticsearch.xpack.core.XPackPlugin</p><p>调度任务</p><p>lowFuture = threadPool.scheduleWithFixedDelay(lowMonitor, lowMonitor.interval, Names.SAME);<br>mediumFuture = threadPool.scheduleWithFixedDelay(mediumMonitor, mediumMonitor.interval, Names.SAME);<br>highFuture = threadPool.scheduleWithFixedDelay(highMonitor, highMonitor.interval, Names.SAME);</p><p>线程<br>this.cachedTimeThread = new CachedTimeThread(EsExecutors.threadName(settings, “[timer]”), estimatedTimeInterval.millis());<br>this.cachedTimeThread.start();</p><p>-Xms256m<br>-Xmx256m<br>-Djava.awt.headless=true<br>-Dfile.encoding=UTF-8<br>-Djna.nosys=true<br>-Dio.netty.noUnsafe=true<br>-Dio.netty.noKeySetOptimization=true<br>-Dio.netty.recycler.maxCapacityPerThread=0<br>-Dlog4j.shutdownHookEnabled=false<br>-Dlog4j2.disable.jmx=true<br>-Delasticsearch<br>-Des.path.home=D:\a\612\elasticsearch-6.1.2\elasticsearch-6.1.2<br>-Des.path.conf=D:\a\612\elasticsearch-6.1.2\elasticsearch-6.1.2\config<br>-cp D:\a\612\elasticsearch-6.1.2\elasticsearch-6.1.2\lib*</p><p>request header 长度 int<br>request header 内容<br>response header 长度 int<br>response header 内容<br>action 长度 int<br>action 内容<br>一个字符站一个字节<br>nodeId 长度 </p><p>output.writeByte((byte)’E’);<br>output.writeByte((byte)’S’);<br>// write the size, the size indicates the remaining message size, not including the size int<br>output.writeInt(messageSize + REQUEST_ID_SIZE + STATUS_SIZE + VERSION_ID_SIZE);<br>output.writeLong(requestId);<br>output.writeByte(status);<br>output.writeInt(version.id);</p><p>transportService.registerRequestHandler(ACTION_NAME, UnicastPingRequest::new, ThreadPool.Names.SAME,<br>new UnicastPingRequestHandler());</p><p>transportService.sendRequest(node, SEND_ACTION_NAME,<br>new BytesTransportRequest(bytes, node.getVersion()),<br>options,<br>new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {</p><pre><code>                    @Override                    public void handleResponse(TransportResponse.Empty response) &#123;                        if (sendingController.getPublishingTimedOut()) &#123;                            logger.debug(&quot;node &#123;&#125; responded for cluster state [&#123;&#125;] (took longer than [&#123;&#125;])&quot;, node,                                clusterState.version(), publishTimeout);                        &#125;                        sendingController.onNodeSendAck(node);                    &#125;                    @Override                    public void handleException(TransportException exp) &#123;                        if (sendDiffs &amp;&amp; exp.unwrapCause() instanceof IncompatibleClusterStateVersionException) &#123;                            logger.debug(&quot;resending full cluster state to node &#123;&#125; reason &#123;&#125;&quot;, node, exp.getDetailedMessage());                            sendFullClusterState(clusterState, serializedStates, node, publishTimeout, sendingController);                        &#125; else &#123;                            logger.debug((org.apache.logging.log4j.util.Supplier&lt;?&gt;) () -&gt;                                new ParameterizedMessage(&quot;failed to send cluster state to &#123;&#125;&quot;, node), exp);                            sendingController.onNodeSendFailed(node, exp);                        &#125;                    &#125;                &#125;);</code></pre><p>transportService.registerRequestHandler(SEND_ACTION_NAME, BytesTransportRequest::new, ThreadPool.Names.SAME, false, false,<br>new SendClusterStateRequestHandler());</p><p>tasks.put(BECOME_MASTER_TASK, (source1, e) -&gt; {}); // noop listener, the election finished listener determines result<br>tasks.put(FINISH_ELECTION_TASK, electionFinishedListener);</p><p>STATE_NOT_RECOVERED_BLOCK</p><p>customSupplier.put(SnapshotDeletionsInProgress.TYPE, SnapshotDeletionsInProgress::new);<br>customSupplier.put(RestoreInProgress.TYPE, RestoreInProgress::new);<br>customSupplier.put(SnapshotsInProgress.TYPE, SnapshotsInProgress::new);</p><p>IndexGraveyard.TYPE, new IndexGraveyard(tombstones)</p><p>httpRequest = new Netty4HttpRequest(serverTransport.xContentRegistry, copy, ctx.channel());</p><p>final Netty4HttpChannel channel =<br>new Netty4HttpChannel(serverTransport, httpRequest, pipelinedRequest, detailedErrorsEnabled, threadContext);</p><p>return channel -&gt;<br>client.index(indexRequest, new RestStatusToXContentListener&lt;&gt;(channel, r -&gt; r.getLocation(indexRequest.routing())));</p><p>execute(IndexAction.INSTANCE, request, listener);</p><p>ActionHandler</p><p>actions.register(IndexAction.INSTANCE, TransportIndexAction.class);</p><p>execute(task, request, new ActionListener<Response>() {<br>@Override<br>public void onResponse(Response response) {<br>taskManager.unregister(task);<br>listener.onResponse(response);<br>}</Response></p><pre><code>            @Override            public void onFailure(Exception e) &#123;                taskManager.unregister(task);                listener.onFailure(e);            &#125;        &#125;);</code></pre><p>doExecute</p><p>protected abstract void doExecute(Request request, ActionListener<Response> listener);</Response></p><p>this.action.doExecute(task, request, listener);</p><p>return channel -&gt;<br>client.index(indexRequest, new RestStatusToXContentListener&lt;&gt;(channel, r -&gt; r.getLocation(indexRequest.routing())));<br>IndexRequest<br>TransportIndexAction</p><p>execute(task, request, new ActionListener<Response>() {<br>@Override<br>public void onResponse(Response response) {<br>taskManager.unregister(task);<br>listener.onResponse(response);<br>}</Response></p><pre><code>            @Override            public void onFailure(Exception e) &#123;                taskManager.unregister(task);                listener.onFailure(e);            &#125;        &#125;);</code></pre><p>bulkAction.execute(task, toSingleItemBulkRequest(request), wrapBulkResponse(listener));</p><p>this.action.doExecute(task, request, listener);</p><p>createIndex(index, bulkRequest.timeout(), new ActionListener<CreateIndexResponse>() {<br>@Override<br>public void onResponse(CreateIndexResponse result) {<br>if (counter.decrementAndGet() == 0) {<br>executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);<br>}<br>}</CreateIndexResponse></p><pre><code>                    @Override                    public void onFailure(Exception e) &#123;                        if (!(ExceptionsHelper.unwrapCause(e) instanceof ResourceAlreadyExistsException)) &#123;                            // fail all requests involving this index, if create didn&#39;t work                            for (int i = 0; i &lt; bulkRequest.requests.size(); i++) &#123;                                DocWriteRequest request = bulkRequest.requests.get(i);                                if (request != null &amp;&amp; setResponseFailureIfIndexMatches(responses, i, request, index, e)) &#123;                                    bulkRequest.requests.set(i, null);                                &#125;                            &#125;                        &#125;                        if (counter.decrementAndGet() == 0) &#123;                            executeBulk(task, bulkRequest, startTime, ActionListener.wrap(listener::onResponse, inner -&gt; &#123;                                inner.addSuppressed(e);                                listener.onFailure(inner);                            &#125;), responses, indicesThatCannotBeCreated);                        &#125;                    &#125;                &#125;);</code></pre><p>CreateIndexRequest createIndexRequest = new CreateIndexRequest();<br>createIndexRequest.index(index);<br>createIndexRequest.cause(“auto(bulk api)”);<br>createIndexRequest.masterNodeTimeout(timeout);<br>createIndexAction.execute(createIndexRequest, listener);</p><p>execute(task, request, new ActionListener<Response>() {<br>@Override<br>public void onResponse(Response response) {<br>taskManager.unregister(task);<br>listener.onResponse(response);<br>}</Response></p><pre><code>            @Override            public void onFailure(Exception e) &#123;                taskManager.unregister(task);                listener.onFailure(e);            &#125;        &#125;);</code></pre><p>TransportCreateIndexAction<br>doExecute</p><p>ActionListener<Response> delegate = new ActionListener<Response>() {<br>@Override<br>public void onResponse(Response response) {<br>listener.onResponse(response);<br>}</Response></Response></p><pre><code>                    @Override                    public void onFailure(Exception t) &#123;                        if (t instanceof Discovery.FailedToCommitClusterStateException                                || (t instanceof NotMasterException)) &#123;                            logger.debug((org.apache.logging.log4j.util.Supplier&lt;?&gt;) () -&gt; new ParameterizedMessage(&quot;master could not publish cluster state or stepped down before publishing action [&#123;&#125;], scheduling a retry&quot;, actionName), t);                            retry(t, masterChangePredicate);                        &#125; else &#123;                            listener.onFailure(t);                        &#125;                    &#125;                &#125;;</code></pre><p>masterOperation(task, request, clusterState, delegate);<br>AckedClusterStateTaskListener<br>new IndexCreationTask(logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, settings,<br>this::validate)</p><p>finalListeners.add(onStoreClose);<br>finalListeners.add(oldShardsStats);</p><p>PreConfiguredCharFilter</p><p>PreConfiguredTokenFilter</p><p>PreConfiguredTokenizer</p><p>PreBuiltAnalyzers<br>analyzerProviderFactories.put(name, new PreBuiltAnalyzerProviderFactory(name, AnalyzerScope.INDICES, preBuiltAnalyzerEnum.getAnalyzer(Version.CURRENT)));<br>final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);<br>PreBuiltAnalyzerProvider<br>analyzers.register(“default”, StandardAnalyzerProvider::new);<br>analyzers.register(“standard”, StandardAnalyzerProvider::new);<br>analyzers.register(“standard_html_strip”, StandardHtmlStripAnalyzerProvider::new);<br>analyzers.register(“simple”, SimpleAnalyzerProvider::new);<br>analyzers.register(“stop”, StopAnalyzerProvider::new);<br>analyzers.register(“whitespace”, WhitespaceAnalyzerProvider::new);<br>analyzers.register(“keyword”, KeywordAnalyzerProvider::new);<br>analyzers.register(“pattern”, PatternAnalyzerProvider::new);<br>analyzers.register(“snowball”, SnowballAnalyzerProvider::new);<br>analyzers.register(“arabic”, ArabicAnalyzerProvider::new);<br>analyzers.register(“armenian”, ArmenianAnalyzerProvider::new);<br>analyzers.register(“basque”, BasqueAnalyzerProvider::new);<br>analyzers.register(“bengali”, BengaliAnalyzerProvider::new);<br>analyzers.register(“brazilian”, BrazilianAnalyzerProvider::new);<br>analyzers.register(“bulgarian”, BulgarianAnalyzerProvider::new);<br>analyzers.register(“catalan”, CatalanAnalyzerProvider::new);<br>analyzers.register(“chinese”, ChineseAnalyzerProvider::new);<br>analyzers.register(“cjk”, CjkAnalyzerProvider::new);<br>analyzers.register(“czech”, CzechAnalyzerProvider::new);<br>analyzers.register(“danish”, DanishAnalyzerProvider::new);<br>analyzers.register(“dutch”, DutchAnalyzerProvider::new);<br>analyzers.register(“english”, EnglishAnalyzerProvider::new);<br>analyzers.register(“finnish”, FinnishAnalyzerProvider::new);<br>analyzers.register(“french”, FrenchAnalyzerProvider::new);<br>analyzers.register(“galician”, GalicianAnalyzerProvider::new);<br>analyzers.register(“german”, GermanAnalyzerProvider::new);<br>analyzers.register(“greek”, GreekAnalyzerProvider::new);<br>analyzers.register(“hindi”, HindiAnalyzerProvider::new);<br>analyzers.register(“hungarian”, HungarianAnalyzerProvider::new);<br>analyzers.register(“indonesian”, IndonesianAnalyzerProvider::new);<br>analyzers.register(“irish”, IrishAnalyzerProvider::new);<br>analyzers.register(“italian”, ItalianAnalyzerProvider::new);<br>analyzers.register(“latvian”, LatvianAnalyzerProvider::new);<br>analyzers.register(“lithuanian”, LithuanianAnalyzerProvider::new);<br>analyzers.register(“norwegian”, NorwegianAnalyzerProvider::new);<br>analyzers.register(“persian”, PersianAnalyzerProvider::new);<br>analyzers.register(“portuguese”, PortugueseAnalyzerProvider::new);<br>analyzers.register(“romanian”, RomanianAnalyzerProvider::new);<br>analyzers.register(“russian”, RussianAnalyzerProvider::new);<br>analyzers.register(“sorani”, SoraniAnalyzerProvider::new);<br>analyzers.register(“spanish”, SpanishAnalyzerProvider::new);<br>analyzers.register(“swedish”, SwedishAnalyzerProvider::new);<br>analyzers.register(“turkish”, TurkishAnalyzerProvider::new);<br>analyzers.register(“thai”, ThaiAnalyzerProvider::new);<br>analyzers.register(“fingerprint”, FingerprintAnalyzerProvider::new);<br>analyzers.extractAndRegister(plugins, AnalysisPlugin::getAnalyzers);</p><p>canAllocate</p><p>addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings));<br>addAllocationDecider(deciders, new ResizeAllocationDecider(settings));<br>addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings));<br>addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings));<br>addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings)); 3<br>addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings));<br>addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings));<br>addAllocationDecider(deciders, new RestoreInProgressAllocationDecider(settings));<br>addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new SameShardAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings));<br>addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings));</p><p>private final IndexMetaDataUpdater indexMetaDataUpdater = new IndexMetaDataUpdater();<br>private final RoutingNodesChangedObserver nodesChangedObserver = new RoutingNodesChangedObserver();<br>private final RestoreInProgressUpdater restoreInProgressUpdater = new RestoreInProgressUpdater();</p><p>cachedDecisions.put(AllocationStatus.DECIDERS_NO,<br>new AllocateUnassignedDecision(AllocationStatus.DECIDERS_NO, null, null, null, false, 0L, 0L));</p><p>TransportShardBulkAction</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>文档元素据</p><p>元数据，用于标注文档的相关信息<br>_index一文档所属的索引名<br>_type一文档所属的类型名<br>_id一文档唯一Id<br>_source:文档的原始Json数据<br>_all:整合所有字段内容到该字段，已被废除<br>_version:文档的版本信息<br>_score:相关性打分</p><p>索引</p><p>Index一索引是文档的容器，是一类文档的结合<br>      Index体现了逻辑空间的概念:每个索引都有<br>      自己的Mapping定义，用于定义包含的文档<br>      的字段名和字段类型<br>      Shard体现了物理空间的概念:索引中的数据<br>      分散在Shard上<br>索引的Mapping与Settings<br>Mapping定义文档字段的类型<br>Setting定义不同的数据分布</p><p>Master-eligible nodes和Master Node</p><p>每个节点启动后，默认就是一个Master eligible节点<br>      可以设置node.master: false禁止<br>Master-eligible节点可以参加选主流程，成为Master节点<br>当第一个节点启动时候，它会将自己选举成Master节点<br>每个节点上都保存了集群的状态，只有Master节点才能修改集群的状态信息<br>    集群状态(Cluster State)，维护了一个集群中，必要的信息<br>          所有的节点信息<br>          所有的索引和其相关的Mapping与Setti ng信息<br>            分片的路由信息<br>      任意节点都能修改信息会导致数据的不一致性</p><p>Data Node&amp;Coordinating Node<br>Data Node<br>    可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用<br>Coordinating Node<br>负责接受Client的请求，将请求分发到合适的节点，最终把结果汇集到一起<br>每个节点默认都起到了Coordinating Node的职责</p><p>.Hot&amp;Warm Node<br>不同硬件配置的Data Node，用来实现Hot&amp;Warm架构，降低集群部署的成本<br>.Machine Learning Node<br>负责跑机器学习的Job，用来做异常检测<br>Tribe Node<br>(5.3开始使用Cross Cluster Serarch)tribe Node连接到不同的elasticsearch集群<br>并且支持将这些集群当成一个单独的集群处理</p><p>配置节点类型<br>开发环境中一个节点可以承担多种角色<br>生产环境中，应该设置单一的角色的节点(dedicated node)</p><p>分片(Primary Shard&amp;Replica Shard)</p><p>主分片，用以解决数据水平扩展的问题。通过主分片，可以将数据分布到集群内的所有节点之上<br>一个分片是一个运行的Lucene的实例<br>主分片数在索引创建时指定，后续不允许修改，除非Reindex<br>副本，用以解决数据高可用的问题。分片是主分片的拷贝<br>副本分片数，可以动态题调整<br>增加副本数，还可以在一定程度上提高服务的可用性(读取的吞吐)</p><p>对于生产环境中分片的设定，需要提前做好容量规划<br>分片数设置过小<br>导致后续无法增加节点实现水品扩展<br>单个分片的数据量太大，导致数据重新分配耗时<br>分片数设置过大，7.0开始，默认主分片设置成1，解决了over-sha rd i ng的问题<br>影响搜索结果的相关’}生打分，影响统计结果的准确’}生<br>单个节点上过多的分片，会导致资源浪费，同时也会影响’}生能</p><p>Green一主分片与副本都正常分配<br>yellow一主分片全部正常分配，有副本分片未能正常分配<br>Red一有主分片未能分配<br>    例如，当服务器的磁盘容量超过85%时<br>    去创建了一个新的索引</p><p>type名，约定都用_doc<br>Create一如果ID已经存在，会失败<br>Index一如果ID不存在，创建新的文档。否则，先删除现有的文档再创建新的文档，版本会增加<br>Update一文档必须已经存在，更新只会对相应字段做增量修改</p><p>具体操作看 3.3-文档的基本CRUD与批量操作</p><p>Bulk API</p><p>支持在一次API调用中，对不同的索引进行操作<br>支持四种类型操作<br>Index<br>Create<br>Update<br>Delete<br>可以再URI中指定Index，也可以在请求的Payload中进行<br>操作中单条操作失败，并不会影响其他操作<br>返回结果包括了每一条操作执行的结果</p><p>具体操作看 3.3-文档的基本CRUD与批量操作</p><p>批量读取文档一mget<br>批量操作，可以减少网络连接所产生的开销，提高性能</p><p>具体操作看 3.3-文档的基本CRUD与批量操作</p><p>批量查询一msearch</p><p>具体操作看 3.3-文档的基本CRUD与批量操作</p><p>倒排索引的核心组成</p><p>倒排索引包含两个部分<br>单词词典(term Dictionary)，记录所有文档的单词，记录单词到倒排列表的关联关系<br>单词词典一般比较大，可以通过B+树或哈希拉链法实现，以满足高性能的插入与查询<br>倒排列表(Posting List)一记录了单词对应的文档结合，由倒排索引项组成<br>倒排索引项(Posting)<br>.文档ID<br>.词频TF一该单词在文档中出现的次数，用于相关性评分<br>·位置(Position)一单词在文档中分词的位置。用于语句搜索(phrase query)<br>.偏移(Offset)一记录单词的开始结束位置，实现高亮显示</p><p>Elasticsearch的JSON文档中的每个字段，都有自己的倒排索引<br>可以指定对某些字段不做索引<br>优点:节省存储空间<br>缺点:字段无法被搜索</p><p>Analysis与Analyzer</p><p>Analysis一文本分析是把全文本转换一系列单词(term / token)的过程，也叫分词<br>Analysis是通过Analyzer来实现的<br>可使用Elasticsearch内置的分析器/或者按需定制化分析器<br>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</p><p>分词器是专门处理分词的组件，Analyzer由三部分组成<br>    Character Filters(针对原始文本处理，例如去除html)/tokenizer(按照规则切分为单词)/token Filter(将切分的的单词进行加工，小写，删除stopwords增加同义词)</p><p>具体例子 3.5-通过分析器进行分词</p><p>什么是Mapping</p><p>Mapping类似数据库中的schema的定义，作用如下<br>      定义索引中的字段的名称<br>      定义字段的数据类型，例如字符串，数字，布尔……<br>    字段，倒排索引的相关配置，(Analyzed or Not Analyzed, Analyzer)<br>Mapping会把JSON文档映射成Lucene所需要的扁平格式<br>一个Mapping属于一个索引的type<br>      每个文档都属于一个type<br>    一个type有一个Mapping定义<br>    7.0开始，不需要在Mapping定义中指定type信息</p><p>字段的数据类型</p><p>简单类型<br>Text/Keyword<br>Date<br>Integer/Floating<br>Boolean<br>IPv4&amp;IPv6<br>复杂类型一对象和嵌套对象<br>对象类型/嵌套类型<br>特殊类型<br>geo_point&amp;geo_ shape/percolator</p><p>什么是Dynamic Mapping</p><p>在写入文档时候，如果索引不存在会自动创建索引<br>Dynamic Mapping的机制，使得我们无需手动定义MappingsoElasticsearch会自动根据文档信息，推算出字段的类型<br>但是有时候会推算的不对，例如地理位置信息<br>当类型如果设置不对时，会导致一些功能无法正常运行，例如Range查询</p><p>类型的自动识别</p><table>    <tr>        <td>JSON类型</td>         <td>Elasticsearch类型</td>    </tr>    <tr>        <td>字符串</td>         <td>匹配日期格式，设置成Date配置数字设置为float或者Long，该选项默认关闭设置为text，并且增加keyword子字段</td>    </tr>    <tr>        <td>布尔值</td>         <td>Boolean</td>    </tr>       <tr>        <td>浮点数</td>         <td>float</td>    </tr>    <tr>        <td>整数</td>         <td>Long</td>    </tr>    <tr>        <td>对象</td>         <td>Object</td>    </tr>        <tr>        <td>数组</td>         <td>由第一个非空数值的类型所决定</td>    </tr>       <tr>        <td>空值</td>         <td>忽略</td>    </tr>    </table><p>Term 是表达语意的最⼩小单位。搜索和利利⽤用统计语⾔言模型进⾏行行⾃自然语⾔言处理理都需要处理理 Term  </p><p>在 ES 中， Term 查询，对输⼊不做分词。会将输⼊作为一个整体，在倒排索引中查找准确的词项， 并且使⽤用相关度算分公式为每个包含该词项的⽂文档进⾏行行相关度算分 – 例例如“Apple Store”<br>可以通过 Constant Score 将查询转换成⼀一个 Filtering，避免算分，并利利⽤用缓存，提⾼高性能  </p><p>索引和搜索时都会进行分词，查询字符串先传递到⼀个合适的分词器，然后生成一个供查询的词项列表<br>● 查询时候，先会对输入的查询进⾏分词，然后每个词项逐个进行底层的查询，最终将结果进行合<br>并。并为每个⽂档⽣生成⼀个算分。 -例例如查 “Matrix reloaded”，会查到包括 Matrix 或者 reload<br>的所有结果。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;window10&lt;/p&gt;
&lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="elasticsearch" scheme="https://xxnjdg.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>极客时间-Redis核心技术与实战笔记</title>
    <link href="https://xxnjdg.github.io/2021/03/13/redis-1/"/>
    <id>https://xxnjdg.github.io/2021/03/13/redis-1/</id>
    <published>2021-03-13T06:42:38.000Z</published>
    <updated>2021-03-16T04:54:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>服务器初始化主流程（见图9-2） 可以简要分为7个步骤： ①初始化配置， 包括用户可配置的参数， 以及命令表的初始化； ②加载并解析配<br>置文件； ③初始化服务端内部变量， 其中就包括数据库； ④创建事件循环eventLoop； ⑤创建socket并启动监听； ⑥创建文件事件与时间事件；<br>⑦开启事件循环。 下面详细介绍步骤①～步骤④， 至于步骤⑤～步骤⑦<br>将会在9.2.2节介绍</p><p>高性能主线，包括线程模型、数据结构、持久化、网络框架；<br>高可靠主线，包括主从复制、哨兵机制；<br>高可扩展主线，包括数据分片、负载均衡</p><p>Redis 能够在实际业务场景中得到广泛的应用，就是得益于支持多样<br>化类型的 value</p><p>一般而言，内存键值数据库（例如 Redis）采用哈希表作为索引，很大一部分原因在于，<br>其键值数据基本都是保存在内存中的，而内存的高性能随机访问特性可以很好地与哈希表<br>O(1) 的操作复杂度相匹配。</p><p>一方面，这是因为它是内存数据库，<br>所有操作都在内存上完成，内存的访问速度本身就很快。另一方面，这要归功于它的数据<br>结构</p><p>为了实现从键到值的快速访问，Redis 使用了一个哈希表来保存所有键值对</p><p>因为这个哈希表保存了所有的键值对，所以，我也把它称为全局哈希表。哈希表的最大好<br>处很明显，就是让我们可以用 O(1) 的时间复杂度来快速查找到键值对——我们只需要计算<br>键的哈希值，就可以知道它所对应的哈希桶位置，然后就可以访问相应的 entry 元素</p><p>当你往 Redis 中<br>写入大量数据后，就可能发现操作有时候会突然变慢了。这其实是因为你忽略了一个潜在<br>的风险点，那就是哈希表的冲突问题和 rehash 可能带来的操作阻塞</p><p>Redis 解决哈希冲突的方式，就是链式哈希。链式哈希也很容易理解，就是指同一个哈希<br>桶中的多个元素用一个链表来保存，它们之间依次用指针连接。</p><p>哈希冲突链上的元素只能通过指针逐一查找再操作。如果<br>哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链<br>过长，进而导致这个链上的元素查找耗时长，效率降低</p><p>Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐<br>增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个<br>桶中的冲突</p><p>Redis 开始执行 rehash，这个过程分为三步：</p><ol><li><p>给哈希表 2 分配更大的空间，例如是当前哈希表 1 大小的两倍；</p></li><li><p>把哈希表 1 中的数据重新映射并拷贝到哈希表 2 中；</p></li><li><p>释放哈希表 1 的空间</p><p>但是第二步涉及大量的数据拷贝，如果一次性把哈希表 1 中的数据都<br>迁移完，会造成 Redis 线程阻塞，无法服务其他请求</p></li></ol><p>Redis 采用了渐进式 rehash。<br>简单来说就是在第二步拷贝数据时，Redis 仍然正常处理客户端请求，每处理一个请求<br>时，从哈希表 1 中的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝<br>到哈希表 2 中；等处理下一个请求时，再顺带拷贝哈希表 1 中的下一个索引位置的<br>entries</p><p>压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同<br>的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的<br>偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束</p><p>在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段<br>的长度直接定位，复杂度是 O(1)。而查找其他元素时，就没有这么高效了，只能逐个查<br>找，此时的复杂度就是 O(N) 了</p><p>有序链表只能逐一查找元素，导致操作起来非常缓慢，于是就出现了跳表。具体来说，跳<br>表在链表的基础上，增加了多级索引，通过索引位置的几个跳转，实现数据的快速定位</p><p>可以看到，这个查找过程就是在多级索引上跳来跳去，最后定位到元素。这也正好符<br>合“跳”表的叫法。当数据量很大时，跳表的查找复杂度就是 O(logN)</p><p>第一，单元素操作，是指每一种集合类型对单个数据实现的增删改查操作。例如，Hash 类<br>型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM、SRANDMEMBER 等。这些操<br>作的复杂度由集合采用的数据结构决定，例如，HGET、HSET 和 HDEL 是对哈希表做操<br>作，所以它们的复杂度都是 O(1)；Set 类型用哈希表作为底层数据结构时，它的 SADD、<br>SREM、SRANDMEMBER 复杂度也是 O(1)</p><p>第二，范围操作，是指集合类型中的遍历操作，可以返回集合中的所有数据，比如 Hash<br>类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List<br>类型的 LRANGE 和 ZSet 类型的 ZRANGE。这类操作的复杂度一般是 O(N)，比较耗时，<br>我们应该尽量避免</p><p>不过，Redis 从 2.8 版本开始提供了 SCAN 系列操作（包括 HSCAN，SSCAN 和<br>ZSCAN），这类操作实现了渐进式遍历，每次只返回有限数量的数据。这样一来，相比于<br>HGETALL、SMEMBERS 这类操作来说，就避免了一次性返回所有元素而导致的 Redis 阻<br>塞</p><p>第三，统计操作，是指集合类型对集合中所有元素个数的记录，例如 LLEN 和 SCARD。这<br>类操作复杂度只有 O(1)，这是因为当集合类型采用压缩列表、双向链表、整数数组这些数<br>据结构时，这些结构中专门记录了元素的个数统计，因此可以高效地完成相关操作</p><p>第四，例外情况，是指某些数据结构的特殊记录，例如压缩列表和双向链表都会记录表头<br>和表尾的偏移量。这样一来，对于 List 类型的 LPOP、RPOP、LPUSH、RPUSH 这四个操<br>作来说，它们是在列表的头尾增删元素，这就可以通过偏移量直接定位，所以它们的复杂<br>度也只有 O(1)，可以实现快速操作<br>集合类型的范围操作，因为要遍历底层数据结构，复<br>杂度通常是 O(N)。这里，我的建议是：用其他命令来替代，例如可以用 SCAN 来代替，<br>避免在 Redis 内部产生费时的全集合遍历操作<br>双向链表和压缩列<br>表的操作复杂度都是 O(N)。因此，我的建议是：因地制宜地使用 List 类型。例如，既然<br>它的 POP/PUSH 效率很高，那么就将它主要用于 FIFO 队列场景，而不是作为一个可以随<br>机读写的集合</p><p>至于问题答案，采用压缩列表或者是整数集合，都是数据量比较小的情况，所以一次能够<br>分配到足够大的内存，而压缩列表和整数集合本身的数据结构也是线性的，对cpu的缓存<br>更友好一些，所以真正的执行的时间因为高速缓存的关系，速度更快</p><p>我们通常说，Redis 是单线程，主要是指 Redis 的网络 IO<br>和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程。<br>但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执<br>行的</p><p>Redis 为什么用单线程</p><p>系统中通常会存在被多线程同时访问的<br>共享资源，比如一个共享的数据结构。当有多个线程要修改这个共享资源时，为了保证共<br>享资源的正确性，就需要有额外的机制进行保证，而这个额外的机制，就会带来额外的开<br>销</p><p>而且，采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统<br>代码的易调试性和可维护性。为了避免这些问题，Redis 直接采用了单线程模式</p><p>单线程 Redis 为什么那么快？</p><p>一方面，Redis 的大部分操作在内存上完成，再加上它采用了高效的数据结构，例如哈希<br>表和跳表，这是它实现高性能的一个重要原因。另一方面，就是 Redis 采用了多路复用机<br>制，使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。接下来，我们就<br>重点学习下多路复用机制</p><p>Redis 的持久化主要有两大机制，即 AOF 日志和 RDB 快照</p><p>AOF 日志正好相反，它是写后日志，“写后”的意思是 Redis 是先执行命令，把数据写入<br>内存，然后才记录日志</p><p>而 AOF 里记<br>录的是 Redis 收到的每一条命令，这些命令是以文本形式保存的</p><p>而写后日志这种方式，就是先让系统执行命令，只有命令能执行成功，才会被记录到日志<br>中，否则，系统就会直接向客户端报错。所以，Redis 使用写后日志这一方式的一大好处<br>是，可以避免出现记录错误命令的情况</p><p>AOF 还有一个好处：它是在命令执行后才记录日志，所以不会阻塞当前的写操<br>作。</p><p>那么这个命令和相应的数 据就有丢失的风险</p><p>但可能会给下一个操作带来阻塞风险。这是因 为，AOF 日志也是在主线程中执行的，如果在把日志文件写入磁盘时，磁盘写压力大，就<br>会导致写盘很慢</p><p>到这里，我们就可以根据系统对高性能和高可靠性的要求，来选择使用哪种写回策略了。<br>总结一下就是：想要获得高性能，就选择 No 策略；如果想要得到高可靠性保证，就选择<br>Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择<br>Everysec 策略</p><p>这里的“性能问题”，主要在于以下三个方面：一是，文件系统本身对文件大小有限制，<br>无法保存过大的文件；二是，如果文件太大，之后再往里面追加命令记录的话，效率也会<br>变低；三是，如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如<br>果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用</p><p>Redis 根据数据库的现状创建一个新的 AOF 文<br>件，也就是说，读取数据库中的所有键值对，然后对每一个键值对用一条命令记录它的写<br>入</p><p>和 AOF 日志由主线程写回不同，重写过程是由后台线程 bgrewriteaof 来完成的，这也是<br>为了避免阻塞主线程，导致数据库性能下降</p><p>“一个拷贝”就是指，每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此<br>时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的<br>最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数<br>据写成操作，记入重写日志</p><p>因为主线程未阻塞，仍然可以处理新来的操作。此时，如果有写操作，第一处日志就是指<br>正在使用的 AOF 日志，Redis 会把这个操作写到它的缓冲区。这样一来，即使宕机了，这<br>个 AOF 日志的操作仍然是齐全的，可以用于恢复。<br>而第二处日志，就是指新的 AOF 重写日志。这个操作也会被写到重写日志的缓冲区。这<br>样，重写日志也不会丢失最新的操作。等到拷贝数据的所有操作记录重写完成后，重写日<br>志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我<br>们就可以用新的 AOF 文件替代旧文件了</p><p>但是，也正因为记录的是操作命令，而不是实际的数据，所以，用 AOF 方法进行故障恢复<br>的时候，需要逐一把操作日志都执行一遍。如果操作日志非常多，Redis 就会恢复得很缓<br>慢，影响到正常使用</p><p>所谓内存快照，<br>就是指内存中的数据在某一个时刻的状态记录。这就类似于照片，当你给朋友拍照时，一<br>张照片就能把朋友一瞬间的形象完全记下来</p><p>和 AOF 相比，RDB 记录的是某一时刻的数据，并不是操作，所以，在做数据恢复时，我<br>们可以直接把 RDB 文件读入内存，很快地完成恢复。听起来好像很不错，但内存快照也并<br>不是最优选项。为什么这么说呢<br>对哪些数据做快照？这关系到快照的执行效率问题；<br>做快照时，数据还能被增删改吗？这关系到 Redis 是否被阻塞，能否同时正常处理请<br>求<br>Redis 的数据都在内存中，为了提供所有数据的可靠性保证，它执行的是全量快照，也就<br>是说，把内存中的所有数据都记录到磁盘中</p><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave<br>save：在主线程中执行，会导致阻塞；<br>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是<br>Redis RDB 文件生成的默认配置</p><p>所以这个时候，Redis 就会借助操作系统提<br>供的写时复制技术（Copy-On-Write, COW），在执行快照的同时，正常处理写操作</p><p>简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。<br>bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。<br>此时，如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和<br>bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），<br>那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本<br>数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据</p><p>虽然 bgsave 执行时不阻塞主线程，但是，如果频繁地执行全量<br>快照，也会带来两方面的开销</p><p>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带<br>宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环</p><p>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后<br>不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越<br>大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁阻塞主线程了</p><p>虽然跟 AOF 相比，快照的恢复速度快，但是，快照的频率不好把<br>握，如果频率太低，两次快照间一旦宕机，就可能有比较多的数据丢失。如果频率太高，<br>又会产生额外开销，那么，还有什么方法既能利用 RDB 的快速恢复，又能以较小的开销做<br>到尽量少丢数据呢</p><p>Redis 4.0 中提出了一个混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一<br>定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作</p><p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF<br>日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出<br>现文件过大的情况了，也可以避免重写开销</p><p>实际上，Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分 离的方式<br>读操作：主库、从库都可以接收；<br>写操作：首先到主库执行，然后，主库将写操作同步给从库</p><p>并集<br>SUNIONSTORE user:id user:id user:id:20200803<br>差集<br>SDIFFSTORE user:new user:id:20200804 user:id<br>交集<br>SINTERSTORE user:id:rem user:id:20200803 user:id:20200804</p><p>Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计<br>算，会导致 Redis 实例阻塞。所以，我给你分享一个小建议：你可以从主从集群中选择一<br>个从库，让它专门负责聚合计算，或者是把数据读取到客户端，在客户端来完成聚合统<br>计，这样就可以规避阻塞主库实例和其他从库实例的风险了</p><p>所以，在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显<br>示，建议你优先考虑使用 Sorted Set</p><p>16 | 异步机制：如何避免单线程模型的阻塞？<br>Redis 实例有哪些阻塞点？</p><p>客户端：网络 IO，键值对增删改查操作，数据库操作<br>磁盘：生成 RDB 快照，记录 AOF 日志，AOF 日志重写<br>主从节点：主库生成、传输 RDB 文件，从库接收 RDB 文件、清空数据库、加载 RDB 文件<br>切片集群实例：向其他实例传输哈希槽信息，数据迁移</p><ol><li>和客户端交互时的阻塞点<br>Redis 使用了 IO 多路复用机制，网络 IO 不是导致 Redis 阻塞的因素</li></ol><p>复杂度高的增删改查操作肯定会阻塞 Redis</p><p>这里有一个最基本的标准，就是看操作的复杂度是否为 O(N)</p><p>Redis 中涉及集合的操作复杂度通常为 O(N)，我们要在使用时重视起来。例如集合元素全<br>量查询操作 HGETALL、SMEMBERS，以及集合的聚合统计操作，例如求交、并和差集。<br>这些操作可以作为 Redis 的第一个阻塞点：集合全量查询和聚合操作</p><p>其实，删除操作的本质是要释放键值对占用的内存空间。你可不要小瞧内存的释放过程。<br>释放内存只是第一步，为了更加高效地管理内存空间，在应用程序释放内存时，操作系统<br>需要把释放掉的内存块插入一个空闲内存块的链表，以便后续进行管理和再分配。这个过<br>程本身需要一定时间，而且会阻塞当前释放内存的应用程序，所以，如果一下子释放了大<br>量内存，空闲内存块链表操作时间就会增加，相应地就会造成 Redis 主线程的阻塞</p><p>那么，什么时候会释放大量内存呢？其实就是在删除大量键值对数据的时候，最典型的就<br>是删除包含了大量元素的集合，也称为 bigkey 删除</p><p>bigkey 删除操作就是 Redis 的第二个阻塞点</p><p>清空数据库（例如 FLUSHDB 和 FLUSHALL 操作）必然也是一个潜在的阻塞风险，因为它涉及到<br>删除和释放所有的键值对。所以，这就是 Redis 的第三个阻塞点：清空数据库</p><ol start="2"><li>和磁盘交互时的阻塞点</li></ol><p>Redis 直接记录 AOF 日志时，会根据不同的写回策略对数据做落盘保存。一个同步<br>写磁盘的操作的耗时大约是 1～2ms，如果有大量的写操作需要记录在 AOF 日志中，并同<br>步写回的话，就会阻塞主线程了。这就得到了 Redis 的第四个阻塞点了：AOF 日志同步<br>写。</p><ol start="3"><li>主从节点交互时的阻塞点</li></ol><p>在主从集群中，主库需要生成 RDB 文件，并传输给从库。主库在复制的过程中，创建和传<br>输 RDB 文件都是由子进程来完成的，不会阻塞主线程。但是，对于从库来说，它在接收了<br>RDB 文件后，需要使用 FLUSHDB 命令清空当前数据库，这就正好撞上了刚才我们分析的<br>第三个阻塞点。<br>此外，从库在清空当前数据库后，还需要把 RDB 文件加载到内存，这个过程的快慢和<br>RDB 文件的大小密切相关，RDB 文件越大，加载过程越慢，所以，加载 RDB 文件就成为<br>了 Redis 的第五个阻塞点。</p><ol start="4"><li>切片集群实例交互时的阻塞点</li></ol><p>不过，哈希槽的信息量不大，而数据迁移是渐进式执行的，所以，一般来说，这两类操作对 Redis 主线程的阻塞风险不大</p><p>当没有 bigkey 时，切片<br>集群的各实例在进行交互时不会阻塞主线程，就可以了</p><p>集合全量查询和聚合操作；<br>bigkey 删除；<br>清空数据库；<br>AOF 日志同步写；<br>从库加载 RDB 文件</p><p>所谓的异步线程机制，就是指，Redis 会启动一些<br>子线程，然后把一些任务交给这些子线程，让它们在后台完成，而不再由主线程来执行这<br>些任务。使用异步线程机制执行操作，可以避免阻塞主线程</p><p>哪些阻塞点可以异步执行？</p><p>如果一个操作能被异步执行，就意味着，它并不是 Redis 主线程的关键路径上的操作</p><p>对于 Redis 来说，读操作是典型的关键路径操作，因为客户端发送了读操作之后，就会等<br>待读取的数据返回，以便进行后续的数据处理。而 Redis 的第一个阻塞点“集合全量查询<br>和聚合操作”都涉及到了读操作，所以，它们是不能进行异步操作了</p><p>我们再来看看删除操作。删除操作并不需要给客户端返回具体的数据结果，所以不算是关<br>键路径操作。而我们刚才总结的第二个阻塞点“bigkey 删除”，和第三个阻塞点“清空数<br>据库”，都是对数据做删除，并不在关键路径上。因此，我们可以使用后台子线程来异步<br>执行删除操作。</p><p>对于第四个阻塞点“AOF 日志同步写”来说，为了保证数据可靠性，Redis 实例需要保证<br>AOF 日志中的操作记录已经落盘，这个操作虽然需要实例等待，但它并不会返回具体的数<br>据结果给实例。所以，我们也可以启动一个子线程来执行 AOF 日志的同步写，而不用让主<br>线程等待 AOF 日志的写完成</p><p>最后，我们再来看下“从库加载 RDB 文件”这个阻塞点。从库要想对客户端提供数据存取<br>服务，就必须把 RDB 文件加载完成。所以，这个操作也属于关键路径上的操作，我们必须<br>让从库的主线程来执行</p><p>异步的子线程机制<br>会使用操作系统提供的 pthread_create 函数创建 3 个子线程，分别<br>由它们负责 AOF 日志写操作、键值对删除以及文件关闭的异步执行</p><p>主线程通过一个链表形式的任务队列和子线程进行交互。当收到键值对删除和清空数据库<br>的操作时，主线程会把这个操作封装成一个任务，放入到任务队列中，然后给客户端返回<br>一个完成信息，表明删除已经完成</p><p>但实际上，这个时候删除还没有执行，等到后台子线程从任务队列中读取任务后，才开始<br>实际删除键值对，并释放相应的内存空间。因此，我们把这种异步删除也称为惰性删除<br>（lazy free）</p><p>和惰性删除类似，当 AOF 日志配置成 everysec 选项后，主线程会把 AOF 写日志操作封<br>装成一个任务，也放到任务队列中。后台子线程读取任务后，开始自行写入 AOF 日志，这<br>样主线程就不用一直等待 AOF 日志写完了</p><p>这里有个地方需要你注意一下，异步的键值对删除和数据库清空操作是 Redis 4.0 后提供<br>的功能，Redis 也提供了新的命令来执行这两个操作</p><p>键值对删除：当你的集合类型中有大量元素（例如有百万级别或千万级别元素）需要删<br>除时，我建议你使用 UNLINK 命令。<br>清空数据库：可以在 FLUSHDB 和 FLUSHALL 命令后加上 ASYNC 选项，这样就可以让<br>后台子线程异步地清空数据库</p><p>不过，异步删除操作是 Redis 4.0 以后才有的功能，如果你使用的是 4.0 之前的版本，当<br>你遇到 bigkey 删除时，我给你个小建议：先使用集合类型提供的 SCAN 命令读取数据，<br>然后再进行删除。因为用 SCAN 命令可以每次只读取一部分数据并进行删除，这样可以避<br>免一次性删除大量 key 给主线程带来的阻塞。<br>例如，对于 Hash 类型的 bigkey 删除，你可以使用 HSCAN 命令，每次从 Hash 集合中<br>获取一部分键值对（例如 200 个），再使用 HDEL 删除这些键值对，这样就可以把删除压<br>力分摊到多次操作中，那么，每次删除操作的耗时就不会太长，也就不会阻塞主线程了。<br>最后，我想再提一下，集合全量查询和聚合操作、从库加载 RDB 文件是在关键路径上，无<br>法使用异步操作来完成。对于这两个阻塞点，我也给你两个小建议</p><p>集合全量查询和聚合操作：可以使用 SCAN 命令，分批读取数据，再在客户端进行聚合<br>计算；<br>从库加载 RDB 文件：把主库的数据量大小控制在 2~4GB 左右，以保证 RDB 文件能以<br>较快的速度加载</p><h1 id="17-为什么CPU结构也会影响Redis的性能？"><a href="#17-为什么CPU结构也会影响Redis的性能？" class="headerlink" title="17 | 为什么CPU结构也会影响Redis的性能？"></a>17 | 为什么CPU结构也会影响Redis的性能？</h1><p>L1、L2 缓存中的指令和数据的访问速度很快，所以，充分利用 L1、L2 缓存，可以有效<br>缩短应用程序的执行时间；<br>在 NUMA 架构下，如果应用程序从一个 Socket 上调度到另一个 Socket 上，就可能会<br>出现远端内存访问的情况，这会直接增加应用程序的执行时间</p><p>我们先简单地总结下刚刚学习的内容。在 CPU 多核的场景下，用 taskset 命令把 Redis 实<br>例和一个核绑定，可以减少 Redis 实例在不同核上被来回调度执行的开销，避免较高的尾<br>延迟；在多 CPU 的 NUMA 架构下，如果你对网络中断程序做了绑核操作，建议你同时把<br>Redis 实例和网络中断程序绑在同一个 CPU Socket 的不同核上，这样可以避免 Redis 跨<br>Socket 访问内存中的网络数据的时间开销。<br>不过，“硬币都是有两面的”，绑核也存在一定的风险。接下来，我们就来了解下它的潜<br>在风险点和解决方案</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务器初始化主流程（见图9-2） 可以简要分为7个步骤： ①初始化配置， 包括用户可配置的参数， 以及命令表的初始化； ②加载并解析配&lt;br&gt;置文件； ③初始化服务端内部变量， 其中就包括数据库； ④创建事件循环eventLoop； ⑤创建socket并启动监听； ⑥创建文</summary>
      
    
    
    
    <category term="cache" scheme="https://xxnjdg.github.io/categories/cache/"/>
    
    
    <category term="redis" scheme="https://xxnjdg.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>namesrv笔记</title>
    <link href="https://xxnjdg.github.io/2021/02/15/rocketmq-1/"/>
    <id>https://xxnjdg.github.io/2021/02/15/rocketmq-1/</id>
    <published>2021-02-15T07:27:27.000Z</published>
    <updated>2021-03-03T12:19:17.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="org-apache-rocketmq-namesrv-NamesrvStartup"><a href="#org-apache-rocketmq-namesrv-NamesrvStartup" class="headerlink" title="org.apache.rocketmq.namesrv.NamesrvStartup"></a>org.apache.rocketmq.namesrv.NamesrvStartup</h1><p>程序入口</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//定时扫描不可用的broker，同时删除不可用的broker，同时打印相关日志</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                NamesrvController.this.routeInfoManager.scanNotActiveBroker();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 5, 10, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        //定时将kv的配置信息输出到info日志中</span><br><span class="line">        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                NamesrvController.this.kvConfigManager.printAllPeriodically();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1, 10, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>requestHeader.setBrokerAddr(brokerAddr);<br>requestHeader.setBrokerId(brokerId);<br>requestHeader.setBrokerName(brokerName);<br>requestHeader.setClusterName(clusterName);<br>requestHeader.setHaServerAddr(haServerAddr);<br>requestHeader.setCompressed(compressed);<br>requestHeader.setBodyCrc32(bodyCrc32);</p><p>requestBody.setTopicConfigSerializeWrapper(topicConfigWrapper);<br>requestBody.setFilterServerList(filterServerList);</p><h1 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h1><h2 id="定时任务-1"><a href="#定时任务-1" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//每30秒循环 Broker 发送心跳包</span><br><span class="line">this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    BrokerController.this.registerBrokerAll(true, false, brokerConfig.isForceRegister());</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    log.error(&quot;registerBrokerAll Exception&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;, 1000 * 10, Math.max(10000, Math.min(brokerConfig.getRegisterNameServerPeriod(), 60000)), TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>消息队列如何进行负载 ？<br>消息发送如何实现高可用 ？<br>批量消息发送如何实现一致性？<br>2 ）消息队列负载机制<br>消息生产者在发送消息时，如果本地路由表中未缓存 topic 的路由信息，向 NameServer 发送获取路由信息请求，更新本地路由信息表，并且消息生产者每隔 30s 从 NameServer 更新路由表 。<br>3 ）消息发送异常机制<br>消息发送高可用主要通过两个手段 ： 重试与 Broker 规避 。 Brok巳r 规避就是在一次消息<br>发送过程中发现错误，在某一时间段内，消息生产者不会选择该 Broker（消息服务器）上的<br>消息队列，提高发送消息的成功率 。<br>4 ）批量消息发送<br>RocketMQ 支持将 同一主题下 的多条消息一次性发送到消息服务端 。</p><p>SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();<br>//消息发送组<br>requestHeader.setProducerGroup(this.defaultMQProducer.getProducerGroup());<br>//消息的topic<br>requestHeader.setTopic(msg.getTopic());<br>//消息的默认topic<br>requestHeader.setDefaultTopic(this.defaultMQProducer.getCreateTopicKey());<br>//消息的默认queue数量<br>requestHeader.setDefaultTopicQueueNums(this.defaultMQProducer.getDefaultTopicQueueNums());<br>//消息发送的queueid<br>requestHeader.setQueueId(mq.getQueueId());<br>//特殊标识<br>requestHeader.setSysFlag(sysFlag);<br>//消息创建的时间戳<br>requestHeader.setBornTimestamp(System.currentTimeMillis());<br>//标识<br>requestHeader.setFlag(msg.getFlag());<br>//消息的扩展属性<br>requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));<br>//消息的消费<br>requestHeader.setReconsumeTimes(0);<br>//模型<br>requestHeader.setUnitMode(this.isUnitMode());<br>//批量<br>requestHeader.setBatch(msg instanceof MessageBatch);</p><p>response.setOpaque(request.getOpaque());<br>response.addExtField(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());<br>response.addExtField(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));<br>response.setCode(ResponseCode.SUCCESS);<br>response.setRemark(null);<br>responseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());<br>responseHeader.setQueueId(queueIdInt);<br>responseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());</p><p>MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_CLUSTER, clusterName);</p><p>MessageAccessor.putProperty(msgExt, MessageConst.PROPERTY_RETRY_TOPIC, msgExt.getTopic());<br>this.putProperty(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, false);<br>this.putProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL, 3);<br>putProperty(msg, MessageConst.PROPERTY_ORIGIN_MESSAGE_ID, msgExt.getMsgId());<br>MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());<br>MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));<br>topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;<br>queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</p><p>1 ) TOTALSIZE ： 该消息条目总长度 ， 4 字节 。<br>2 ) MAGICCODE ： 魔数， 4 字节 。 固定值 Oxdaa320a7 。<br>3 ) BODYCRC ： 消息体 ere 校验码， 4 字节 。<br>4 ) QUEUEID ： 消息消费队列 ID , 4 字节 。<br>5 ) FLAG ： 消息 FLAG , RocketMQ 不做处理 ， 供应用程序使用，默认 4 字节 。<br>6 ) QUEUEOFFSET ：消息在消息消费队列的偏移量 ， 8 字节 。<br>7 ) PHYSICALOFFSET ： 消息在 CommitLog 文件中的偏移量 ， 8 字节 。<br>8 ) SYSFLAG ： 消息系统 Flag ，例如是否压缩 、 是否是事务消息等 ， 4 字节 。<br>9 ) BORNTIMESTAMP ： 消息生产者调用消息发送 API 的时间戳， 8 字节 。<br>10 ) BORNHOST ：消息发送者 IP 、端 口 号， 8 字节 。<br>11 ) STORETIMESTAMP ： 消息存储时间戳， 8 字节 。<br>12 ) STOREHOSTADDRESS: Broker 服务器 IP＋ 端 口 号， 8 字节 。<br>13 ） 阻CONSUMETIMES ： 消息重试次数， 4 字节 。<br>14 ) Prepared Transaction Offset ： 事务消息物理偏移量 ， 8 字节 。<br>15 ) BodyLength ：消息体长度， 4 字节 。<br>16 ) Body ： 消息体内容，长度为 bodyLenth 中存储的值。<br>17 ) TopieLength ： 主题存储长度， 1 字节 ，表示主题名称不能超过 255 个字符 。<br>18) Topie ： 主题，长度为 TopieLength 中存储的值。<br>    19 ) PropertiesLength ： 消息属性长度 ， 2 字节 ， 表示消息属性长度不能超过 6 553 6 个<br>    字符 。<br>    20 ) Properties ： 消息属性，长度为 PropertiesLength 中存储的值 。</p><p>DLedgerMmapFileStore.AppendHook appendHook = (entry, buffer, bodyOffset) -&gt; {<br>assert bodyOffset == DLedgerEntry.BODY_OFFSET;<br>buffer.position(buffer.position() + bodyOffset + MessageDecoder.PHY_POS_POSITION);<br>buffer.putLong(entry.getPos() + bodyOffset);<br>};<br>dLedgerFileStore.addAppendHook(appendHook);</p><h1 id="org-apache-rocketmq-common-namesrv-NamesrvConfig"><a href="#org-apache-rocketmq-common-namesrv-NamesrvConfig" class="headerlink" title="org.apache.rocketmq.common.namesrv.NamesrvConfig"></a>org.apache.rocketmq.common.namesrv.NamesrvConfig</h1><table>    <tr>        <td>配置项</td>         <td>key</td>        <td>默认值</td>         <td>说明</td>     </tr>    <tr>        <td>rocketmq 主目录</td>        <td>rocketmqHome</td>        <td>System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV))</td>        <td>可以通过 -Drocketmq.home.dir=path 或通过设置环境变量 ROCKETMQ_HOME 来配置 RocketMQ 的主目录</td>    </tr>    <tr>        <td>NameServer存储 KV 配置属性的持久化路径</td>        <td>kvConfigPath</td>        <td>System.getProperty("user.home") + File.separator + "namesrv" + File.separator + "kvConfig.json"</td>        <td>NameServer 存储 KV 配置属性的持久化路径</td>    </tr>    <tr>        <td>NameServer 默认配置文件路径</td>        <td>configStorePath</td>        <td>System.getProperty("user.home") + File.separator + "namesrv" + File.separator + "namesrv.properties"</td>        <td>NameServer 默认配置文件路径,不生效. NameServer 启动时如果要通过配置文件配置 NameServer 启动属性的话，请使用 -c 选项</td>    </tr>    <tr>        <td></td>        <td>productEnvName</td>        <td>center</td>        <td></td>    </tr>    <tr>        <td>集群测试</td>        <td>clusterTest</td>        <td>false</td>        <td>是否开启集群测试</td>    </tr>    <tr>        <td>顺序消息</td>        <td>orderMessageEnable</td>        <td>false</td>        <td>是否支持顺序消息，默认是不支持</td>    </tr></table><h1 id="org-apache-rocketmq-remoting-netty-NettyServerConfig"><a href="#org-apache-rocketmq-remoting-netty-NettyServerConfig" class="headerlink" title="org.apache.rocketmq.remoting.netty.NettyServerConfig"></a>org.apache.rocketmq.remoting.netty.NettyServerConfig</h1><table>    <tr>        <td>配置项</td>         <td>默认值类型</td>        <td>默认值</td>         <td>说明</td>     </tr>    <tr>        <td>listenPort</td>        <td>int</td>        <td>8888</td>        <td>服务端监听端口，NameServer 监昕端口，该值默认会被初始化为 9876</td>    </tr>    <tr>        <td>serverWorkerThreads</td>        <td>int</td>        <td>8</td>        <td> Netty 业务线程池线程个数</td>    </tr>    <tr>        <td>serverCallbackExecutorThreads</td>        <td>int</td>        <td>0</td>        <td>Netty public 任务线程池线程个数，Netty 网络设计，根据业务类型会创建不同的线程池，比如处理消息发送、消息消费、心跳检测等。如果该业务类型（RequestCode）未注册线程池，则由 public 线程池执行</td>    </tr>    <tr>        <td>serverSelectorThreads</td>        <td>int</td>        <td>3</td>        <td>IO线程池线程个数，主要是 NameServer 、 Broker 端解析请求、返回相应的线程个数，这类线程主要是处理网络请求的，解析请求包，然后转发到各个业务线程池完成具体的业务操作，然后将结果再返回调用方</td>    </tr>    <tr>        <td>serverOnewaySemaphoreValue</td>        <td>int</td>        <td>256</td>        <td>send oneway 消息请求井发度（ Broker 端参数）</td>    </tr>    <tr>        <td>serverAsyncSemaphoreValue</td>        <td>int</td>        <td>64</td>        <td>异步消息发送最大并发度（ Broker 端参数）</td>    </tr>    <tr>        <td>serverChannelMaxIdleTimeSeconds</td>        <td>int</td>        <td>120</td>        <td>网络连接最大空闲时间，默认120s。如果连接空闲时间超过该参数设置的值，连接将被关闭</td>    </tr>    <tr>        <td>serverSocketSndBufSize</td>        <td>int</td>        <td>65535</td>        <td>网络 socket 发送缓存区大小，默认64k</td>    </tr>    <tr>        <td>serverSocketRcvBufSize</td>        <td>int</td>        <td>65535</td>        <td>网络 socket 接收缓存区大小，默认64k</td>    </tr>    <tr>        <td>serverPooledByteBufAllocatorEnable</td>        <td>boolean</td>        <td>true</td>        <td>ByteBuffer 是否开启缓存，建议开启</td>    </tr>    <tr>        <td>useEpollNativeSelector</td>        <td>boolean</td>        <td>false</td>        <td>是否启用 EpollIO 模型，Linux 环境建议开启</td>    </tr></table><table>    <tr>        <td>rocketmqHome</td>        <td>class java.lang.String</td>        <td>System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV))</td>        <td></td>    </tr>    <tr>        <td>namesrvAddr</td>        <td>class java.lang.String</td>        <td>System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV))</td>        <td></td>    </tr>    <tr>        <td>brokerIP1</td>        <td>class java.lang.String</td>        <td>RemotingUtil.getLocalAddress()</td>        <td></td>    </tr>    <tr>        <td>brokerIP2</td>        <td>class java.lang.String</td>        <td>RemotingUtil.getLocalAddress()</td>        <td></td>    </tr>    <tr>        <td>brokerName</td>        <td>class java.lang.String</td>        <td>localHostName()</td>        <td></td>    </tr>    <tr>        <td>brokerClusterName</td>        <td>class java.lang.String</td>        <td>DefaultCluster</td>        <td></td>    </tr>    <tr>        <td>brokerId</td>        <td>long</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>brokerPermission</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>defaultTopicQueueNums</td>        <td>int</td>        <td>8</td>        <td></td>    </tr>    <tr>        <td>autoCreateTopicEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>clusterTopicEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>brokerTopicEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>autoCreateSubscriptionGroup</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>messageStorePlugIn</td>        <td>class java.lang.String</td>        <td></td>        <td></td>    </tr>    <tr>        <td>msgTraceTopicName</td>        <td>class java.lang.String</td>        <td>TopicValidator.RMQ_SYS_TRACE_TOPIC</td>        <td></td>    </tr>    <tr>        <td>traceTopicEnable</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>sendMessageThreadPoolNums</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>pullMessageThreadPoolNums</td>        <td>int</td>        <td>32</td>        <td></td>    </tr>    <tr>        <td>processReplyMessageThreadPoolNums</td>        <td>int</td>        <td>32</td>        <td></td>    </tr>    <tr>        <td>queryMessageThreadPoolNums</td>        <td>int</td>        <td>16</td>        <td></td>    </tr>    <tr>        <td>adminBrokerThreadPoolNums</td>        <td>int</td>        <td>16</td>        <td></td>    </tr>    <tr>        <td>clientManageThreadPoolNums</td>        <td>int</td>        <td>32</td>        <td></td>    </tr>    <tr>        <td>consumerManageThreadPoolNums</td>        <td>int</td>        <td>32</td>        <td></td>    </tr>    <tr>        <td>heartbeatThreadPoolNums</td>        <td>int</td>        <td>8</td>        <td></td>    </tr>    <tr>        <td>endTransactionThreadPoolNums</td>        <td>int</td>        <td>24</td>        <td></td>    </tr>    <tr>        <td>flushConsumerOffsetInterval</td>        <td>int</td>        <td>5000</td>        <td></td>    </tr>    <tr>        <td>flushConsumerOffsetHistoryInterval</td>        <td>int</td>        <td>60000</td>        <td></td>    </tr>    <tr>        <td>rejectTransactionMessage</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>fetchNamesrvAddrByAddressServer</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>sendThreadPoolQueueCapacity</td>        <td>int</td>        <td>10000</td>        <td></td>    </tr>    <tr>        <td>pullThreadPoolQueueCapacity</td>        <td>int</td>        <td>100000</td>        <td></td>    </tr>    <tr>        <td>replyThreadPoolQueueCapacity</td>        <td>int</td>        <td>10000</td>        <td></td>    </tr>    <tr>        <td>queryThreadPoolQueueCapacity</td>        <td>int</td>        <td>20000</td>        <td></td>    </tr>    <tr>        <td>clientManagerThreadPoolQueueCapacity</td>        <td>int</td>        <td>1000000</td>        <td></td>    </tr>    <tr>        <td>consumerManagerThreadPoolQueueCapacity</td>        <td>int</td>        <td>1000000</td>        <td></td>    </tr>    <tr>        <td>heartbeatThreadPoolQueueCapacity</td>        <td>int</td>        <td>50000</td>        <td></td>    </tr>    <tr>        <td>endTransactionPoolQueueCapacity</td>        <td>int</td>        <td>100000</td>        <td></td>    </tr>    <tr>        <td>filterServerNums</td>        <td>int</td>        <td>0</td>        <td></td>    </tr>    <tr>        <td>longPollingEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>shortPollingTimeMills</td>        <td>long</td>        <td>1000</td>        <td></td>    </tr>    <tr>        <td>notifyConsumerIdsChangedEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>highSpeedMode</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>commercialEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>commercialTimerCount</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>commercialTransCount</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>commercialBigCount</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>commercialBaseCount</td>        <td>int</td>        <td>1</td>        <td></td>    </tr>    <tr>        <td>transferMsgByHeap</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>maxDelayTime</td>        <td>int</td>        <td>40</td>        <td></td>    </tr>    <tr>        <td>regionId</td>        <td>class java.lang.String</td>        <td>MixAll.DEFAULT_TRACE_REGION_ID</td>        <td></td>    </tr>    <tr>        <td>registerBrokerTimeoutMills</td>        <td>int</td>        <td>6000</td>        <td></td>    </tr>    <tr>        <td>slaveReadEnable</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>disableConsumeIfConsumerReadSlowly</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>consumerFallbehindThreshold</td>        <td>long</td>        <td>17179869184</td>        <td></td>    </tr>    <tr>        <td>brokerFastFailureEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>waitTimeMillsInSendQueue</td>        <td>long</td>        <td>200</td>        <td></td>    </tr>    <tr>        <td>waitTimeMillsInPullQueue</td>        <td>long</td>        <td>5000</td>        <td></td>    </tr>    <tr>        <td>waitTimeMillsInHeartbeatQueue</td>        <td>long</td>        <td>31000</td>        <td></td>    </tr>    <tr>        <td>waitTimeMillsInTransactionQueue</td>        <td>long</td>        <td>3000</td>        <td></td>    </tr>    <tr>        <td>startAcceptSendRequestTimeStamp</td>        <td>long</td>        <td>0</td>        <td></td>    </tr>    <tr>        <td>traceOn</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>enableCalcFilterBitMap</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>expectConsumerNumUseFilter</td>        <td>int</td>        <td>32</td>        <td></td>    </tr>    <tr>        <td>maxErrorRateOfBloomFilter</td>        <td>int</td>        <td>20</td>        <td></td>    </tr>    <tr>        <td>filterDataCleanTimeSpan</td>        <td>long</td>        <td>86400000</td>        <td></td>    </tr>    <tr>        <td>filterSupportRetry</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>enablePropertyFilter</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>compressedRegister</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>forceRegister</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>registerNameServerPeriod</td>        <td>int</td>        <td>30000</td>        <td></td>    </tr>    <tr>        <td>transactionTimeOut</td>        <td>long</td>        <td>6000</td>        <td></td>    </tr>    <tr>        <td>transactionCheckMax</td>        <td>int</td>        <td>15</td>        <td></td>    </tr>    <tr>        <td>transactionCheckInterval</td>        <td>long</td>        <td>60000</td>        <td></td>    </tr>    <tr>        <td>aclEnable</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>storeReplyMessageEnable</td>        <td>boolean</td>        <td>true</td>        <td></td>    </tr>    <tr>        <td>autoDeleteUnusedStats</td>        <td>boolean</td>        <td>false</td>        <td></td>    </tr></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;org-apache-rocketmq-namesrv-NamesrvStartup&quot;&gt;&lt;a href=&quot;#org-apache-rocketmq-namesrv-NamesrvStartup&quot; class=&quot;headerlink&quot; title=&quot;org.apac</summary>
      
    
    
    
    <category term="mq" scheme="https://xxnjdg.github.io/categories/mq/"/>
    
    
    <category term="rocketmq" scheme="https://xxnjdg.github.io/tags/rocketmq/"/>
    
  </entry>
  
  <entry>
    <title>nacos注册中心集群笔记2</title>
    <link href="https://xxnjdg.github.io/2021/02/10/nacos-5/"/>
    <id>https://xxnjdg.github.io/2021/02/10/nacos-5/</id>
    <published>2021-02-10T03:10:57.000Z</published>
    <updated>2021-02-14T14:07:40.099Z</updated>
    
    <content type="html"><![CDATA[<p>nacos 版本 1.4.1</p><h1 id="DistroProtocol"><a href="#DistroProtocol" class="headerlink" title="DistroProtocol"></a>DistroProtocol</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDistroTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (EnvUtil.getStandaloneMode()) &#123;</span><br><span class="line">            isInitialized = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        startVerifyTask();</span><br><span class="line">        startLoadTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startVerifyTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GlobalExecutor.schedulePartitionDataTimedSync(<span class="keyword">new</span> DistroVerifyTask(memberManager, distroComponentHolder),</span><br><span class="line">                distroConfig.getVerifyIntervalMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>每5秒循环执行DistroVerifyTask</p><p>每5秒广播向其他Server发送 Datum checksum，其他 Server 如果发现你的 checksum 和我的不一样，就会请求源 Server 获取新数据，获取成功后更新本地 Datum 和本地实例表 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroVerifyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerMemberManager serverMemberManager;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DistroComponentHolder distroComponentHolder;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistroVerifyTask</span><span class="params">(ServerMemberManager serverMemberManager, DistroComponentHolder distroComponentHolder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverMemberManager = serverMemberManager;</span><br><span class="line">        <span class="keyword">this</span>.distroComponentHolder = distroComponentHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Member&gt; targetServer = serverMemberManager.allMembersWithoutSelf();</span><br><span class="line">            <span class="keyword">if</span> (Loggers.DISTRO.isDebugEnabled()) &#123;</span><br><span class="line">                Loggers.DISTRO.debug(<span class="string">&quot;server list is: &#123;&#125;&quot;</span>, targetServer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String each : distroComponentHolder.getDataStorageTypes()) &#123;</span><br><span class="line">                verifyForDataStorage(each, targetServer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.DISTRO.error(<span class="string">&quot;[DISTRO-FAILED] verify task failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyForDataStorage</span><span class="params">(String type, List&lt;Member&gt; targetServer)</span> </span>&#123;</span><br><span class="line">        DistroData distroData = distroComponentHolder.findDataStorage(type).getVerifyData();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == distroData) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        distroData.setType(DataOperation.VERIFY);</span><br><span class="line">        <span class="comment">//广播</span></span><br><span class="line">        <span class="keyword">for</span> (Member member : targetServer) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                distroComponentHolder.findTransportAgent(type).syncVerifyData(distroData, member.getAddress());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.DISTRO.error(String</span><br><span class="line">                        .format(<span class="string">&quot;[DISTRO-FAILED] verify data for type %s to %s failed.&quot;</span>, type, member.getAddress()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroDataStorageImpl</span> <span class="keyword">implements</span> <span class="title">DistroDataStorage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistroData <span class="title">getVerifyData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyChecksums = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : dataStore.keys()) &#123;</span><br><span class="line">            <span class="comment">//不处理不属于当前Server的Service</span></span><br><span class="line">            <span class="keyword">if</span> (!distroMapper.responsible(KeyBuilder.getServiceName(key))) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Datum datum = dataStore.get(key);</span><br><span class="line">            <span class="keyword">if</span> (datum == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算 Datum checksum</span></span><br><span class="line">            keyChecksums.put(key, datum.value.getChecksum());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keyChecksums.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DistroKey distroKey = <span class="keyword">new</span> DistroKey(<span class="string">&quot;checksum&quot;</span>, KeyBuilder.INSTANCE_LIST_KEY_PREFIX);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DistroData(distroKey, ApplicationUtils.getBean(Serializer.class).serialize(keyChecksums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroHttpAgent</span> <span class="keyword">implements</span> <span class="title">DistroTransportAgent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">syncVerifyData</span><span class="params">(DistroData verifyData, String targetServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!memberManager.hasMember(targetServer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// put 请求 /v1/ns/distro/checksum</span></span><br><span class="line">        NamingProxy.syncCheckSums(verifyData.getContent(), targetServer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DistroConsistencyServiceImpl"><a href="#DistroConsistencyServiceImpl" class="headerlink" title="DistroConsistencyServiceImpl"></a>DistroConsistencyServiceImpl</h1><p>默认情况下，延时1秒后把数据广播同步到其他Server，如果发送给某了Server失败了,那么会重试，延时设置为5秒后</p><p>key = 代表Service key,在这1秒内，无论这个Service下实例发生了什么变化，也都会等到1秒后延时执行同步，并不是实例发生了改变就立即同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title">EphemeralConsistencyService</span>, <span class="title">DistroDataProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Record value)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="comment">//将注册实例更新到内存注册表中</span></span><br><span class="line">        onPut(key, value);</span><br><span class="line">        <span class="comment">//复制新数据到服务集群中</span></span><br><span class="line">        distroProtocol.sync(<span class="keyword">new</span> DistroKey(key, KeyBuilder.INSTANCE_LIST_KEY_PREFIX), DataOperation.CHANGE,</span><br><span class="line">                globalConfig.getTaskDispatchPeriod() / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(DistroKey distroKey, DataOperation action, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//广播</span></span><br><span class="line">        <span class="keyword">for</span> (Member each : memberManager.allMembersWithoutSelf()) &#123;</span><br><span class="line">            DistroKey distroKeyWithTarget = <span class="keyword">new</span> DistroKey(distroKey.getResourceKey(), distroKey.getResourceType(),</span><br><span class="line">                    each.getAddress());</span><br><span class="line">            <span class="comment">//构造 DistroDelayTask</span></span><br><span class="line">            DistroDelayTask distroDelayTask = <span class="keyword">new</span> DistroDelayTask(distroKeyWithTarget, action, delay);</span><br><span class="line">            <span class="comment">//加入 distroTaskEngineHolder 中</span></span><br><span class="line">            distroTaskEngineHolder.getDelayTaskExecuteEngine().addTask(distroKeyWithTarget, distroDelayTask);</span><br><span class="line">            <span class="keyword">if</span> (Loggers.DISTRO.isDebugEnabled()) &#123;</span><br><span class="line">                Loggers.DISTRO.debug(<span class="string">&quot;[DISTRO-SCHEDULE] &#123;&#125; to &#123;&#125;&quot;</span>, distroKey, each.getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosDelayTaskExecuteEngine</span> <span class="keyword">extends</span> <span class="title">AbstractNacosTaskExecuteEngine</span>&lt;<span class="title">AbstractDelayTask</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(Object key, AbstractDelayTask newTask)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AbstractDelayTask existTask = tasks.get(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != existTask) &#123;</span><br><span class="line">                <span class="comment">//任务还在延时中</span></span><br><span class="line">                newTask.merge(existTask);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//放入 tasks</span></span><br><span class="line">            tasks.put(key, newTask);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;Object&gt; keys = getAllTaskKeys();</span><br><span class="line">        <span class="keyword">for</span> (Object taskKey : keys) &#123;</span><br><span class="line">            AbstractDelayTask task = removeTask(taskKey);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == task) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            NacosTaskProcessor processor = getProcessor(taskKey);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == processor) &#123;</span><br><span class="line">                getEngineLog().error(<span class="string">&quot;processor not found for task, so discarded. &quot;</span> + task);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// ReAdd task if process failed</span></span><br><span class="line">                <span class="keyword">if</span> (!processor.process(task)) &#123;</span><br><span class="line">                    retryFailedTask(taskKey, task);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                getEngineLog().error(<span class="string">&quot;Nacos task execute error : &quot;</span> + e.toString(), e);</span><br><span class="line">                retryFailedTask(taskKey, task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractDelayTask <span class="title">removeTask</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AbstractDelayTask task = tasks.get(key);</span><br><span class="line">            <span class="comment">//shouldProcess 会延迟指定时间间隔才能移除</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != task &amp;&amp; task.shouldProcess()) &#123;</span><br><span class="line">                <span class="keyword">return</span> tasks.remove(key);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroDelayTask</span> <span class="keyword">extends</span> <span class="title">AbstractDelayTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(AbstractDelayTask task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(task <span class="keyword">instanceof</span> DistroDelayTask)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DistroDelayTask newTask = (DistroDelayTask) task;</span><br><span class="line">        <span class="keyword">if</span> (!action.equals(newTask.getAction()) &amp;&amp; createTime &lt; newTask.getCreateTime()) &#123;</span><br><span class="line">            action = newTask.getAction();</span><br><span class="line">            createTime = newTask.getCreateTime();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改 lastProcessTime</span></span><br><span class="line">        setLastProcessTime(newTask.getLastProcessTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroDelayTaskProcessor</span> <span class="keyword">implements</span> <span class="title">NacosTaskProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(NacosTask task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(task <span class="keyword">instanceof</span> DistroDelayTask)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DistroDelayTask distroDelayTask = (DistroDelayTask) task;</span><br><span class="line">        DistroKey distroKey = distroDelayTask.getDistroKey();</span><br><span class="line">        <span class="keyword">if</span> (DataOperation.CHANGE.equals(distroDelayTask.getAction())) &#123;</span><br><span class="line">            DistroSyncChangeTask syncChangeTask = <span class="keyword">new</span> DistroSyncChangeTask(distroKey, distroComponentHolder);</span><br><span class="line">            distroTaskEngineHolder.getExecuteWorkersManager().addTask(distroKey, syncChangeTask);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroSyncChangeTask</span> <span class="keyword">extends</span> <span class="title">AbstractDistroExecuteTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Loggers.DISTRO.info(<span class="string">&quot;[DISTRO-START] &#123;&#125;&quot;</span>, toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String type = getDistroKey().getResourceType();</span><br><span class="line">            <span class="comment">//从 DataStore 获取数据</span></span><br><span class="line">            DistroData distroData = distroComponentHolder.findDataStorage(type).getDistroData(getDistroKey());</span><br><span class="line">            distroData.setType(DataOperation.CHANGE);</span><br><span class="line">            <span class="keyword">boolean</span> result = distroComponentHolder.findTransportAgent(type).syncData(distroData, getDistroKey().getTargetServer());</span><br><span class="line">            <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="comment">//如果失败</span></span><br><span class="line">                handleFailedTask();</span><br><span class="line">            &#125;</span><br><span class="line">            Loggers.DISTRO.info(<span class="string">&quot;[DISTRO-END] &#123;&#125; result: &#123;&#125;&quot;</span>, toString(), result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Sync data change failed.&quot;</span>, e);</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            handleFailedTask();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleFailedTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String type = getDistroKey().getResourceType();</span><br><span class="line">        DistroFailedTaskHandler failedTaskHandler = distroComponentHolder.findFailedTaskHandler(type);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == failedTaskHandler) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Can&#x27;t find failed task for type &#123;&#125;, so discarded&quot;</span>, type);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        failedTaskHandler.retry(getDistroKey(), DataOperation.CHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroHttpAgent</span> <span class="keyword">implements</span> <span class="title">DistroTransportAgent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">syncData</span><span class="params">(DistroData data, String targetServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!memberManager.hasMember(targetServer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] dataContent = data.getContent();</span><br><span class="line">        <span class="comment">// put 请求 /v1/ns/distro/datum</span></span><br><span class="line">        <span class="keyword">return</span> NamingProxy.syncData(dataContent, data.getDistroKey().getTargetServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroHttpCombinedKeyTaskFailedHandler</span> <span class="keyword">implements</span> <span class="title">DistroFailedTaskHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(DistroKey distroKey, DataOperation action)</span> </span>&#123;</span><br><span class="line">        DistroHttpCombinedKey combinedKey = (DistroHttpCombinedKey) distroKey;</span><br><span class="line">        <span class="keyword">for</span> (String each : combinedKey.getActualResourceTypes()) &#123;</span><br><span class="line">            DistroKey newKey = <span class="keyword">new</span> DistroKey(each, KeyBuilder.INSTANCE_LIST_KEY_PREFIX, distroKey.getTargetServer());</span><br><span class="line">            <span class="comment">//默认设置延时5秒后进行集群同步</span></span><br><span class="line">            DistroDelayTask newTask = <span class="keyword">new</span> DistroDelayTask(newKey, action, globalConfig.getSyncRetryDelay());</span><br><span class="line">            distroTaskEngineHolder.getDelayTaskExecuteEngine().addTask(newKey, newTask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="v1-ns-distro-checksum"><a href="#v1-ns-distro-checksum" class="headerlink" title="/v1/ns/distro/checksum"></a>/v1/ns/distro/checksum</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/distro&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PutMapping(&quot;/checksum&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">syncChecksum</span><span class="params">(<span class="meta">@RequestParam</span> String source, <span class="meta">@RequestBody</span> Map&lt;String, String&gt; dataMap)</span> </span>&#123;</span><br><span class="line">        DistroHttpData distroHttpData = <span class="keyword">new</span> DistroHttpData(createDistroKey(source), dataMap);</span><br><span class="line">        distroProtocol.onVerify(distroHttpData);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onReceive</span><span class="params">(DistroData distroData)</span> </span>&#123;</span><br><span class="line">        String resourceType = distroData.getDistroKey().getResourceType();</span><br><span class="line">        DistroDataProcessor dataProcessor = distroComponentHolder.findDataProcessor(resourceType);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == dataProcessor) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Can&#x27;t find data process for received data &#123;&#125;&quot;</span>, resourceType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataProcessor.processData(distroData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title">EphemeralConsistencyService</span>, <span class="title">DistroDataProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processVerifyData</span><span class="params">(DistroData distroData)</span> </span>&#123;</span><br><span class="line">        DistroHttpData distroHttpData = (DistroHttpData) distroData;</span><br><span class="line">        <span class="comment">//源Server地址</span></span><br><span class="line">        String sourceServer = distroData.getDistroKey().getResourceKey();</span><br><span class="line">        <span class="comment">//Datum checksum</span></span><br><span class="line">        Map&lt;String, String&gt; verifyData = (Map&lt;String, String&gt;) distroHttpData.getDeserializedContent();</span><br><span class="line">        onReceiveChecksums(verifyData, sourceServer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check sum when receive checksums request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> checksumMap map of checksum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server      source server request checksum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveChecksums</span><span class="params">(Map&lt;String, String&gt; checksumMap, String server)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (syncChecksumTasks.containsKey(server)) &#123;</span><br><span class="line">            <span class="comment">// Already in process of this server:</span></span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;sync checksum task already in process with &#123;&#125;&quot;</span>, server);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        syncChecksumTasks.put(server, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; toUpdateKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;String&gt; toRemoveKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : checksumMap.entrySet()) &#123;</span><br><span class="line">                <span class="comment">//不应该处理属于当前Server处理的key</span></span><br><span class="line">                <span class="keyword">if</span> (distroMapper.responsible(KeyBuilder.getServiceName(entry.getKey()))) &#123;</span><br><span class="line">                    <span class="comment">// this key should not be sent from remote server:</span></span><br><span class="line">                    Loggers.DISTRO.error(<span class="string">&quot;receive responsible key timestamp of &quot;</span> + entry.getKey() + <span class="string">&quot; from &quot;</span> + server);</span><br><span class="line">                    <span class="comment">// abort the procedure:</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//本地 dataStore 不含这个key</span></span><br><span class="line">                <span class="comment">//本地 dataStore 对应 key 没有实例数据</span></span><br><span class="line">                <span class="comment">//本地 dataStore 对应 key 的实例数据发送变化</span></span><br><span class="line">                <span class="keyword">if</span> (!dataStore.contains(entry.getKey()) || dataStore.get(entry.getKey()).value == <span class="keyword">null</span> || !dataStore</span><br><span class="line">                        .get(entry.getKey()).value.getChecksum().equals(entry.getValue())) &#123;</span><br><span class="line">                    toUpdateKeys.add(entry.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String key : dataStore.keys()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!server.equals(distroMapper.mapSrv(KeyBuilder.getServiceName(key)))) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找到属于源 server 的 key</span></span><br><span class="line">                <span class="comment">//key 不在 checksumMap，说明源数据删除了</span></span><br><span class="line">                <span class="keyword">if</span> (!checksumMap.containsKey(key)) &#123;</span><br><span class="line">                    toRemoveKeys.add(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Loggers.DISTRO</span><br><span class="line">                    .info(<span class="string">&quot;to remove keys: &#123;&#125;, to update keys: &#123;&#125;, source: &#123;&#125;&quot;</span>, toRemoveKeys, toUpdateKeys, server);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String key : toRemoveKeys) &#123;</span><br><span class="line">                <span class="comment">//当前Server也要跟着删除</span></span><br><span class="line">                onRemove(key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//没有数据更新</span></span><br><span class="line">            <span class="keyword">if</span> (toUpdateKeys.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DistroHttpCombinedKey distroKey = <span class="keyword">new</span> DistroHttpCombinedKey(KeyBuilder.INSTANCE_LIST_KEY_PREFIX,</span><br><span class="line">                        server);</span><br><span class="line">                distroKey.getActualResourceTypes().addAll(toUpdateKeys);</span><br><span class="line">                DistroData remoteData = distroProtocol.queryFromRemote(distroKey);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != remoteData) &#123;</span><br><span class="line">                    processData(remoteData.getContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.DISTRO.error(<span class="string">&quot;get data from &quot;</span> + server + <span class="string">&quot; failed!&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Remove this &#x27;in process&#x27; flag:</span></span><br><span class="line">            syncChecksumTasks.remove(server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistroData <span class="title">queryFromRemote</span><span class="params">(DistroKey distroKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == distroKey.getTargetServer()) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Can&#x27;t query data from empty server&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String resourceType = distroKey.getResourceType();</span><br><span class="line">        DistroTransportAgent transportAgent = distroComponentHolder.findTransportAgent(resourceType);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == transportAgent) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Can&#x27;t find transport agent for key &#123;&#125;&quot;</span>, resourceType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transportAgent.getData(distroKey, distroKey.getTargetServer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroHttpAgent</span> <span class="keyword">implements</span> <span class="title">DistroTransportAgent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistroData <span class="title">getData</span><span class="params">(DistroKey key, String targetServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; toUpdateKeys = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">instanceof</span> DistroHttpCombinedKey) &#123;</span><br><span class="line">                toUpdateKeys = ((DistroHttpCombinedKey) key).getActualResourceTypes();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                toUpdateKeys = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">                toUpdateKeys.add(key.getResourceKey());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//get 请求 /v1/ns/distro/datum 获取数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] queriedData = NamingProxy.getData(toUpdateKeys, key.getTargetServer());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DistroData(key, queriedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DistroException(String.format(<span class="string">&quot;Get data from %s failed.&quot;</span>, key.getTargetServer()), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title">EphemeralConsistencyService</span>, <span class="title">DistroDataProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//data = 从源 Server 获取 Datum 数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Map&lt;String, Datum&lt;Instances&gt;&gt; datumMap = serializer.deserializeMap(data, Instances.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Datum&lt;Instances&gt;&gt; entry : datumMap.entrySet()) &#123;</span><br><span class="line">                <span class="comment">//把新 Datum 数据 存入 dataStore</span></span><br><span class="line">                dataStore.put(entry.getKey(), entry.getValue());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//listeners 不包含 key</span></span><br><span class="line">                <span class="keyword">if</span> (!listeners.containsKey(entry.getKey())) &#123;</span><br><span class="line">                    <span class="comment">// pretty sure the service not exist:</span></span><br><span class="line">                    <span class="keyword">if</span> (switchDomain.isDefaultInstanceEphemeral()) &#123;</span><br><span class="line">                        <span class="comment">// create empty service</span></span><br><span class="line">                        <span class="comment">//创建空 service</span></span><br><span class="line">                        Loggers.DISTRO.info(<span class="string">&quot;creating service &#123;&#125;&quot;</span>, entry.getKey());</span><br><span class="line">                        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">                        String serviceName = KeyBuilder.getServiceName(entry.getKey());</span><br><span class="line">                        String namespaceId = KeyBuilder.getNamespace(entry.getKey());</span><br><span class="line">                        service.setName(serviceName);</span><br><span class="line">                        service.setNamespaceId(namespaceId);</span><br><span class="line">                        service.setGroupName(Constants.DEFAULT_GROUP);</span><br><span class="line">                        <span class="comment">// now validate the service. if failed, exception will be thrown</span></span><br><span class="line">                        service.setLastModifiedMillis(System.currentTimeMillis());</span><br><span class="line">                        service.recalculateChecksum();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// The Listener corresponding to the key value must not be empty</span></span><br><span class="line">                        <span class="comment">//与键值对应的监听器不能为空</span></span><br><span class="line">                        RecordListener listener = listeners.get(KeyBuilder.SERVICE_META_KEY_PREFIX).peek();</span><br><span class="line">                        <span class="keyword">if</span> (Objects.isNull(listener)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//这里 listener 是 ServiceManager</span></span><br><span class="line">                        listener.onChange(KeyBuilder.buildServiceMetaKey(namespaceId, serviceName), service);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Datum&lt;Instances&gt;&gt; entry : datumMap.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不应该存在</span></span><br><span class="line">                <span class="keyword">if</span> (!listeners.containsKey(entry.getKey())) &#123;</span><br><span class="line">                    <span class="comment">// Should not happen:</span></span><br><span class="line">                    Loggers.DISTRO.warn(<span class="string">&quot;listener of &#123;&#125; not found.&quot;</span>, entry.getKey());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RecordListener listener : listeners.get(entry.getKey())) &#123;</span><br><span class="line">                        <span class="comment">//listener 就是 Service</span></span><br><span class="line">                        listener.onChange(entry.getKey(), entry.getValue().value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Loggers.DISTRO.error(<span class="string">&quot;[NACOS-DISTRO] error while execute listener of key: &#123;&#125;&quot;</span>, entry.getKey(), e);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Update data store if listener executed successfully:</span></span><br><span class="line">                dataStore.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GET-v1-ns-distro-datum"><a href="#GET-v1-ns-distro-datum" class="headerlink" title="GET /v1/ns/distro/datum"></a>GET /v1/ns/distro/datum</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/distro&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/datum&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">get</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        JsonNode bodyNode = JacksonUtils.toObj(body);</span><br><span class="line">        String keys = bodyNode.get(<span class="string">&quot;keys&quot;</span>).asText();</span><br><span class="line">        String keySplitter = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        DistroHttpCombinedKey distroKey = <span class="keyword">new</span> DistroHttpCombinedKey(KeyBuilder.INSTANCE_LIST_KEY_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keys.split(keySplitter)) &#123;</span><br><span class="line">            distroKey.getActualResourceTypes().add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        DistroData distroData = distroProtocol.onQuery(distroKey);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(distroData.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistroData <span class="title">onQuery</span><span class="params">(DistroKey distroKey)</span> </span>&#123;</span><br><span class="line">        String resourceType = distroKey.getResourceType();</span><br><span class="line">        DistroDataStorage distroDataStorage = distroComponentHolder.findDataStorage(resourceType);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == distroDataStorage) &#123;</span><br><span class="line">            Loggers.DISTRO.warn(<span class="string">&quot;[DISTRO] Can&#x27;t find data storage for received key &#123;&#125;&quot;</span>, resourceType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DistroData(distroKey, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> distroDataStorage.getDistroData(distroKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroDataStorageImpl</span> <span class="keyword">implements</span> <span class="title">DistroDataStorage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistroData <span class="title">getDistroData</span><span class="params">(DistroKey distroKey)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Datum&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (distroKey <span class="keyword">instanceof</span> DistroHttpCombinedKey) &#123;</span><br><span class="line">            <span class="comment">//批量获取 Datum</span></span><br><span class="line">            result = dataStore.batchGet(((DistroHttpCombinedKey) distroKey).getActualResourceTypes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Datum datum = dataStore.get(distroKey.getResourceKey());</span><br><span class="line">            result.put(distroKey.getResourceKey(), datum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] dataContent = ApplicationUtils.getBean(Serializer.class).serialize(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DistroData(distroKey, dataContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PUT-v1-ns-distro-datum"><a href="#PUT-v1-ns-distro-datum" class="headerlink" title="PUT /v1/ns/distro/datum"></a>PUT /v1/ns/distro/datum</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/distro&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PutMapping(&quot;/datum&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">onSyncDatum</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Datum&lt;Instances&gt;&gt; dataMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dataMap.isEmpty()) &#123;</span><br><span class="line">            Loggers.DISTRO.error(<span class="string">&quot;[onSync] receive empty entity!&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NacosException(NacosException.INVALID_PARAM, <span class="string">&quot;receive empty entity!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Datum&lt;Instances&gt;&gt; entry : dataMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (KeyBuilder.matchEphemeralInstanceListKey(entry.getKey())) &#123;</span><br><span class="line">                String namespaceId = KeyBuilder.getNamespace(entry.getKey());</span><br><span class="line">                String serviceName = KeyBuilder.getServiceName(entry.getKey());</span><br><span class="line">                <span class="keyword">if</span> (!serviceManager.containService(namespaceId, serviceName) &amp;&amp; switchDomain</span><br><span class="line">                        .isDefaultInstanceEphemeral()) &#123;</span><br><span class="line">                    <span class="comment">//如果没有，创建新 Service</span></span><br><span class="line">                    serviceManager.createEmptyService(namespaceId, serviceName, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                DistroHttpData distroHttpData = <span class="keyword">new</span> DistroHttpData(createDistroKey(entry.getKey()), entry.getValue());</span><br><span class="line">                distroProtocol.onReceive(distroHttpData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title">EphemeralConsistencyService</span>, <span class="title">DistroDataProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processData</span><span class="params">(DistroData distroData)</span> </span>&#123;</span><br><span class="line">        DistroHttpData distroHttpData = (DistroHttpData) distroData;</span><br><span class="line">        Datum&lt;Instances&gt; datum = (Datum&lt;Instances&gt;) distroHttpData.getDeserializedContent();</span><br><span class="line">        onPut(datum.key, datum.value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/02/10/nacos-5/nacos-client-server.png"></p><p>client，可以去任意Server发心跳或者注册，因为到达Server会根据服务名计算hash，如果不是自己Server处理就会转发，最后只会是同一个Server处理</p><p>client,可以去任意Server订阅服务列表，因为 Server 和 Server 之间通过定时任务广播复制服务列表，服务列表最终一致性</p><p>client订阅的服务列表本地缓存每10秒刷新一次，这是拉模式，如果在10秒内有实例表更新了，Server 会推送新的数据过来，这是推模式</p><p>client 请求 Server 如果只填了一个 server-ip 会重试3次,如果填了多个，会重试所有你填的 server-ip</p><p>todo 有时间重新画一下上面那副大图</p><p>todo 持久化实例使用了cp模式，用了 sofajraft 实现的，暂时没有时间看</p><p>todo 配置中心</p><p>todo 和安全有关</p><p>todo istio</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nacos 版本 1.4.1&lt;/p&gt;
&lt;h1 id=&quot;DistroProtocol&quot;&gt;&lt;a href=&quot;#DistroProtocol&quot; class=&quot;headerlink&quot; title=&quot;DistroProtocol&quot;&gt;&lt;/a&gt;DistroProtocol&lt;/h1&gt;&lt;fi</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="nacos" scheme="https://xxnjdg.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>nacos注册中心集群笔记1</title>
    <link href="https://xxnjdg.github.io/2021/02/06/nacos-4/"/>
    <id>https://xxnjdg.github.io/2021/02/06/nacos-4/</id>
    <published>2021-02-06T10:47:36.000Z</published>
    <updated>2021-02-14T10:33:41.210Z</updated>
    
    <content type="html"><![CDATA[<p>nacos 版本 1.4.1</p><h1 id="ServerMemberManager"><a href="#ServerMemberManager" class="headerlink" title="ServerMemberManager"></a>ServerMemberManager</h1><p>集群管理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;serverMemberManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMemberManager</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NacosAsyncRestTemplate asyncRestTemplate = HttpClientBeanHolder</span><br><span class="line">            .getNacosAsyncRestTemplate(Loggers.CORE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cluster node list.</span></span><br><span class="line"><span class="comment">     * 集群节点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ConcurrentSkipListMap&lt;String, Member&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Is this node in the cluster list.</span></span><br><span class="line"><span class="comment">     * 当前节点是否在集群中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isInIpList = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * port.</span></span><br><span class="line"><span class="comment">     * 当前节点端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Address information for the local node.</span></span><br><span class="line"><span class="comment">     * 当前节点地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String localAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Addressing pattern instances.</span></span><br><span class="line"><span class="comment">     * 发现集群其他节点的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MemberLookup lookup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * self member obj.</span></span><br><span class="line"><span class="comment">     * 本机 member</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Member self;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * here is always the node information of the &quot;UP&quot; state.</span></span><br><span class="line"><span class="comment">     * 节点都是UP状态列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Set&lt;String&gt; memberAddressInfos = <span class="keyword">new</span> ConcurrentHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Broadcast this node element information task.</span></span><br><span class="line"><span class="comment">     * 广播此节点元素信息任务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberInfoReportTask infoReportTask = <span class="keyword">new</span> MemberInfoReportTask();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerMemberManager</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverList = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">        EnvUtil.setContextPath(servletContext.getContextPath());</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        Loggers.CORE.info(<span class="string">&quot;Nacos-related cluster resource initialization&quot;</span>);</span><br><span class="line">        <span class="comment">//初始化参数</span></span><br><span class="line">        <span class="keyword">this</span>.port = EnvUtil.getProperty(<span class="string">&quot;server.port&quot;</span>, Integer.class, <span class="number">8848</span>);</span><br><span class="line">        <span class="keyword">this</span>.localAddress = InetUtils.getSelfIP() + <span class="string">&quot;:&quot;</span> + port;</span><br><span class="line">        <span class="keyword">this</span>.self = MemberUtil.singleParse(<span class="keyword">this</span>.localAddress);</span><br><span class="line">        <span class="keyword">this</span>.self.setExtendVal(MemberMetaDataConstants.VERSION, VersionUtils.version);</span><br><span class="line">        serverList.put(self.getAddress(), self);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register NodeChangeEvent publisher to NotifyManager</span></span><br><span class="line">        registerClusterEvent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initializes the lookup mode</span></span><br><span class="line">        initAndStartLookup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (serverList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NacosException(NacosException.SERVER_ERROR, <span class="string">&quot;cannot get serverlist, so exit.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Loggers.CORE.info(<span class="string">&quot;The cluster resource is initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAndStartLookup</span><span class="params">()</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="comment">//创建 MemberLookup</span></span><br><span class="line">        <span class="keyword">this</span>.lookup = LookupFactory.createLookUp(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.lookup.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LookupFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOOKUP_MODE_TYPE = <span class="string">&quot;nacos.core.member.lookup.type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;checkstyle:StaticVariableName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MemberLookup LOOK_UP = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LookupType currentLookupType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the target addressing pattern.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memberManager &#123;<span class="doctag">@link</span> ServerMemberManager&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> MemberLookup&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException NacosException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemberLookup <span class="title">createLookUp</span><span class="params">(ServerMemberManager memberManager)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!EnvUtil.getStandaloneMode()) &#123;</span><br><span class="line">            <span class="comment">//从 nacos.core.member.lookup.type 读取集群寻址模式</span></span><br><span class="line">            String lookupType = EnvUtil.getProperty(LOOKUP_MODE_TYPE);</span><br><span class="line">            <span class="comment">//默认 file，可以选择 address-server</span></span><br><span class="line">            LookupType type = chooseLookup(lookupType);</span><br><span class="line">            <span class="comment">//创建 MemberLookup</span></span><br><span class="line">            LOOK_UP = find(type);</span><br><span class="line">            currentLookupType = type;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOOK_UP = <span class="keyword">new</span> StandaloneMemberLookup();</span><br><span class="line">        &#125;</span><br><span class="line">        LOOK_UP.injectMemberManager(memberManager);</span><br><span class="line">        Loggers.CLUSTER.info(<span class="string">&quot;Current addressing mode selection : &#123;&#125;&quot;</span>, LOOK_UP.getClass().getSimpleName());</span><br><span class="line">        <span class="keyword">return</span> LOOK_UP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FileConfigMemberLookup</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileConfigMemberLookup</span> <span class="keyword">extends</span> <span class="title">AbstractMemberLookup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileWatcher watcher = <span class="keyword">new</span> FileWatcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(FileChangeEvent event)</span> </span>&#123;</span><br><span class="line">            readClusterConfFromDisk();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interest</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.contains(context, <span class="string">&quot;cluster.conf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            readClusterConfFromDisk();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Use the inotify mechanism to monitor file changes and automatically</span></span><br><span class="line">            <span class="comment">// trigger the reading of cluster.conf</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//监听 cluster.conf 是否改变</span></span><br><span class="line">                WatchFileCenter.registerWatcher(EnvUtil.getConfPath(), watcher);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Loggers.CLUSTER.error(<span class="string">&quot;An exception occurred in the launch file monitor : &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readClusterConfFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;Member&gt; tmpMembers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取集群地址</span></span><br><span class="line">            List&lt;String&gt; tmp = EnvUtil.readClusterConf();</span><br><span class="line">            <span class="comment">//封装成 Member</span></span><br><span class="line">            tmpMembers = MemberUtil.readServerConf(tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Loggers.CLUSTER</span><br><span class="line">                    .error(<span class="string">&quot;nacos-XXXX [serverlist] failed to get serverlist from disk!, error : &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        afterLookup(tmpMembers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMemberLookup</span> <span class="keyword">implements</span> <span class="title">MemberLookup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ServerMemberManager memberManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AtomicBoolean start = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMemberManager</span><span class="params">(ServerMemberManager memberManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memberManager = memberManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLookup</span><span class="params">(Collection&lt;Member&gt; members)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最后调用了 memberChange</span></span><br><span class="line">        <span class="keyword">this</span>.memberManager.memberChange(members);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;serverMemberManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMemberManager</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">memberChange</span><span class="params">(Collection&lt;Member&gt; members)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (members == <span class="keyword">null</span> || members.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isContainSelfIp = members.stream()</span><br><span class="line">                .anyMatch(ipPortTmp -&gt; Objects.equals(localAddress, ipPortTmp.getAddress()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isContainSelfIp) &#123;</span><br><span class="line">            isInIpList = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            isInIpList = <span class="keyword">false</span>;</span><br><span class="line">            members.add(<span class="keyword">this</span>.self);</span><br><span class="line">            Loggers.CLUSTER.warn(<span class="string">&quot;[serverlist] self ip &#123;&#125; not in serverlist &#123;&#125;&quot;</span>, self, members);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the number of old and new clusters is different, the cluster information</span></span><br><span class="line">        <span class="comment">// must have changed; if the number of clusters is the same, then compare whether</span></span><br><span class="line">        <span class="comment">// there is a difference; if there is a difference, then the cluster node changes</span></span><br><span class="line">        <span class="comment">// are involved and all recipients need to be notified of the node change event</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> hasChange = members.size() != serverList.size();</span><br><span class="line">        ConcurrentSkipListMap&lt;String, Member&gt; tmpMap = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; tmpAddressInfo = <span class="keyword">new</span> ConcurrentHashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Member member : members) &#123;</span><br><span class="line">            <span class="keyword">final</span> String address = member.getAddress();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!serverList.containsKey(address)) &#123;</span><br><span class="line">                hasChange = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ensure that the node is created only once</span></span><br><span class="line">            tmpMap.put(address, member);</span><br><span class="line">            <span class="keyword">if</span> (NodeState.UP.equals(member.getState())) &#123;</span><br><span class="line">                tmpAddressInfo.add(address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新 serverList memberAddressInfos</span></span><br><span class="line">        serverList = tmpMap;</span><br><span class="line">        memberAddressInfos = tmpAddressInfo;</span><br><span class="line"></span><br><span class="line">        Collection&lt;Member&gt; finalMembers = allMembers();</span><br><span class="line"></span><br><span class="line">        Loggers.CLUSTER.warn(<span class="string">&quot;[serverlist] updated to : &#123;&#125;&quot;</span>, finalMembers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Persist the current cluster node information to cluster.conf</span></span><br><span class="line">        <span class="comment">// &lt;important&gt; need to put the event publication into a synchronized block to ensure</span></span><br><span class="line">        <span class="comment">// that the event publication is sequential</span></span><br><span class="line">        <span class="comment">// 将当前集群节点信息持久化为cluster.conf &lt;important&gt;需要将事件发布放入同步块中，以确保事件发布是连续的</span></span><br><span class="line">        <span class="comment">//如果节点发生了变化</span></span><br><span class="line">        <span class="keyword">if</span> (hasChange) &#123;</span><br><span class="line">            <span class="comment">//同步到文件</span></span><br><span class="line">            MemberUtil.syncToFile(finalMembers);</span><br><span class="line">            Event event = MembersChangeEvent.builder().members(finalMembers).build();</span><br><span class="line">            <span class="comment">//发送事件</span></span><br><span class="line">            NotifyCenter.publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hasChange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要继承 MemberChangeListener 类就能接受 MembersChangeEvent 事件，以下是 MemberChangeListener 子类</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ProtocolManager</span><br><span class="line">ServerListManager</span><br><span class="line">RaftPeerSet</span><br><span class="line">DistroMapper</span><br></pre></td></tr></table></figure><p>RaftPeerSet 和 ServerListManager 准备废弃了，不看</p><p>todo ProtocolManager 和持久化实例有关</p><p>重点看 DistroMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;distroMapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroMapper</span> <span class="keyword">extends</span> <span class="title">MemberChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List of service nodes, you must ensure that the order of healthyList is the same for all nodes.</span></span><br><span class="line"><span class="comment">     * 服务节点列表，必须确保所有节点的healthyList顺序相同。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;String&gt; healthyList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwitchDomain switchDomain;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerMemberManager memberManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistroMapper</span><span class="params">(ServerMemberManager memberManager, SwitchDomain switchDomain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memberManager = memberManager;</span><br><span class="line">        <span class="keyword">this</span>.switchDomain = switchDomain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHealthyList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> healthyList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * init server list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NotifyCenter.registerSubscriber(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.healthyList = MemberUtil.simpleMembers(memberManager.allMembers());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MembersChangeEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Here, the node list must be sorted to ensure that all nacos-server&#x27;s</span></span><br><span class="line">        <span class="comment">// node list is in the same order</span></span><br><span class="line">        <span class="comment">//过滤出是 NodeState.UP 或 NodeState.SUSPICIOUS 状态的节点，原因在 ServerMemberManager 定时任务简介</span></span><br><span class="line">        List&lt;String&gt; list = MemberUtil.simpleMembers(MemberUtil.selectTargetMembers(event.getMembers(),</span><br><span class="line">                member -&gt; NodeState.UP.equals(member.getState()) || NodeState.SUSPICIOUS.equals(member.getState())));</span><br><span class="line">        <span class="comment">//必须排序，确保所有服务节点列表顺序都是一样，原因后面 DistroFilter 讲解</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        Collection&lt;String&gt; old = healthyList;</span><br><span class="line">        healthyList = Collections.unmodifiableList(list);</span><br><span class="line">        Loggers.SRV_LOG.info(<span class="string">&quot;[NACOS-DISTRO] healthy server list changed, old: &#123;&#125;, new: &#123;&#125;&quot;</span>, old, healthyList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>com.alibaba.nacos.core.cluster.lookup.FileConfigMemberLookup#start最后会监听 cluster.conf 是否改变， 如果修改了，会重新执行 com.alibaba.nacos.core.cluster.lookup.FileConfigMemberLookup#readClusterConfFromDisk</p><p>这些逻辑可以参考 com.alibaba.nacos.sys.file.WatchFileCenter#registerWatcher</p><p>这里有个问题就是，修改 cluster.conf 只有本地Server知道，其他Server是不知道的，所以其他Server也要一同修改</p><h2 id="ServerMemberManager-定时任务"><a href="#ServerMemberManager-定时任务" class="headerlink" title="ServerMemberManager 定时任务"></a>ServerMemberManager 定时任务</h2><p>com.alibaba.nacos.core.cluster.ServerMemberManager 继承了 ApplicationListener<WebServerInitializedEvent> 初始化会接受事件，接下来我们看看代码</WebServerInitializedEvent></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;serverMemberManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMemberManager</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        getSelf().setState(NodeState.UP);</span><br><span class="line">        <span class="keyword">if</span> (!EnvUtil.getStandaloneMode()) &#123;</span><br><span class="line">            <span class="comment">//启动定时任务每2秒循环请求集群节点，主动检测其他节点是否能通信</span></span><br><span class="line">            GlobalExecutor.scheduleByCommon(<span class="keyword">this</span>.infoReportTask, <span class="number">5_000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置 端口和地址</span></span><br><span class="line">        EnvUtil.setPort(event.getWebServer().getPort());</span><br><span class="line">        EnvUtil.setLocalAddress(<span class="keyword">this</span>.localAddress);</span><br><span class="line">        Loggers.CLUSTER.info(<span class="string">&quot;This node is ready to provide external services&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MemberInfoReportTask</span> <span class="keyword">extends</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> GenericType&lt;RestResult&lt;String&gt;&gt; reference = <span class="keyword">new</span> GenericType&lt;RestResult&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取除本Server其他节点</span></span><br><span class="line">            List&lt;Member&gt; members = ServerMemberManager.<span class="keyword">this</span>.allMembersWithoutSelf();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (members.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//轮询节点</span></span><br><span class="line">            <span class="keyword">this</span>.cursor = (<span class="keyword">this</span>.cursor + <span class="number">1</span>) % members.size();</span><br><span class="line">            Member target = members.get(cursor);</span><br><span class="line"></span><br><span class="line">            Loggers.CLUSTER.debug(<span class="string">&quot;report the metadata to the node : &#123;&#125;&quot;</span>, target.getAddress());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String url = HttpUtils</span><br><span class="line">                    .buildUrl(<span class="keyword">false</span>, target.getAddress(), EnvUtil.getContextPath(), Commons.NACOS_CORE_CONTEXT,</span><br><span class="line">                            <span class="string">&quot;/cluster/report&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                asyncRestTemplate</span><br><span class="line">                        .post(url, Header.newInstance().addParam(Constants.NACOS_SERVER_HEADER, VersionUtils.version),</span><br><span class="line">                                Query.EMPTY, getSelf(), reference.getType(), <span class="keyword">new</span> Callback&lt;String&gt;() &#123;</span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(RestResult&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">                                        <span class="keyword">if</span> (result.getCode() == HttpStatus.NOT_IMPLEMENTED.value()</span><br><span class="line">                                                || result.getCode() == HttpStatus.NOT_FOUND.value()) &#123;</span><br><span class="line">                                            <span class="comment">//警告解释了</span></span><br><span class="line">                                            Loggers.CLUSTER</span><br><span class="line">                                                    .warn(<span class="string">&quot;&#123;&#125; version is too low, it is recommended to upgrade the version : &#123;&#125;&quot;</span>,</span><br><span class="line">                                                            target, VersionUtils.version);</span><br><span class="line">                                            <span class="keyword">return</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span> (result.ok()) &#123;</span><br><span class="line">                                            <span class="comment">//成功逻辑</span></span><br><span class="line">                                            MemberUtil.onSuccess(ServerMemberManager.<span class="keyword">this</span>, target);</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            Loggers.CLUSTER</span><br><span class="line">                                                    .warn(<span class="string">&quot;failed to report new info to target node : &#123;&#125;, result : &#123;&#125;&quot;</span>,</span><br><span class="line">                                                            target.getAddress(), result);</span><br><span class="line">                                            <span class="comment">//失败</span></span><br><span class="line">                                            MemberUtil.onFail(ServerMemberManager.<span class="keyword">this</span>, target);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                                        Loggers.CLUSTER</span><br><span class="line">                                                .error(<span class="string">&quot;failed to report new info to target node : &#123;&#125;, error : &#123;&#125;&quot;</span>,</span><br><span class="line">                                                        target.getAddress(),</span><br><span class="line">                                                        ExceptionUtil.getAllExceptionMsg(throwable));</span><br><span class="line">                                        <span class="comment">//失败</span></span><br><span class="line">                                        MemberUtil.onFail(ServerMemberManager.<span class="keyword">this</span>, target, throwable);</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                Loggers.CLUSTER.error(<span class="string">&quot;failed to report new info to target node : &#123;&#125;, error : &#123;&#125;&quot;</span>, target.getAddress(),</span><br><span class="line">                        ExceptionUtil.getAllExceptionMsg(ex));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//重新调度</span></span><br><span class="line">            GlobalExecutor.scheduleByCommon(<span class="keyword">this</span>, <span class="number">2_000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">final</span> ServerMemberManager manager, <span class="keyword">final</span> Member member)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功，证明被请求Server能够正常通信</span></span><br><span class="line">        <span class="keyword">final</span> NodeState old = member.getState();</span><br><span class="line">        <span class="comment">//设置被请求Server状态 NodeState.UP</span></span><br><span class="line">        manager.getMemberAddressInfos().add(member.getAddress());</span><br><span class="line">        member.setState(NodeState.UP);</span><br><span class="line">        member.setFailAccessCnt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(old, member.getState())) &#123;</span><br><span class="line">            <span class="comment">//如果状态不一致，发送事件</span></span><br><span class="line">            manager.notifyMemberChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">(<span class="keyword">final</span> ServerMemberManager manager, <span class="keyword">final</span> Member member, Throwable ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请求失败，被请求节点不能通信</span></span><br><span class="line">        <span class="comment">//移除被请求Server</span></span><br><span class="line">        manager.getMemberAddressInfos().remove(member.getAddress());</span><br><span class="line">        <span class="keyword">final</span> NodeState old = member.getState();</span><br><span class="line">        <span class="comment">//设置状态  NodeState.SUSPICIOUS</span></span><br><span class="line">        member.setState(NodeState.SUSPICIOUS);</span><br><span class="line">        <span class="comment">//失败次数加1</span></span><br><span class="line">        member.setFailAccessCnt(member.getFailAccessCnt() + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxFailAccessCnt = EnvUtil.getProperty(<span class="string">&quot;nacos.core.member.fail-access-cnt&quot;</span>, Integer.class, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the number of consecutive failures to access the target node reaches</span></span><br><span class="line">        <span class="comment">// a maximum, or the link request is rejected, the state is directly down</span></span><br><span class="line">        <span class="comment">//失败次数超过 maxFailAccessCnt 设置状态 NodeState.DOWN</span></span><br><span class="line">        <span class="keyword">if</span> (member.getFailAccessCnt() &gt; maxFailAccessCnt || StringUtils</span><br><span class="line">                .containsIgnoreCase(ex.getMessage(), TARGET_MEMBER_CONNECT_REFUSE_ERRMSG)) &#123;</span><br><span class="line">            member.setState(NodeState.DOWN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(old, member.getState())) &#123;</span><br><span class="line">            <span class="comment">//状态改变，发送事件</span></span><br><span class="line">            manager.notifyMemberChange();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DistroMapper 接受事件中，可以看到过滤出 NodeState.UP 或 NodeState.SUSPICIOUS 状态的节点，nacos 把 NodeState.SUSPICIOUS 也认为可以正常通信</p><p>我猜测这么做，可能考虑到网络抖动带来的短暂通信失败，不代表节点真的挂了</p><h1 id="DistroFilter"><a href="#DistroFilter" class="headerlink" title="DistroFilter"></a>DistroFilter</h1><p>com.alibaba.nacos.naming.web.NamingConfig 初始化 DistroFilter 过滤器</p><p>功能和一致性hash负载均衡很相似，先计算服务名hash值，在和集群列表长度求余获取请求服务的index，这样客户端随便请求Server每次请求都能请求到同一个服务</p><p>逻辑简单，不贴代码了</p><p><img src="/2021/02/06/nacos-4/nacos-distroFilter.png"></p><h1 id="ServiceManager"><a href="#ServiceManager" class="headerlink" title="ServiceManager"></a>ServiceManager</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Init service maneger.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GlobalExecutor.scheduleServiceReporter(<span class="keyword">new</span> ServiceReporter(), <span class="number">60000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">        GlobalExecutor.submitServiceUpdateManager(<span class="keyword">new</span> UpdatedServiceProcessor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (emptyServiceAutoClean) &#123;</span><br><span class="line"></span><br><span class="line">            Loggers.SRV_LOG.info(<span class="string">&quot;open empty service auto clean job, initialDelay : &#123;&#125; ms, period : &#123;&#125; ms&quot;</span>,</span><br><span class="line">                    cleanEmptyServiceDelay, cleanEmptyServicePeriod);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// delay 60s, period 20s;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// This task is not recommended to be performed frequently in order to avoid</span></span><br><span class="line">            <span class="comment">// the possibility that the service cache information may just be deleted</span></span><br><span class="line">            <span class="comment">// and then created due to the heartbeat mechanism</span></span><br><span class="line"></span><br><span class="line">            GlobalExecutor.scheduleServiceAutoClean(<span class="keyword">new</span> EmptyServiceAutoClean(), cleanEmptyServiceDelay,</span><br><span class="line">                    cleanEmptyServicePeriod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Loggers.SRV_LOG.info(<span class="string">&quot;listen for service meta change&quot;</span>);</span><br><span class="line">            consistencyService.listen(KeyBuilder.SERVICE_META_KEY_PREFIX, <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            Loggers.SRV_LOG.error(<span class="string">&quot;listen for service meta change failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及两个定时任务和1个线程</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>每60秒循环执行ServiceReporter,遍历当前服务所有Server,并计算相应 checksum ，把 checksum 封装成消息，广播发送给其他服务 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceReporter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Map(namespace, Set(group::serviceName)).</span></span><br><span class="line">                Map&lt;String, Set&lt;String&gt;&gt; allServiceNames = getAllServiceNames();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (allServiceNames.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String namespaceId : allServiceNames.keySet()) &#123;</span><br><span class="line"></span><br><span class="line">                    ServiceChecksum checksum = <span class="keyword">new</span> ServiceChecksum(namespaceId);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//遍历 serviceName</span></span><br><span class="line">                    <span class="keyword">for</span> (String serviceName : allServiceNames.get(namespaceId)) &#123;</span><br><span class="line">                        <span class="comment">//不属于当前节点serviceName不处理</span></span><br><span class="line">                        <span class="keyword">if</span> (!distroMapper.responsible(serviceName)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取 Service</span></span><br><span class="line">                        Service service = getService(namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (service == <span class="keyword">null</span> || service.isEmpty()) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//计算 Service Checksum</span></span><br><span class="line">                        service.recalculateChecksum();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//加入 checksum</span></span><br><span class="line">                        checksum.addItem(serviceName, service.getChecksum());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//构造 Message</span></span><br><span class="line">                    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置</span></span><br><span class="line">                    msg.setData(JacksonUtils.toJson(checksum));</span><br><span class="line"></span><br><span class="line">                    Collection&lt;Member&gt; sameSiteServers = memberManager.allMembers();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (sameSiteServers == <span class="keyword">null</span> || sameSiteServers.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//遍历其他 Server 节点</span></span><br><span class="line">                    <span class="keyword">for</span> (Member server : sameSiteServers) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (server.getAddress().equals(NetUtils.localServer())) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//发送</span></span><br><span class="line">                        synchronizer.send(server.getAddress(), msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.SRV_LOG.error(<span class="string">&quot;[DOMAIN-STATUS] Exception while sending service status&quot;</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                GlobalExecutor.scheduleServiceReporter(<span class="keyword">this</span>, switchDomain.getServiceStatusSynchronizationPeriodMillis(),</span><br><span class="line">                        TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceStatusSynchronizer</span> <span class="keyword">implements</span> <span class="title">Synchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> String serverIP, Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverIP == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        params.put(<span class="string">&quot;statuses&quot;</span>, msg.getData());</span><br><span class="line">        params.put(<span class="string">&quot;clientIP&quot;</span>, NetUtils.localServer());</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;http://&quot;</span> + serverIP + <span class="string">&quot;:&quot;</span> + EnvUtil.getPort() + EnvUtil.getContextPath()</span><br><span class="line">                + UtilsAndCommons.NACOS_NAMING_CONTEXT + <span class="string">&quot;/service/status&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IPUtil.containsPort(serverIP)) &#123;</span><br><span class="line">            url = <span class="string">&quot;http://&quot;</span> + serverIP + EnvUtil.getContextPath() + UtilsAndCommons.NACOS_NAMING_CONTEXT</span><br><span class="line">                    + <span class="string">&quot;/service/status&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Post 请求  /nacos/v1/ns/service/status</span></span><br><span class="line">            HttpClient.asyncHttpPostLarge(url, <span class="keyword">null</span>, JacksonUtils.toJson(params), <span class="keyword">new</span> Callback&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(RestResult&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!result.ok()) &#123;</span><br><span class="line">                        Loggers.SRV_LOG.warn(<span class="string">&quot;[STATUS-SYNCHRONIZE] failed to request serviceStatus, remote server: &#123;&#125;&quot;</span>,</span><br><span class="line">                                serverIP);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    Loggers.SRV_LOG.warn(<span class="string">&quot;[STATUS-SYNCHRONIZE] failed to request serviceStatus, remote server: &quot;</span> + serverIP, throwable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;[STATUS-SYNCHRONIZE] failed to request serviceStatus, remote server: &quot;</span> + serverIP, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>todo EmptyServiceAutoClean 好像和持久化实例有关</p><h2 id="开启线程"><a href="#开启线程" class="headerlink" title="开启线程"></a>开启线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingDeque&lt;ServiceKey&gt; toBeUpdatedServicesQueue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdatedServiceProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get changed service from other server asynchronously</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ServiceKey serviceKey = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        serviceKey = toBeUpdatedServicesQueue.take();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Loggers.EVT_LOG.error(<span class="string">&quot;[UPDATE-DOMAIN] Exception while taking item from LinkedBlockingDeque.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (serviceKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    GlobalExecutor.submitServiceUpdate(<span class="keyword">new</span> ServiceUpdater(serviceKey));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.EVT_LOG.error(<span class="string">&quot;[UPDATE-DOMAIN] Exception while update service: &#123;&#125;&quot;</span>, serviceKey, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceUpdater</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String namespaceId;</span><br><span class="line"></span><br><span class="line">        String serviceName;</span><br><span class="line"></span><br><span class="line">        String serverIP;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceUpdater</span><span class="params">(ServiceKey serviceKey)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.namespaceId = serviceKey.getNamespaceId();</span><br><span class="line">            <span class="keyword">this</span>.serviceName = serviceKey.getServiceName();</span><br><span class="line">            <span class="keyword">this</span>.serverIP = serviceKey.getServerIP();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                updatedHealthStatus(namespaceId, serviceName, serverIP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.SRV_LOG</span><br><span class="line">                        .warn(<span class="string">&quot;[DOMAIN-UPDATER] Exception while update service: &#123;&#125; from &#123;&#125;, error: &#123;&#125;&quot;</span>, serviceName,</span><br><span class="line">                                serverIP, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatedHealthStatus</span><span class="params">(String namespaceId, String serviceName, String serverIP)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向 源nacos Server ip 获取 serviceName 对应所有实例信息</span></span><br><span class="line">        Message msg = synchronizer.get(serverIP, UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName));</span><br><span class="line">        JsonNode serviceJson = JacksonUtils.toObj(msg.getData());</span><br><span class="line"></span><br><span class="line">        ArrayNode ipList = (ArrayNode) serviceJson.get(<span class="string">&quot;ips&quot;</span>);</span><br><span class="line">        <span class="comment">//key = 实例ip value = 健康状态</span></span><br><span class="line">        Map&lt;String, String&gt; ipsMap = <span class="keyword">new</span> HashMap&lt;&gt;(ipList.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ipList.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            String ip = ipList.get(i).asText();</span><br><span class="line">            String[] strings = ip.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            ipsMap.put(strings[<span class="number">0</span>], strings[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Service service = getService(namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Instance&gt; instances = service.allIPs();</span><br><span class="line">        <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//可能出现 ipsMap 比 instances 少，不会删除 instance，只会修改 instance 状态 </span></span><br><span class="line">            <span class="keyword">boolean</span> valid = Boolean.parseBoolean(ipsMap.get(instance.toIpAddr()));</span><br><span class="line">            <span class="keyword">if</span> (valid != instance.isHealthy()) &#123;</span><br><span class="line">                <span class="comment">//新实例和旧实例健康状态不一致</span></span><br><span class="line">                changed = <span class="keyword">true</span>;</span><br><span class="line">                instance.setHealthy(valid);</span><br><span class="line">                Loggers.EVT_LOG.info(<span class="string">&quot;&#123;&#125; &#123;SYNC&#125; IP-&#123;&#125; : &#123;&#125;:&#123;&#125;@&#123;&#125;&quot;</span>, serviceName,</span><br><span class="line">                        (instance.isHealthy() ? <span class="string">&quot;ENABLED&quot;</span> : <span class="string">&quot;DISABLED&quot;</span>), instance.getIp(), instance.getPort(),</span><br><span class="line">                        instance.getClusterName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            <span class="comment">//更新客户端服务发现实例信息</span></span><br><span class="line">            pushService.serviceChanged(service);</span><br><span class="line">            <span class="keyword">if</span> (Loggers.EVT_LOG.isDebugEnabled()) &#123;</span><br><span class="line">                StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                List&lt;Instance&gt; allIps = service.allIPs();</span><br><span class="line">                <span class="keyword">for</span> (Instance instance : allIps) &#123;</span><br><span class="line">                    stringBuilder.append(instance.toIpAddr()).append(<span class="string">&quot;_&quot;</span>).append(instance.isHealthy()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Loggers.EVT_LOG</span><br><span class="line">                        .debug(<span class="string">&quot;[HEALTH-STATUS-UPDATED] namespace: &#123;&#125;, service: &#123;&#125;, ips: &#123;&#125;&quot;</span>, service.getNamespaceId(),</span><br><span class="line">                                service.getName(), stringBuilder.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceStatusSynchronizer</span> <span class="keyword">implements</span> <span class="title">Synchronizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">get</span><span class="params">(String serverIP, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverIP == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        params.put(<span class="string">&quot;key&quot;</span>, key);</span><br><span class="line"></span><br><span class="line">        String result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Loggers.SRV_LOG.isDebugEnabled()) &#123;</span><br><span class="line">                Loggers.SRV_LOG.debug(<span class="string">&quot;[STATUS-SYNCHRONIZE] sync service status from: &#123;&#125;, service: &#123;&#125;&quot;</span>, serverIP, key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// get 请求 /v1/ns/instance/statuses</span></span><br><span class="line">            result = NamingProxy</span><br><span class="line">                    .reqApi(EnvUtil.getContextPath() + UtilsAndCommons.NACOS_NAMING_CONTEXT + <span class="string">&quot;/instance/&quot;</span></span><br><span class="line">                            + <span class="string">&quot;statuses&quot;</span>, params, serverIP);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;[STATUS-SYNCHRONIZE] Failed to get service status from &quot;</span> + serverIP, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.equals(StringUtils.EMPTY)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        msg.setData(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="POST-v1-ns-service-status"><a href="#POST-v1-ns-service-status" class="headerlink" title="POST /v1/ns/service/status"></a>POST /v1/ns/service/status</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serviceStatus</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String entity = IoUtils.toString(request.getInputStream(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String value = URLDecoder.decode(entity, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        JsonNode json = JacksonUtils.toObj(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//format: service1@@checksum@@@service2@@checksum</span></span><br><span class="line">        String statuses = json.get(<span class="string">&quot;statuses&quot;</span>).asText();</span><br><span class="line">        String serverIp = json.get(<span class="string">&quot;clientIP&quot;</span>).asText();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!memberManager.hasMember(serverIp)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NacosException(NacosException.INVALID_PARAM, <span class="string">&quot;ip: &quot;</span> + serverIp + <span class="string">&quot; is not in serverlist&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServiceManager.ServiceChecksum checksums = JacksonUtils</span><br><span class="line">                    .toObj(statuses, ServiceManager.ServiceChecksum.class);</span><br><span class="line">            <span class="keyword">if</span> (checksums == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Loggers.SRV_LOG.warn(<span class="string">&quot;[DOMAIN-STATUS] receive malformed data: null&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : checksums.serviceName2Checksum.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry == <span class="keyword">null</span> || StringUtils.isEmpty(entry.getKey()) || StringUtils.isEmpty(entry.getValue())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//服务名</span></span><br><span class="line">                String serviceName = entry.getKey();</span><br><span class="line">                <span class="comment">//对应 checksum</span></span><br><span class="line">                String checksum = entry.getValue();</span><br><span class="line">                Service service = serviceManager.getService(checksums.namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//其他nacos Server 的 service 没有同步过来</span></span><br><span class="line">                <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算 checksum</span></span><br><span class="line">                service.recalculateChecksum();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果不一样</span></span><br><span class="line">                <span class="keyword">if</span> (!checksum.equals(service.getChecksum())) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Loggers.SRV_LOG.isDebugEnabled()) &#123;</span><br><span class="line">                        Loggers.SRV_LOG.debug(<span class="string">&quot;checksum of &#123;&#125; is not consistent, remote: &#123;&#125;, checksum: &#123;&#125;, local: &#123;&#125;&quot;</span>,</span><br><span class="line">                                serviceName, serverIp, checksum, service.getChecksum());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//加入队列</span></span><br><span class="line">                    serviceManager.addUpdatedServiceToQueue(checksums.namespaceId, serviceName, serverIp, checksum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;[DOMAIN-STATUS] receive malformed data: &quot;</span> + statuses, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nacos 版本 1.4.1&lt;/p&gt;
&lt;h1 id=&quot;ServerMemberManager&quot;&gt;&lt;a href=&quot;#ServerMemberManager&quot; class=&quot;headerlink&quot; title=&quot;ServerMemberManager&quot;&gt;&lt;/a&gt;ServerM</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="nacos" scheme="https://xxnjdg.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>nacos注册中心服务发现笔记</title>
    <link href="https://xxnjdg.github.io/2021/02/04/nacos-3/"/>
    <id>https://xxnjdg.github.io/2021/02/04/nacos-3/</id>
    <published>2021-02-04T08:15:54.000Z</published>
    <updated>2021-02-14T10:33:41.231Z</updated>
    
    <content type="html"><![CDATA[<p>nacos 版本 1.4.1</p><h1 id="客户端服务发现"><a href="#客户端服务发现" class="headerlink" title="客户端服务发现"></a>客户端服务发现</h1><p>todo 目前没搞清楚哪里调用</p><p>搜索了下spring-cloud-starter-alibaba-nacos-discovery包会调用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListView&lt;String&gt; services = namingService().getServicesOfServer(1,Integer.MAX_VALUE, group);</span><br><span class="line">List&lt;Instance&gt; instances = namingService().selectInstances(serviceId, group,true);</span><br></pre></td></tr></table></figure><p>那就重点看下以下两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;PMD.ServiceOrDaoClassShouldEndWithImplRule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosNamingService</span> <span class="keyword">implements</span> <span class="title">NamingService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Instance&gt; <span class="title">selectInstances</span><span class="params">(String serviceName, String groupName, <span class="keyword">boolean</span> healthy)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> selectInstances(serviceName, groupName, healthy, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListView&lt;String&gt; <span class="title">getServicesOfServer</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, String groupName)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getServicesOfServer(pageNo, pageSize, groupName, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Instance&gt; <span class="title">selectInstances</span><span class="params">(String serviceName, String groupName, List&lt;String&gt; clusters, <span class="keyword">boolean</span> healthy,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">boolean</span> subscribe)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServiceInfo serviceInfo;</span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">    <span class="keyword">if</span> (subscribe) &#123;</span><br><span class="line">      serviceInfo = hostReactor.getServiceInfo(NamingUtils.getGroupedName(serviceName, groupName),</span><br><span class="line">              StringUtils.join(clusters, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      serviceInfo = hostReactor</span><br><span class="line">              .getServiceInfoDirectlyFromServer(NamingUtils.getGroupedName(serviceName, groupName),</span><br><span class="line">                      StringUtils.join(clusters, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> selectInstances(serviceInfo, healthy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/nacos/issues/3181">https://github.com/alibaba/nacos/issues/3181</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostReactor</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取服务信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInfo <span class="title">getServiceInfo</span><span class="params">(<span class="keyword">final</span> String serviceName, <span class="keyword">final</span> String clusters)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NAMING_LOGGER.debug(<span class="string">&quot;failover-mode: &quot;</span> + failoverReactor.isFailoverSwitch());</span><br><span class="line">        <span class="comment">//获取key</span></span><br><span class="line">        String key = ServiceInfo.getKey(serviceName, clusters);</span><br><span class="line">        <span class="comment">//默认为fasle</span></span><br><span class="line">        <span class="keyword">if</span> (failoverReactor.isFailoverSwitch()) &#123;</span><br><span class="line">            <span class="keyword">return</span> failoverReactor.getService(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取服务信息</span></span><br><span class="line">        ServiceInfo serviceObj = getServiceInfo0(serviceName, clusters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有发现服务信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == serviceObj) &#123;</span><br><span class="line">            serviceObj = <span class="keyword">new</span> ServiceInfo(serviceName, clusters);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先放一个空的 ServiceInfo </span></span><br><span class="line">            serviceInfoMap.put(serviceObj.getKey(), serviceObj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加入进 updatingMap，更新标志位</span></span><br><span class="line">            updatingMap.put(serviceName, <span class="keyword">new</span> Object());</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            updateServiceNow(serviceName, clusters);</span><br><span class="line">            updatingMap.remove(serviceName);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (updatingMap.containsKey(serviceName)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新中。。。</span></span><br><span class="line">            <span class="keyword">if</span> (UPDATE_HOLD_INTERVAL &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// hold a moment waiting for update finish</span></span><br><span class="line">                <span class="keyword">synchronized</span> (serviceObj) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//睡眠一会等待更新完成</span></span><br><span class="line">                        serviceObj.wait(UPDATE_HOLD_INTERVAL);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        NAMING_LOGGER</span><br><span class="line">                                .error(<span class="string">&quot;[getServiceInfo] serviceName:&quot;</span> + serviceName + <span class="string">&quot;, clusters:&quot;</span> + clusters, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启拉模式</span></span><br><span class="line">        scheduleUpdateIfAbsent(serviceName, clusters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceInfoMap.get(serviceObj.getKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateService</span><span class="params">(String serviceName, String clusters)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="comment">//获取旧 ServiceInfo</span></span><br><span class="line">        ServiceInfo oldService = getServiceInfo0(serviceName, clusters);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//get 请求 /nacos/v1/ns/instance/list</span></span><br><span class="line">            String result = serverProxy.queryList(serviceName, clusters, pushReceiver.getUdpPort(), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(result)) &#123;</span><br><span class="line">                processServiceJson(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (oldService) &#123;</span><br><span class="line">                    <span class="comment">//唤醒等待的服务</span></span><br><span class="line">                    oldService.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新 serviceInfo</span></span><br><span class="line">    <span class="comment">//发送 InstancesChangeEvent 时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInfo <span class="title">processServiceJson</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新数据</span></span><br><span class="line">        ServiceInfo serviceInfo = JacksonUtils.toObj(json, ServiceInfo.class);</span><br><span class="line">        <span class="comment">//旧数据</span></span><br><span class="line">        ServiceInfo oldService = serviceInfoMap.get(serviceInfo.getKey());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pushEmptyProtection &amp;&amp; !serviceInfo.validate()) &#123;</span><br><span class="line">            <span class="comment">//empty or error push, just ignore</span></span><br><span class="line">            <span class="keyword">return</span> oldService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldService != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (oldService.getLastRefTime() &gt; serviceInfo.getLastRefTime()) &#123;</span><br><span class="line">                NAMING_LOGGER.warn(<span class="string">&quot;out of date data received, old-t: &quot;</span> + oldService.getLastRefTime() + <span class="string">&quot;, new-t: &quot;</span></span><br><span class="line">                        + serviceInfo.getLastRefTime());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//put 进新数据</span></span><br><span class="line">            serviceInfoMap.put(serviceInfo.getKey(), serviceInfo);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Instance&gt; oldHostMap = <span class="keyword">new</span> HashMap&lt;String, Instance&gt;(oldService.getHosts().size());</span><br><span class="line">            <span class="keyword">for</span> (Instance host : oldService.getHosts()) &#123;</span><br><span class="line">                oldHostMap.put(host.toInetAddr(), host);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Instance&gt; newHostMap = <span class="keyword">new</span> HashMap&lt;String, Instance&gt;(serviceInfo.getHosts().size());</span><br><span class="line">            <span class="keyword">for</span> (Instance host : serviceInfo.getHosts()) &#123;</span><br><span class="line">                newHostMap.put(host.toInetAddr(), host);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改数组</span></span><br><span class="line">            Set&lt;Instance&gt; modHosts = <span class="keyword">new</span> HashSet&lt;Instance&gt;();</span><br><span class="line">            <span class="comment">//新增数组</span></span><br><span class="line">            Set&lt;Instance&gt; newHosts = <span class="keyword">new</span> HashSet&lt;Instance&gt;();</span><br><span class="line">            <span class="comment">//删除数组</span></span><br><span class="line">            Set&lt;Instance&gt; remvHosts = <span class="keyword">new</span> HashSet&lt;Instance&gt;();</span><br><span class="line"></span><br><span class="line">            List&lt;Map.Entry&lt;String, Instance&gt;&gt; newServiceHosts = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, Instance&gt;&gt;(</span><br><span class="line">                    newHostMap.entrySet());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Instance&gt; entry : newServiceHosts) &#123;</span><br><span class="line">                Instance host = entry.getValue();</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (oldHostMap.containsKey(key) &amp;&amp; !StringUtils</span><br><span class="line">                        .equals(host.toString(), oldHostMap.get(key).toString())) &#123;</span><br><span class="line">                    modHosts.add(host);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!oldHostMap.containsKey(key)) &#123;</span><br><span class="line">                    newHosts.add(host);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Instance&gt; entry : oldHostMap.entrySet()) &#123;</span><br><span class="line">                Instance host = entry.getValue();</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (newHostMap.containsKey(key)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!newHostMap.containsKey(key)) &#123;</span><br><span class="line">                    remvHosts.add(host);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newHosts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                changed = <span class="keyword">true</span>;</span><br><span class="line">                NAMING_LOGGER.info(<span class="string">&quot;new ips(&quot;</span> + newHosts.size() + <span class="string">&quot;) service: &quot;</span> + serviceInfo.getKey() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">                        + JacksonUtils.toJson(newHosts));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (remvHosts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                changed = <span class="keyword">true</span>;</span><br><span class="line">                NAMING_LOGGER.info(<span class="string">&quot;removed ips(&quot;</span> + remvHosts.size() + <span class="string">&quot;) service: &quot;</span> + serviceInfo.getKey() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">                        + JacksonUtils.toJson(remvHosts));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (modHosts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                changed = <span class="keyword">true</span>;</span><br><span class="line">                updateBeatInfo(modHosts);</span><br><span class="line">                NAMING_LOGGER.info(<span class="string">&quot;modified ips(&quot;</span> + modHosts.size() + <span class="string">&quot;) service: &quot;</span> + serviceInfo.getKey() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">                        + JacksonUtils.toJson(modHosts));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            serviceInfo.setJsonFromServer(json);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newHosts.size() &gt; <span class="number">0</span> || remvHosts.size() &gt; <span class="number">0</span> || modHosts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//数据变动了</span></span><br><span class="line">                <span class="comment">//发送事件</span></span><br><span class="line">                NotifyCenter.publishEvent(<span class="keyword">new</span> InstancesChangeEvent(serviceInfo.getName(), serviceInfo.getGroupName(),</span><br><span class="line">                        serviceInfo.getClusters(), serviceInfo.getHosts()));</span><br><span class="line">                <span class="comment">//写到缓存文件中</span></span><br><span class="line">                DiskCache.write(serviceInfo, cacheDir);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            changed = <span class="keyword">true</span>;</span><br><span class="line">            NAMING_LOGGER.info(<span class="string">&quot;init new ips(&quot;</span> + serviceInfo.ipCount() + <span class="string">&quot;) service: &quot;</span> + serviceInfo.getKey() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">                    + JacksonUtils.toJson(serviceInfo.getHosts()));</span><br><span class="line">            serviceInfoMap.put(serviceInfo.getKey(), serviceInfo);</span><br><span class="line">            NotifyCenter.publishEvent(<span class="keyword">new</span> InstancesChangeEvent(serviceInfo.getName(), serviceInfo.getGroupName(),</span><br><span class="line">                    serviceInfo.getClusters(), serviceInfo.getHosts()));</span><br><span class="line">            serviceInfo.setJsonFromServer(json);</span><br><span class="line">            DiskCache.write(serviceInfo, cacheDir);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MetricsMonitor.getServiceInfoMapSizeMonitor().set(serviceInfoMap.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            NAMING_LOGGER.info(<span class="string">&quot;current ips:(&quot;</span> + serviceInfo.ipCount() + <span class="string">&quot;) service: &quot;</span> + serviceInfo.getKey() + <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">                    + JacksonUtils.toJson(serviceInfo.getHosts()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get 请求 /nacos/v1/ns/instance/list 参数整理了下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NetUtils.localIP() = System.getProperty(&quot;com.alibaba.nacos.client.naming.local.ip&quot;,InetAddress.getLocalHost().getHostAddress());</span><br><span class="line"></span><br><span class="line">params.put(CommonParams.NAMESPACE_ID, nacosDiscoveryProperties.getNamespace()/public);</span><br><span class="line">params.put(CommonParams.SERVICE_NAME, nacosDiscoveryProperties.getGroup() + @@ + nacosDiscoveryProperties.getService());</span><br><span class="line">params.put(&quot;clusters&quot;, &quot;&quot;);</span><br><span class="line">params.put(&quot;udpPort&quot;, String.valueOf(udpPort));</span><br><span class="line">params.put(&quot;clientIP&quot;, NetUtils.localIP());</span><br><span class="line">params.put(&quot;healthyOnly&quot;, String.valueOf(false));</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>客户端拉取实例列表</p><p>这是客户端从服务端拉取实例列表，正常每10秒拉取一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostReactor</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleUpdateIfAbsent</span><span class="params">(String serviceName, String clusters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (futureMap.get(ServiceInfo.getKey(serviceName, clusters)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (futureMap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (futureMap.get(ServiceInfo.getKey(serviceName, clusters)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ScheduledFuture&lt;?&gt; future = addTask(<span class="keyword">new</span> UpdateTask(serviceName, clusters));</span><br><span class="line">            futureMap.put(ServiceInfo.getKey(serviceName, clusters), future);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> lastRefTime = Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String clusters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String serviceName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * the fail situation. 1:can&#x27;t connect to server 2:serviceInfo&#x27;s hosts is empty</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> failCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UpdateTask</span><span class="params">(String serviceName, String clusters)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.serviceName = serviceName;</span><br><span class="line">            <span class="keyword">this</span>.clusters = clusters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">incFailCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> limit = <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">if</span> (failCount == limit) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            failCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetFailCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            failCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> delayTime = DEFAULT_DELAY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ServiceInfo serviceObj = serviceInfoMap.get(ServiceInfo.getKey(serviceName, clusters));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (serviceObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//服务为空，1秒后重新调度</span></span><br><span class="line">                    updateService(serviceName, clusters);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取的 ServiceInfo 可能就是上次拉服务更新的，那么就从服务端拉一次信息下来</span></span><br><span class="line">                <span class="comment">//在重新调度延时期间，有可能服务端推服务生效，导致服务信息更新了，这是else情况</span></span><br><span class="line">                <span class="keyword">if</span> (serviceObj.getLastRefTime() &lt;= lastRefTime) &#123;</span><br><span class="line">                    <span class="comment">//先更新</span></span><br><span class="line">                    updateService(serviceName, clusters);</span><br><span class="line">                    <span class="comment">//获取最新 ServiceInfo</span></span><br><span class="line">                    serviceObj = serviceInfoMap.get(ServiceInfo.getKey(serviceName, clusters));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// if serviceName already updated by push, we should not override it</span></span><br><span class="line">                    <span class="comment">// since the push data may be different from pull through force push</span></span><br><span class="line">                    <span class="comment">//主要刷新了Server对应PushClient.lastRefTime,不获取数据</span></span><br><span class="line">                    <span class="comment">//说通俗点就是告诉Server我还没挂，我一直订阅你</span></span><br><span class="line">                    refreshOnly(serviceName, clusters);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录下更新时间</span></span><br><span class="line">                lastRefTime = serviceObj.getLastRefTime();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!notifier.isSubscribed(serviceName, clusters) &amp;&amp; !futureMap</span><br><span class="line">                        .containsKey(ServiceInfo.getKey(serviceName, clusters))) &#123;</span><br><span class="line">                    <span class="comment">// abort the update task</span></span><br><span class="line">                    NAMING_LOGGER.info(<span class="string">&quot;update task is stopped, service:&quot;</span> + serviceName + <span class="string">&quot;, clusters:&quot;</span> + clusters);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//没有获取到实例</span></span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isEmpty(serviceObj.getHosts())) &#123;</span><br><span class="line">                    <span class="comment">//增加</span></span><br><span class="line">                    incFailCount();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取延迟时间</span></span><br><span class="line">                delayTime = serviceObj.getCacheMillis();</span><br><span class="line">                <span class="comment">//重置</span></span><br><span class="line">                resetFailCount();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                incFailCount();</span><br><span class="line">                NAMING_LOGGER.warn(<span class="string">&quot;[NA] failed to update serviceName: &quot;</span> + serviceName, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//重新调度,正常10秒</span></span><br><span class="line">                <span class="comment">//没获取到实例表，2，4，8，16，32，60逐级延迟，一成功旧变10秒</span></span><br><span class="line">                executor.schedule(<span class="keyword">this</span>, Math.min(delayTime &lt;&lt; failCount, DEFAULT_DELAY * <span class="number">60</span>), TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了拉取实例列表外，在客户端拉取任务等待期间，正常10秒内，服务端会主动推实例列表过来，前提是实例列表有变法</p><p>我们在 GET 请求 /nacos/v1/ns/instance/list 后讲解推模式发送</p><p>这里讲解下推模式怎么接受</p><h1 id="PushReceiver"><a href="#PushReceiver" class="headerlink" title="PushReceiver"></a>PushReceiver</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushReceiver</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!closed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// byte[] is initialized with 0 full filled by default</span></span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[UDP_MSS];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//等待接受，在这之前会睡眠</span></span><br><span class="line">                udpSocket.receive(packet);</span><br><span class="line"></span><br><span class="line">                String json = <span class="keyword">new</span> String(IoUtils.tryDecompress(packet.getData()), UTF_8).trim();</span><br><span class="line">                NAMING_LOGGER.info(<span class="string">&quot;received push data: &quot;</span> + json + <span class="string">&quot; from &quot;</span> + packet.getAddress().toString());</span><br><span class="line"></span><br><span class="line">                PushPacket pushPacket = JacksonUtils.toObj(json, PushPacket.class);</span><br><span class="line">                String ack;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;dom&quot;</span>.equals(pushPacket.type) || <span class="string">&quot;service&quot;</span>.equals(pushPacket.type)) &#123;</span><br><span class="line">                    <span class="comment">//正常都是走到这个分支</span></span><br><span class="line">                    hostReactor.processServiceJson(pushPacket.data);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// send ack to server</span></span><br><span class="line">                    ack = <span class="string">&quot;&#123;\&quot;type\&quot;: \&quot;push-ack\&quot;&quot;</span> + <span class="string">&quot;, \&quot;lastRefTime\&quot;:\&quot;&quot;</span> + pushPacket.lastRefTime + <span class="string">&quot;\&quot;, \&quot;data\&quot;:&quot;</span></span><br><span class="line">                            + <span class="string">&quot;\&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dump&quot;</span>.equals(pushPacket.type)) &#123;</span><br><span class="line">                    <span class="comment">// dump data to server</span></span><br><span class="line">                    ack = <span class="string">&quot;&#123;\&quot;type\&quot;: \&quot;dump-ack\&quot;&quot;</span> + <span class="string">&quot;, \&quot;lastRefTime\&quot;: \&quot;&quot;</span> + pushPacket.lastRefTime + <span class="string">&quot;\&quot;, \&quot;data\&quot;:&quot;</span></span><br><span class="line">                            + <span class="string">&quot;\&quot;&quot;</span> + StringUtils.escapeJavaScript(JacksonUtils.toJson(hostReactor.getServiceInfoMap()))</span><br><span class="line">                            + <span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// do nothing send ack only</span></span><br><span class="line">                    ack = <span class="string">&quot;&#123;\&quot;type\&quot;: \&quot;unknown-ack\&quot;&quot;</span> + <span class="string">&quot;, \&quot;lastRefTime\&quot;:\&quot;&quot;</span> + pushPacket.lastRefTime</span><br><span class="line">                            + <span class="string">&quot;\&quot;, \&quot;data\&quot;:&quot;</span> + <span class="string">&quot;\&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理结束后，给Server发送ack</span></span><br><span class="line">                udpSocket.send(<span class="keyword">new</span> DatagramPacket(ack.getBytes(UTF_8), ack.getBytes(UTF_8).length,</span><br><span class="line">                        packet.getSocketAddress()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                NAMING_LOGGER.error(<span class="string">&quot;[NA] error while receiving push data&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GET-v1-ns-instance-list"><a href="#GET-v1-ns-instance-list" class="headerlink" title="GET /v1/ns/instance/list"></a>GET /v1/ns/instance/list</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.READ)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectNode <span class="title">list</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">        String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">        NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line"></span><br><span class="line">        String agent = WebUtils.getUserAgent(request);</span><br><span class="line">        String clusters = WebUtils.optional(request, <span class="string">&quot;clusters&quot;</span>, StringUtils.EMPTY);</span><br><span class="line">        String clientIP = WebUtils.optional(request, <span class="string">&quot;clientIP&quot;</span>, StringUtils.EMPTY);</span><br><span class="line">        <span class="keyword">int</span> udpPort = Integer.parseInt(WebUtils.optional(request, <span class="string">&quot;udpPort&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        String env = WebUtils.optional(request, <span class="string">&quot;env&quot;</span>, StringUtils.EMPTY);</span><br><span class="line">        <span class="keyword">boolean</span> isCheck = Boolean.parseBoolean(WebUtils.optional(request, <span class="string">&quot;isCheck&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String app = WebUtils.optional(request, <span class="string">&quot;app&quot;</span>, StringUtils.EMPTY);</span><br><span class="line"></span><br><span class="line">        String tenant = WebUtils.optional(request, <span class="string">&quot;tid&quot;</span>, StringUtils.EMPTY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> healthyOnly = Boolean.parseBoolean(WebUtils.optional(request, <span class="string">&quot;healthyOnly&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doSrvIpxt(namespaceId, serviceName, agent, clusters, clientIP, udpPort, env, isCheck, app, tenant,</span><br><span class="line">                healthyOnly);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectNode <span class="title">doSrvIpxt</span><span class="params">(String namespaceId, String serviceName, String agent, String clusters, String clientIP,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> udpPort, String env, <span class="keyword">boolean</span> isCheck, String app, String tid, <span class="keyword">boolean</span> healthyOnly)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClientInfo clientInfo = <span class="keyword">new</span> ClientInfo(agent);</span><br><span class="line">        ObjectNode result = JacksonUtils.createEmptyJsonNode();</span><br><span class="line">        <span class="comment">//获取 Service</span></span><br><span class="line">        Service service = serviceManager.getService(namespaceId, serviceName);</span><br><span class="line">        <span class="comment">//默认3秒</span></span><br><span class="line">        <span class="keyword">long</span> cacheMillis = switchDomain.getDefaultCacheMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now try to enable the push</span></span><br><span class="line">        <span class="comment">//服务信息推服务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//满足情况只有 client 调用 com.alibaba.nacos.naming.controllers.InstanceController.list</span></span><br><span class="line">            <span class="keyword">if</span> (udpPort &gt; <span class="number">0</span> &amp;&amp; pushService.canEnablePush(agent)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把参数封装成PushClient对象，加入进 clientMap</span></span><br><span class="line">                pushService</span><br><span class="line">                        .addClient(namespaceId, serviceName, clusters, agent, <span class="keyword">new</span> InetSocketAddress(clientIP, udpPort),</span><br><span class="line">                                pushDataSource, tid, app);</span><br><span class="line">                <span class="comment">//10秒</span></span><br><span class="line">                cacheMillis = switchDomain.getPushCacheMillis(serviceName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.SRV_LOG</span><br><span class="line">                    .error(<span class="string">&quot;[NACOS-API] failed to added push client &#123;&#125;, &#123;&#125;:&#123;&#125;&quot;</span>, clientInfo, clientIP, udpPort, e);</span><br><span class="line">            cacheMillis = switchDomain.getDefaultCacheMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Loggers.SRV_LOG.isDebugEnabled()) &#123;</span><br><span class="line">                Loggers.SRV_LOG.debug(<span class="string">&quot;no instance to serve for service: &#123;&#125;&quot;</span>, serviceName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Service 为空 ，直接返回</span></span><br><span class="line">            result.put(<span class="string">&quot;name&quot;</span>, serviceName);</span><br><span class="line">            result.put(<span class="string">&quot;clusters&quot;</span>, clusters);</span><br><span class="line">            result.put(<span class="string">&quot;cacheMillis&quot;</span>, cacheMillis);</span><br><span class="line">            result.replace(<span class="string">&quot;hosts&quot;</span>, JacksonUtils.createEmptyArrayNode());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        checkIfDisabled(service);</span><br><span class="line"></span><br><span class="line">        List&lt;Instance&gt; srvedIPs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定 clusters 实例，如果没有指定 clusters ，获取 Service 所有实例</span></span><br><span class="line">        srvedIPs = service.srvIPs(Arrays.asList(StringUtils.split(clusters, <span class="string">&quot;,&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// filter ips using selector:</span></span><br><span class="line">        <span class="keyword">if</span> (service.getSelector() != <span class="keyword">null</span> &amp;&amp; StringUtils.isNotBlank(clientIP)) &#123;</span><br><span class="line">            srvedIPs = service.getSelector().select(clientIP, srvedIPs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(srvedIPs)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Loggers.SRV_LOG.isDebugEnabled()) &#123;</span><br><span class="line">                Loggers.SRV_LOG.debug(<span class="string">&quot;no instance to serve for service: &#123;&#125;&quot;</span>, serviceName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clientInfo.type == ClientInfo.ClientType.JAVA</span><br><span class="line">                    &amp;&amp; clientInfo.version.compareTo(VersionUtil.parseVersion(<span class="string">&quot;1.0.0&quot;</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                result.put(<span class="string">&quot;dom&quot;</span>, serviceName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(<span class="string">&quot;dom&quot;</span>, NamingUtils.getServiceName(serviceName));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//没有获取到实例，没注册，或者自动删除删光了</span></span><br><span class="line">            result.put(<span class="string">&quot;name&quot;</span>, serviceName);</span><br><span class="line">            result.put(<span class="string">&quot;cacheMillis&quot;</span>, cacheMillis);</span><br><span class="line">            result.put(<span class="string">&quot;lastRefTime&quot;</span>, System.currentTimeMillis());</span><br><span class="line">            result.put(<span class="string">&quot;checksum&quot;</span>, service.getChecksum());</span><br><span class="line">            result.put(<span class="string">&quot;useSpecifiedURL&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            result.put(<span class="string">&quot;clusters&quot;</span>, clusters);</span><br><span class="line">            result.put(<span class="string">&quot;env&quot;</span>, env);</span><br><span class="line">            result.set(<span class="string">&quot;hosts&quot;</span>, JacksonUtils.createEmptyArrayNode());</span><br><span class="line">            result.set(<span class="string">&quot;metadata&quot;</span>, JacksonUtils.transferToJsonNode(service.getMetadata()));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Boolean, List&lt;Instance&gt;&gt; ipMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ipMap.put(Boolean.TRUE, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        ipMap.put(Boolean.FALSE, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分成健康和不健康两个队列</span></span><br><span class="line">        <span class="keyword">for</span> (Instance ip : srvedIPs) &#123;</span><br><span class="line">            ipMap.get(ip.isHealthy()).add(ip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isCheck) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;reachProtectThreshold&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> threshold = service.getProtectThreshold();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//健康的实例低于等于 threshold * 实例总数，threshold是个阈值，低于等于实例总数的百分之多少，就进入这个if</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">float</span>) ipMap.get(Boolean.TRUE).size() / srvedIPs.size() &lt;= threshold) &#123;</span><br><span class="line"></span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;protect threshold reached, return all ips, service: &#123;&#125;&quot;</span>, serviceName);</span><br><span class="line">            <span class="keyword">if</span> (isCheck) &#123;</span><br><span class="line">                result.put(<span class="string">&quot;reachProtectThreshold&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不健康的实例列表加进健康实例列表</span></span><br><span class="line">            ipMap.get(Boolean.TRUE).addAll(ipMap.get(Boolean.FALSE));</span><br><span class="line">            <span class="comment">//不健康列表清除</span></span><br><span class="line">            ipMap.get(Boolean.FALSE).clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isCheck) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;protectThreshold&quot;</span>, service.getProtectThreshold());</span><br><span class="line">            result.put(<span class="string">&quot;reachLocalSiteCallThreshold&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JacksonUtils.createEmptyJsonNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayNode hosts = JacksonUtils.createEmptyArrayNode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Boolean, List&lt;Instance&gt;&gt; entry : ipMap.entrySet()) &#123;</span><br><span class="line">            List&lt;Instance&gt; ips = entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (healthyOnly &amp;&amp; !entry.getKey()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Instance instance : ips) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// remove disabled instance:</span></span><br><span class="line">                <span class="keyword">if</span> (!instance.isEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ObjectNode ipObj = JacksonUtils.createEmptyJsonNode();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//封装 instance</span></span><br><span class="line">                ipObj.put(<span class="string">&quot;ip&quot;</span>, instance.getIp());</span><br><span class="line">                ipObj.put(<span class="string">&quot;port&quot;</span>, instance.getPort());</span><br><span class="line">                <span class="comment">// deprecated since nacos 1.0.0:</span></span><br><span class="line">                ipObj.put(<span class="string">&quot;valid&quot;</span>, entry.getKey());</span><br><span class="line">                ipObj.put(<span class="string">&quot;healthy&quot;</span>, entry.getKey());</span><br><span class="line">                ipObj.put(<span class="string">&quot;marked&quot;</span>, instance.isMarked());</span><br><span class="line">                ipObj.put(<span class="string">&quot;instanceId&quot;</span>, instance.getInstanceId());</span><br><span class="line">                ipObj.set(<span class="string">&quot;metadata&quot;</span>, JacksonUtils.transferToJsonNode(instance.getMetadata()));</span><br><span class="line">                ipObj.put(<span class="string">&quot;enabled&quot;</span>, instance.isEnabled());</span><br><span class="line">                ipObj.put(<span class="string">&quot;weight&quot;</span>, instance.getWeight());</span><br><span class="line">                ipObj.put(<span class="string">&quot;clusterName&quot;</span>, instance.getClusterName());</span><br><span class="line">                <span class="keyword">if</span> (clientInfo.type == ClientInfo.ClientType.JAVA</span><br><span class="line">                        &amp;&amp; clientInfo.version.compareTo(VersionUtil.parseVersion(<span class="string">&quot;1.0.0&quot;</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ipObj.put(<span class="string">&quot;serviceName&quot;</span>, instance.getServiceName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ipObj.put(<span class="string">&quot;serviceName&quot;</span>, NamingUtils.getServiceName(instance.getServiceName()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ipObj.put(<span class="string">&quot;ephemeral&quot;</span>, instance.isEphemeral());</span><br><span class="line">                hosts.add(ipObj);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造剩下的值返回</span></span><br><span class="line">        result.replace(<span class="string">&quot;hosts&quot;</span>, hosts);</span><br><span class="line">        <span class="keyword">if</span> (clientInfo.type == ClientInfo.ClientType.JAVA</span><br><span class="line">                &amp;&amp; clientInfo.version.compareTo(VersionUtil.parseVersion(<span class="string">&quot;1.0.0&quot;</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;dom&quot;</span>, serviceName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.put(<span class="string">&quot;dom&quot;</span>, NamingUtils.getServiceName(serviceName));</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;name&quot;</span>, serviceName);</span><br><span class="line">        result.put(<span class="string">&quot;cacheMillis&quot;</span>, cacheMillis);</span><br><span class="line">        result.put(<span class="string">&quot;lastRefTime&quot;</span>, System.currentTimeMillis());</span><br><span class="line">        result.put(<span class="string">&quot;checksum&quot;</span>, service.getChecksum());</span><br><span class="line">        result.put(<span class="string">&quot;useSpecifiedURL&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;clusters&quot;</span>, clusters);</span><br><span class="line">        result.put(<span class="string">&quot;env&quot;</span>, env);</span><br><span class="line">        result.replace(<span class="string">&quot;metadata&quot;</span>, JacksonUtils.transferToJsonNode(service.getMetadata()));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例注册，或者删除实例中,会出现这些代码，这个代码就是服务端主动把变化了的实例列表推送给客户端</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getPushService().serviceChanged(service);</span><br></pre></td></tr></table></figure><p>客户端定期拉取任务中，会每10秒调用 GET /v1/ns/instance/list 请求，在这个请求中，我们看到调用了</p><p>PushService#addClient，把参数封装成PushClient对象加到 clientMap 集合中</p><p>问题是为什么定时任务要不断调用 addClient 加入到 clientMap 集合中呢？</p><p>答案是因为，如果客户端不在订阅某个服务了，这个时候 PushClient.lastRefTime 时间就不会一直更新，推模式执行时</p><p>会判断当前时间 是否大于 PushClient.lastRefTime 加上10秒，如果是，就证明客户端不在订阅实例表了，我们不用把实例表推送给不订阅的客户端</p><p>接着把 PushClient 从 clientMap 集合中提走</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushService</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span>&lt;<span class="title">ServiceChangeEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(String namespaceId, String serviceName, String clusters, String agent,</span></span></span><br><span class="line"><span class="function"><span class="params">                          InetSocketAddress socketAddr, DataSource dataSource, String tenant, String app)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PushClient client = <span class="keyword">new</span> PushClient(namespaceId, serviceName, clusters, agent, socketAddr, dataSource, tenant,</span><br><span class="line">                app);</span><br><span class="line">        addClient(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(PushClient client)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// client is stored by key &#x27;serviceName&#x27; because notify event is driven by serviceName change</span></span><br><span class="line">        String serviceKey = UtilsAndCommons.assembleFullServiceName(client.getNamespaceId(), client.getServiceName());</span><br><span class="line">        ConcurrentMap&lt;String, PushClient&gt; clients = clientMap.get(serviceKey);</span><br><span class="line">        <span class="keyword">if</span> (clients == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clientMap.putIfAbsent(serviceKey, <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">1024</span>));</span><br><span class="line">            clients = clientMap.get(serviceKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PushClient oldClient = clients.get(client.toString());</span><br><span class="line">        <span class="keyword">if</span> (oldClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldClient.refresh();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PushClient res = clients.putIfAbsent(client.toString(), client);</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Loggers.PUSH.warn(<span class="string">&quot;client: &#123;&#125; already associated with key &#123;&#125;&quot;</span>, res.getAddrStr(), res.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            Loggers.PUSH.debug(<span class="string">&quot;client: &#123;&#125; added for serviceName: &#123;&#125;&quot;</span>, client.getAddrStr(), client.getServiceName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceChanged</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// merge some change events to reduce the push frequency:</span></span><br><span class="line">        <span class="comment">//等下会看到onApplicationEvent方法定时任务是延时1秒后执行的，并且加紧 futureMap 中</span></span><br><span class="line">        <span class="comment">//就是说在这1秒内假设有实例疯狂注册，也不会立刻执行，等延时1秒后，</span></span><br><span class="line">        <span class="comment">//在读取新数据，这里的新数据就包括了1秒内疯狂注册的新实例列表</span></span><br><span class="line">        <span class="comment">//减少 client 推模式qps</span></span><br><span class="line">        <span class="keyword">if</span> (futureMap</span><br><span class="line">                .containsKey(UtilsAndCommons.assembleFullServiceName(service.getNamespaceId(), service.getName()))) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//发送事件</span></span><br><span class="line">        <span class="keyword">this</span>.applicationContext.publishEvent(<span class="keyword">new</span> ServiceChangeEvent(<span class="keyword">this</span>, service));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ServiceChangeEvent event)</span> </span>&#123;</span><br><span class="line">        Service service = event.getService();</span><br><span class="line">        String serviceName = service.getName();</span><br><span class="line">        String namespaceId = service.getNamespaceId();</span><br><span class="line">        </span><br><span class="line">        Future future = GlobalExecutor.scheduleUdpSender(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Loggers.PUSH.info(serviceName + <span class="string">&quot; is changed, add it to push queue.&quot;</span>);</span><br><span class="line">                <span class="comment">//获取 clients</span></span><br><span class="line">                ConcurrentMap&lt;String, PushClient&gt; clients = clientMap</span><br><span class="line">                        .get(UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName));</span><br><span class="line">                <span class="comment">//如果为空不执行</span></span><br><span class="line">                <span class="keyword">if</span> (MapUtils.isEmpty(clients)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">long</span> lastRefTime = System.nanoTime();</span><br><span class="line">                <span class="keyword">for</span> (PushClient client : clients.values()) &#123;</span><br><span class="line">                    <span class="comment">//客户端注册时间大于当前时间的10秒，则不在执行</span></span><br><span class="line">                    <span class="keyword">if</span> (client.zombie()) &#123;</span><br><span class="line">                        Loggers.PUSH.debug(<span class="string">&quot;client is zombie: &quot;</span> + client.toString());</span><br><span class="line">                        clients.remove(client.toString());</span><br><span class="line">                        Loggers.PUSH.debug(<span class="string">&quot;client is zombie: &quot;</span> + client.toString());</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Receiver.AckEntry ackEntry;</span><br><span class="line">                    Loggers.PUSH.debug(<span class="string">&quot;push serviceName: &#123;&#125; to client: &#123;&#125;&quot;</span>, serviceName, client.toString());</span><br><span class="line">                    String key = getPushCacheKey(serviceName, client.getIp(), client.getAgent());</span><br><span class="line">                    <span class="keyword">byte</span>[] compressData = <span class="keyword">null</span>;</span><br><span class="line">                    Map&lt;String, Object&gt; data = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (switchDomain.getDefaultPushCacheMillis() &gt;= <span class="number">20000</span> &amp;&amp; cache.containsKey(key)) &#123;</span><br><span class="line">                        org.javatuples.Pair pair = (org.javatuples.Pair) cache.get(key);</span><br><span class="line">                        compressData = (<span class="keyword">byte</span>[]) (pair.getValue0());</span><br><span class="line">                        data = (Map&lt;String, Object&gt;) pair.getValue1();</span><br><span class="line"></span><br><span class="line">                        Loggers.PUSH.debug(<span class="string">&quot;[PUSH-CACHE] cache hit: &#123;&#125;:&#123;&#125;&quot;</span>, serviceName, client.getAddrStr());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//封装 ackEntry</span></span><br><span class="line">                    <span class="keyword">if</span> (compressData != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ackEntry = prepareAckEntry(client, compressData, data, lastRefTime);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ackEntry = prepareAckEntry(client, prepareHostsData(client), lastRefTime);</span><br><span class="line">                        <span class="keyword">if</span> (ackEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">//正常不会等于null ackEntry.origin.getData() 和 ackEntry.data 数据是一样的</span></span><br><span class="line">                            <span class="comment">//ackEntry.origin.getData() 是字节数组，ackEntry.data 是map集合</span></span><br><span class="line">                            cache.put(key, <span class="keyword">new</span> org.javatuples.Pair&lt;&gt;(ackEntry.origin.getData(), ackEntry.data));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Loggers.PUSH.info(<span class="string">&quot;serviceName: &#123;&#125; changed, schedule push for: &#123;&#125;, agent: &#123;&#125;, key: &#123;&#125;&quot;</span>,</span><br><span class="line">                            client.getServiceName(), client.getAddrStr(), client.getAgent(),</span><br><span class="line">                            (ackEntry == <span class="keyword">null</span> ? <span class="keyword">null</span> : ackEntry.key));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//把实例表发送给订阅的客户端</span></span><br><span class="line">                    udpPush(ackEntry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.PUSH.error(<span class="string">&quot;[NACOS-PUSH] failed to push serviceName: &#123;&#125; to client, error: &#123;&#125;&quot;</span>, serviceName, e);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                futureMap.remove(UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">        futureMap.put(UtilsAndCommons.assembleFullServiceName(namespaceId, serviceName), future);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Receiver.<span class="function">AckEntry <span class="title">udpPush</span><span class="params">(Receiver.AckEntry ackEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ackEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Loggers.PUSH.error(<span class="string">&quot;[NACOS-PUSH] ackEntry is null.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试1次，正常会发送1次，没收到ack就认为是失败了,那么就重试1次，如果还是失败了，会进入这个if</span></span><br><span class="line">        <span class="keyword">if</span> (ackEntry.getRetryTimes() &gt; MAX_RETRY_TIMES) &#123;</span><br><span class="line">            Loggers.PUSH.warn(<span class="string">&quot;max re-push times reached, retry times &#123;&#125;, key: &#123;&#125;&quot;</span>, ackEntry.retryTimes, ackEntry.key);</span><br><span class="line">            ackMap.remove(ackEntry.key);</span><br><span class="line">            udpSendTimeMap.remove(ackEntry.key);</span><br><span class="line">            <span class="comment">//统计</span></span><br><span class="line">            failedPush += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ackEntry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ackMap.containsKey(ackEntry.key)) &#123;</span><br><span class="line">                <span class="comment">//统计</span></span><br><span class="line">                totalPush++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//put 进集合</span></span><br><span class="line">            ackMap.put(ackEntry.key, ackEntry);</span><br><span class="line">            udpSendTimeMap.put(ackEntry.key, System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">            Loggers.PUSH.info(<span class="string">&quot;send udp packet: &quot;</span> + ackEntry.key);</span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            udpSocket.send(ackEntry.origin);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重试加1</span></span><br><span class="line">            ackEntry.increaseRetryTime();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//延迟10秒</span></span><br><span class="line">            GlobalExecutor.scheduleRetransmitter(<span class="keyword">new</span> Retransmitter(ackEntry),</span><br><span class="line">                    TimeUnit.NANOSECONDS.toMillis(ACK_TIMEOUT_NANOS), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ackEntry;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果有异常，终止这次推送</span></span><br><span class="line">            Loggers.PUSH.error(<span class="string">&quot;[NACOS-PUSH] failed to push data: &#123;&#125; to client: &#123;&#125;, error: &#123;&#125;&quot;</span>, ackEntry.data,</span><br><span class="line">                    ackEntry.origin.getAddress().getHostAddress(), e);</span><br><span class="line">            ackMap.remove(ackEntry.key);</span><br><span class="line">            udpSendTimeMap.remove(ackEntry.key);</span><br><span class="line">            failedPush += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Retransmitter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Receiver.AckEntry ackEntry;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Retransmitter</span><span class="params">(Receiver.AckEntry ackEntry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ackEntry = ackEntry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//收到ack,后会从ackMap删除，不会在进入这个if中</span></span><br><span class="line">            <span class="keyword">if</span> (ackMap.containsKey(ackEntry.key)) &#123;</span><br><span class="line">                Loggers.PUSH.info(<span class="string">&quot;retry to push data, key: &quot;</span> + ackEntry.key);</span><br><span class="line">                udpPush(ackEntry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">64</span>];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    udpSocket.receive(packet);</span><br><span class="line"></span><br><span class="line">                    String json = <span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength(), StandardCharsets.UTF_8).trim();</span><br><span class="line">                    AckPacket ackPacket = JacksonUtils.toObj(json, AckPacket.class);</span><br><span class="line"></span><br><span class="line">                    InetSocketAddress socketAddress = (InetSocketAddress) packet.getSocketAddress();</span><br><span class="line">                    String ip = socketAddress.getAddress().getHostAddress();</span><br><span class="line">                    <span class="keyword">int</span> port = socketAddress.getPort();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (System.nanoTime() - ackPacket.lastRefTime &gt; ACK_TIMEOUT_NANOS) &#123;</span><br><span class="line">                        Loggers.PUSH.warn(<span class="string">&quot;ack takes too long from &#123;&#125; ack json: &#123;&#125;&quot;</span>, packet.getSocketAddress(), json);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String ackKey = getAckKey(ip, port, ackPacket.lastRefTime);</span><br><span class="line">                    <span class="comment">//就是这里，删除</span></span><br><span class="line">                    AckEntry ackEntry = ackMap.remove(ackKey);</span><br><span class="line">                    <span class="keyword">if</span> (ackEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                                <span class="string">&quot;unable to find ackEntry for key: &quot;</span> + ackKey + <span class="string">&quot;, ack json: &quot;</span> + json);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> pushCost = System.currentTimeMillis() - udpSendTimeMap.get(ackKey);</span><br><span class="line"></span><br><span class="line">                    Loggers.PUSH</span><br><span class="line">                            .info(<span class="string">&quot;received ack: &#123;&#125; from: &#123;&#125;:&#123;&#125;, cost: &#123;&#125; ms, unacked: &#123;&#125;, total push: &#123;&#125;&quot;</span>, json, ip,</span><br><span class="line">                                    port, pushCost, ackMap.size(), totalPush);</span><br><span class="line"></span><br><span class="line">                    pushCostMap.put(ackKey, pushCost);</span><br><span class="line"></span><br><span class="line">                    udpSendTimeMap.remove(ackKey);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    Loggers.PUSH.error(<span class="string">&quot;[NACOS-PUSH] error while receiving ack data&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/04/nacos-3/nacos-pushService.png"></p><p>todo InstancesChangeEvent 没画出来，有空在画</p><p>InstancesChangeEvent 怎么使用?</p><p>nacos源码有这个例子 com.alibaba.nacos.example.NamingExample</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nacos naming example.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nkorange</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingExample</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;serverAddr&quot;</span>, System.getProperty(<span class="string">&quot;serverAddr&quot;</span>));</span><br><span class="line">        properties.setProperty(<span class="string">&quot;namespace&quot;</span>, System.getProperty(<span class="string">&quot;namespace&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建 NamingService</span></span><br><span class="line">        NamingService naming = NamingFactory.createNamingService(properties);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注册实例</span></span><br><span class="line">        naming.registerInstance(<span class="string">&quot;nacos.test.3&quot;</span>, <span class="string">&quot;11.11.11.11&quot;</span>, <span class="number">8888</span>, <span class="string">&quot;TEST1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        naming.registerInstance(<span class="string">&quot;nacos.test.3&quot;</span>, <span class="string">&quot;2.2.2.2&quot;</span>, <span class="number">9999</span>, <span class="string">&quot;DEFAULT&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(naming.getAllInstances(<span class="string">&quot;nacos.test.3&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        naming.deregisterInstance(<span class="string">&quot;nacos.test.3&quot;</span>, <span class="string">&quot;2.2.2.2&quot;</span>, <span class="number">9999</span>, <span class="string">&quot;DEFAULT&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(naming.getAllInstances(<span class="string">&quot;nacos.test.3&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                        Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">                        thread.setName(<span class="string">&quot;test-thread&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> thread;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//就是这个，一旦收到 InstancesChangeEvent ，onEvent 就会被调用，观察者模式</span></span><br><span class="line">        naming.subscribe(<span class="string">&quot;nacos.test.3&quot;</span>, <span class="keyword">new</span> AbstractEventListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//EventListener onEvent is sync to handle, If process too low in onEvent, maybe block other onEvent callback.</span></span><br><span class="line">            <span class="comment">//So you can override getExecutor() to async handle event.</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">                System.out.println(((NamingEvent) event).getServiceName());</span><br><span class="line">                System.out.println(((NamingEvent) event).getInstances());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NotifyCenter-简单介绍"><a href="#NotifyCenter-简单介绍" class="headerlink" title="NotifyCenter 简单介绍"></a>NotifyCenter 简单介绍</h1><p><img src="/2021/02/04/nacos-3/nacos-notifyCenter.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nacos 版本 1.4.1&lt;/p&gt;
&lt;h1 id=&quot;客户端服务发现&quot;&gt;&lt;a href=&quot;#客户端服务发现&quot; class=&quot;headerlink&quot; title=&quot;客户端服务发现&quot;&gt;&lt;/a&gt;客户端服务发现&lt;/h1&gt;&lt;p&gt;todo 目前没搞清楚哪里调用&lt;/p&gt;
&lt;p&gt;搜索了下s</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="nacos" scheme="https://xxnjdg.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>nacos注册中心AP模式注册笔记</title>
    <link href="https://xxnjdg.github.io/2021/02/02/nacos-2/"/>
    <id>https://xxnjdg.github.io/2021/02/02/nacos-2/</id>
    <published>2021-02-02T13:39:48.000Z</published>
    <updated>2021-02-14T10:33:41.126Z</updated>
    
    <content type="html"><![CDATA[<p>nacos 版本 1.4.1</p><h1 id="客户端非持久化注册，AP模式"><a href="#客户端非持久化注册，AP模式" class="headerlink" title="客户端非持久化注册，AP模式"></a>客户端非持久化注册，AP模式</h1><p>引入下面包，启动时会自动注册，默认非持久化注册，使用AP方式 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="NacosNamingService"><a href="#NacosNamingService" class="headerlink" title="NacosNamingService"></a>NacosNamingService</h2><p>调用 com.alibaba.nacos.api.NacosFactory#createNamingService(java.util.Properties) 创建 NacosNamingService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosNamingService</span> <span class="keyword">implements</span> <span class="title">NamingService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Each Naming service should have different namespace.</span></span><br><span class="line"><span class="comment">     * 如果 nacosDiscoveryProperties.getNamespace() 没有修改，使用默认public</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties 的 endpoint 属性获取</span></span><br><span class="line">    <span class="comment">//地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</span></span><br><span class="line">    <span class="comment">//endpoint 和 serverList二选一，不能同时存在，都配了，endpoint 优先级高</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties 的 serverAddr 属性获取</span></span><br><span class="line">    <span class="comment">//Nacos Server 启动监听的ip地址和端口,可以写多个地址，用逗号分割</span></span><br><span class="line">    <span class="comment">//endpoint 和 serverList二选一，不能同时存在，都配了，endpoint 优先级高</span></span><br><span class="line">    <span class="keyword">private</span> String serverList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存文件夹</span></span><br><span class="line">    <span class="keyword">private</span> String cacheDir;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//log名字</span></span><br><span class="line">    <span class="keyword">private</span> String logName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HostReactor hostReactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//和发送心跳相关</span></span><br><span class="line">    <span class="keyword">private</span> BeatReactor beatReactor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NamingProxy serverProxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NamingProxy"><a href="#NamingProxy" class="headerlink" title="NamingProxy"></a>NamingProxy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingProxy</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//http通信工具</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NacosRestTemplate nacosRestTemplate = NamingHttpClientManager.getInstance().getNacosRestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SERVER_PORT = <span class="number">8848</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPort = DEFAULT_SERVER_PORT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//namespace 名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namespaceId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同 NacosNamingService.endpoint</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果 serverList 长度等于1，即单机模式</span></span><br><span class="line">    <span class="comment">// nacosDomain就等于serverList</span></span><br><span class="line">    <span class="keyword">private</span> String nacosDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NacosNamingService.serverList.split(&quot;,&quot;) 分割后数组</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从 endpoint 获取的服务列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; serversFromEndpoint = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//和获取token有关</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityProxy securityProxy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastSrvRefTime = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> vipSrvRefInterMillis = TimeUnit.SECONDS.toMillis(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> securityInfoRefreshIntervalMills = TimeUnit.SECONDS.toMillis(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties</span></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时任务线城池</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单机模式最大重试，默认3</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxRetry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>线程名字 com.alibaba.nacos.client.naming.updater</p><p>每30秒循环执行一次，<font color="#008000">refreshSrvIfNeed()</font> ,解析 endpoint 地址，动态请求获取服务地址，配了 serverList 无视这个任务</p><p>每5秒循环执行一次，<font color="#008000">securityProxy.login(getServerList())</font>  请求 /nacos/v1/auth/users/login 获取 accessToken，<br>如果没有配置 spring.cloud.nacos.discovery.username 和 spring.cloud.nacos.discovery.password 不会去请求 </p><h3 id="HostReactor"><a href="#HostReactor" class="headerlink" title="HostReactor"></a>HostReactor</h3><p>这个类和服务发现有关，在服务发现讲解</p><h3 id="registerInstance"><a href="#registerInstance" class="headerlink" title="registerInstance"></a>registerInstance</h3><p>创建 NacosNamingService 后会调用 public void registerInstance(String serviceName, String groupName, Instance instance) throws NacosException 注册一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosNamingService</span> <span class="keyword">implements</span> <span class="title">NamingService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerInstance</span><span class="params">(String serviceName, String groupName, Instance instance)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        NamingUtils.checkInstanceIsLegal(instance);</span><br><span class="line">        <span class="comment">//groupName + Constants.SERVICE_INFO_SPLITER + serviceName</span></span><br><span class="line">        String groupedServiceName = NamingUtils.getGroupedName(serviceName, groupName);</span><br><span class="line">        <span class="keyword">if</span> (instance.isEphemeral()) &#123;</span><br><span class="line">            <span class="comment">//构造 beatInfo</span></span><br><span class="line">            BeatInfo beatInfo = beatReactor.buildBeatInfo(groupedServiceName, instance);</span><br><span class="line">            <span class="comment">//2) 启动一个线程隔5秒发送心跳</span></span><br><span class="line">            beatReactor.addBeatInfo(groupedServiceName, beatInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1) post 请求 /nacos/v1/ns/instance 注册</span></span><br><span class="line">        serverProxy.registerService(groupedServiceName, groupName, instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>请求 /nacos/v1/ns/instance 会带上参数，整理了下，基本上就是根据 nacosDiscoveryProperties 构造以下参数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">params.put(CommonParams.NAMESPACE_ID, nacosDiscoveryProperties.getNamespace()/public);</span><br><span class="line">params.put(CommonParams.SERVICE_NAME, nacosDiscoveryProperties.getGroup() + @@ + nacosDiscoveryProperties.getService());</span><br><span class="line">params.put(CommonParams.GROUP_NAME, nacosDiscoveryProperties.getGroup());</span><br><span class="line">params.put(CommonParams.CLUSTER_NAME, nacosDiscoveryProperties.getClusterName());</span><br><span class="line">params.put(&quot;ip&quot;, nacosDiscoveryProperties.getIp());</span><br><span class="line">params.put(&quot;port&quot;, String.valueOf(nacosDiscoveryProperties.getPort()));</span><br><span class="line">params.put(&quot;weight&quot;, String.valueOf(nacosDiscoveryProperties.getWeight()));</span><br><span class="line">params.put(&quot;enable&quot;, String.valueOf(nacosDiscoveryProperties.isInstanceEnabled()));</span><br><span class="line">params.put(&quot;healthy&quot;, String.valueOf(instance.isHealthy() = true));</span><br><span class="line">params.put(&quot;ephemeral&quot;, String.valueOf(nacosDiscoveryProperties.isEphemeral()));</span><br><span class="line">params.put(&quot;metadata&quot;, JacksonUtils.toJson(nacosDiscoveryProperties.getMetadata()));</span><br><span class="line"></span><br><span class="line">如果token存在</span><br><span class="line">params.put(Constants.ACCESS_TOKEN, securityProxy.getAccessToken());</span><br><span class="line"></span><br><span class="line">如果 ak/sk存在</span><br><span class="line">String signData = getSignData(params.get(&quot;serviceName&quot;));</span><br><span class="line">String signature = SignUtil.sign(signData, sk);</span><br><span class="line">params.put(&quot;signature&quot;, signature);</span><br><span class="line">params.put(&quot;data&quot;, signData);</span><br><span class="line">params.put(&quot;ak&quot;, ak);</span><br></pre></td></tr></table></figure><h4 id="定时任务-发送心跳"><a href="#定时任务-发送心跳" class="headerlink" title="定时任务-发送心跳"></a>定时任务-发送心跳</h4><p>可以先跳去看服务端注册，因为发送心跳会延时5s执行，网络正常的情况下，先注册在发送心跳</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BeatInfo beatInfo = new BeatInfo();</span><br><span class="line">beatInfo.setServiceName(nacosDiscoveryProperties.getGroup() + @@ + nacosDiscoveryProperties.getService());</span><br><span class="line">beatInfo.setIp(nacosDiscoveryProperties.getIp());</span><br><span class="line">beatInfo.setPort(nacosDiscoveryProperties.getPort());</span><br><span class="line">beatInfo.setCluster(nacosDiscoveryProperties.getClusterName());</span><br><span class="line">beatInfo.setWeight(nacosDiscoveryProperties.getWeight());</span><br><span class="line">beatInfo.setMetadata(nacosDiscoveryProperties.getMetadata());</span><br><span class="line">beatInfo.setScheduled(false);</span><br><span class="line">beatInfo.setPeriod(instance.getInstanceHeartBeatInterval());//默认5秒</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeatReactor</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBeatInfo</span><span class="params">(String serviceName, BeatInfo beatInfo)</span> </span>&#123;</span><br><span class="line">        NAMING_LOGGER.info(<span class="string">&quot;[BEAT] adding beat: &#123;&#125; to beat map.&quot;</span>, beatInfo);</span><br><span class="line">        String key = buildKey(serviceName, beatInfo.getIp(), beatInfo.getPort());</span><br><span class="line">        BeatInfo existBeat = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//fix #1733</span></span><br><span class="line">        <span class="keyword">if</span> ((existBeat = dom2Beat.remove(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            existBeat.setStopped(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dom2Beat.put(key, beatInfo);</span><br><span class="line">        <span class="comment">//默认5秒循环执行一次</span></span><br><span class="line">        executorService.schedule(<span class="keyword">new</span> BeatTask(beatInfo), beatInfo.getPeriod(), TimeUnit.MILLISECONDS);</span><br><span class="line">        MetricsMonitor.getDom2BeatSizeMonitor().set(dom2Beat.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (beatInfo.isStopped()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5000</span></span><br><span class="line">            <span class="keyword">long</span> nextTime = beatInfo.getPeriod();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//发送心跳</span></span><br><span class="line">                <span class="comment">// put 请求 /nacos/v1/ns/instance/beat，文章后面详细讲服务端心跳处理</span></span><br><span class="line">                JsonNode result = serverProxy.sendBeat(beatInfo, BeatReactor.<span class="keyword">this</span>.lightBeatEnabled);</span><br><span class="line">                <span class="keyword">long</span> interval = result.get(<span class="string">&quot;clientBeatInterval&quot;</span>).asLong();</span><br><span class="line">                <span class="keyword">boolean</span> lightBeatEnabled = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (result.has(CommonParams.LIGHT_BEAT_ENABLED)) &#123;</span><br><span class="line">                    <span class="comment">//发完心跳后设置为true</span></span><br><span class="line">                    lightBeatEnabled = result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();</span><br><span class="line">                &#125;</span><br><span class="line">                BeatReactor.<span class="keyword">this</span>.lightBeatEnabled = lightBeatEnabled;</span><br><span class="line">                <span class="keyword">if</span> (interval &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    nextTime = interval;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> code = NamingResponseCode.OK;</span><br><span class="line">                <span class="keyword">if</span> (result.has(CommonParams.CODE)) &#123;</span><br><span class="line">                    code = result.get(CommonParams.CODE).asInt();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (code == NamingResponseCode.RESOURCE_NOT_FOUND) &#123;</span><br><span class="line">                    <span class="comment">//之前是发过心跳，但是心跳到了删除超时时间没发心跳，导致自动删除了</span></span><br><span class="line">                    Instance instance = <span class="keyword">new</span> Instance();</span><br><span class="line">                    instance.setPort(beatInfo.getPort());</span><br><span class="line">                    instance.setIp(beatInfo.getIp());</span><br><span class="line">                    instance.setWeight(beatInfo.getWeight());</span><br><span class="line">                    instance.setMetadata(beatInfo.getMetadata());</span><br><span class="line">                    instance.setClusterName(beatInfo.getCluster());</span><br><span class="line">                    instance.setServiceName(beatInfo.getServiceName());</span><br><span class="line">                    instance.setInstanceId(instance.getInstanceId());</span><br><span class="line">                    instance.setEphemeral(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//重新注册</span></span><br><span class="line">                        serverProxy.registerService(beatInfo.getServiceName(),</span><br><span class="line">                                NamingUtils.getGroupName(beatInfo.getServiceName()), instance);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NacosException ex) &#123;</span><br><span class="line">                NAMING_LOGGER.error(<span class="string">&quot;[CLIENT-BEAT] failed to send beat: &#123;&#125;, code: &#123;&#125;, msg: &#123;&#125;&quot;</span>,</span><br><span class="line">                        JacksonUtils.toJson(beatInfo), ex.getErrCode(), ex.getErrMsg());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重新调度</span></span><br><span class="line">            executorService.schedule(<span class="keyword">new</span> BeatTask(beatInfo), nextTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>put 请求 /nacos/v1/ns/instance/beat，请求参数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">params.put(CommonParams.NAMESPACE_ID, nacosDiscoveryProperties.getNamespace()/public);</span><br><span class="line">params.put(CommonParams.SERVICE_NAME, nacosDiscoveryProperties.getGroup() + @@ + nacosDiscoveryProperties.getService());</span><br><span class="line">params.put(CommonParams.CLUSTER_NAME, nacosDiscoveryProperties.getClusterName());</span><br><span class="line">params.put(&quot;ip&quot;, nacosDiscoveryProperties.getIp());</span><br><span class="line">params.put(&quot;port&quot;, String.valueOf(nacosDiscoveryProperties.getPort()));</span><br><span class="line">bodyMap.put(&quot;beat&quot;, JacksonUtils.toJson(beatInfo));</span><br><span class="line">如果token存在</span><br><span class="line">params.put(Constants.ACCESS_TOKEN, securityProxy.getAccessToken());</span><br><span class="line"></span><br><span class="line">如果 ak/sk存在</span><br><span class="line">String signData = getSignData(params.get(&quot;serviceName&quot;));</span><br><span class="line">String signature = SignUtil.sign(signData, sk);</span><br><span class="line">params.put(&quot;signature&quot;, signature);</span><br><span class="line">params.put(&quot;data&quot;, signData);</span><br><span class="line">params.put(&quot;ak&quot;, ak);</span><br></pre></td></tr></table></figure><h1 id="Service-Cluster-Instance-模型简单介绍"><a href="#Service-Cluster-Instance-模型简单介绍" class="headerlink" title="Service-Cluster-Instance 模型简单介绍"></a>Service-Cluster-Instance 模型简单介绍</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map(namespace, Map(group::serviceName, Service)).</span></span><br><span class="line"><span class="comment">     * 管理多个 Service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, Service&gt;&gt; serviceMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/02/nacos-2/nacos-Service.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Record</span>, <span class="title">RecordListener</span>&lt;<span class="title">Instances</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Cluster&gt; clusterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/02/nacos-2/nacos-Cluster.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Cluster</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Instance&gt; persistentInstances = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Instance&gt; ephemeralInstances = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/02/nacos-2/nacos-Instance.png"></p><h1 id="consistencyService-简单介绍"><a href="#consistencyService-简单介绍" class="headerlink" title="consistencyService 简单介绍"></a>consistencyService 简单介绍</h1><p><img src="/2021/02/02/nacos-2/nacos-consistencyService.png"></p><h1 id="服务端注册"><a href="#服务端注册" class="headerlink" title="服务端注册"></a>服务端注册</h1><p>com.alibaba.nacos.naming.controllers.InstanceController#register 方法接受请求</p><p>1 根据传入的参数构造 com.alibaba.nacos.naming.core.Instance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CanDistro</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.WRITE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String namespaceId = WebUtils</span><br><span class="line">                .optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">        <span class="keyword">final</span> String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">        NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据接受到的参数构造 Instance</span></span><br><span class="line">        <span class="keyword">final</span> Instance instance = parseInstance(request);</span><br><span class="line"></span><br><span class="line">        serviceManager.registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>instance 的值整理了下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">instance.setPort(nacosDiscoveryProperties.getIp());</span><br><span class="line">instance.setIp(nacosDiscoveryProperties.getIp());</span><br><span class="line">instance.setEphemeral(String.valueOf(nacosDiscoveryProperties.isEphemeral()));</span><br><span class="line">instance.setClusterName(nacosDiscoveryProperties.getClusterName());</span><br><span class="line">instance.setWeight(Double.parseDouble(String.valueOf(nacosDiscoveryProperties.getWeight())));</span><br><span class="line">instance.setHealthy(String.valueOf(instance.isHealthy() = true));</span><br><span class="line">instance.setEnabled(String.valueOf(nacosDiscoveryProperties.isInstanceEnabled()));</span><br><span class="line">instance.setApp(&quot;DEFAULT&quot;);</span><br><span class="line">instance.setServiceName(groupName + @@ + serviceName);</span><br><span class="line">instance.setInstanceId(getIp() + &quot;#&quot; + getPort() + &quot;#&quot; + getClusterName() + &quot;#&quot; + getServiceName(););</span><br><span class="line">instance.setLastBeat(System.currentTimeMillis());</span><br><span class="line">instance.setMetadata(UtilsAndCommons.parseMetadata(JacksonUtils.toJson(nacosDiscoveryProperties.getMetadata())));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerInstance</span><span class="params">(String namespaceId, String serviceName, Instance instance)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Service，如果不存在创建服务</span></span><br><span class="line">        createEmptyService(namespaceId, serviceName, instance.isEphemeral());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Service</span></span><br><span class="line">        Service service = getService(namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NacosException(NacosException.INVALID_PARAM,</span><br><span class="line">                    <span class="string">&quot;service not found, namespace: &quot;</span> + namespaceId + <span class="string">&quot;, service: &quot;</span> + serviceName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入实例</span></span><br><span class="line">        addInstance(namespaceId, serviceName, instance.isEphemeral(), instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 获取 Service， namespace 和 group::serviceName 确定唯一 Service，如果没有则创建 Service，consistencyService 监听 Service，一旦 consistencyService 数据更新了，告诉 Service 更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createServiceIfAbsent</span><span class="params">(String namespaceId, String serviceName, <span class="keyword">boolean</span> local, Cluster cluster)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        Service service = getService(namespaceId, serviceName);</span><br><span class="line">        <span class="comment">//如果没有 service 创建</span></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            Loggers.SRV_LOG.info(<span class="string">&quot;creating empty service &#123;&#125;:&#123;&#125;&quot;</span>, namespaceId, serviceName);</span><br><span class="line">            service = <span class="keyword">new</span> Service();</span><br><span class="line">            <span class="comment">//设置属性</span></span><br><span class="line">            service.setName(serviceName);</span><br><span class="line">            service.setNamespaceId(namespaceId);</span><br><span class="line">            service.setGroupName(NamingUtils.getGroupName(serviceName));</span><br><span class="line">            <span class="comment">// now validate the service. if failed, exception will be thrown</span></span><br><span class="line">            <span class="comment">// 现在验证服务。 如果失败，将引发异常</span></span><br><span class="line">            service.setLastModifiedMillis(System.currentTimeMillis());</span><br><span class="line">            service.recalculateChecksum();</span><br><span class="line">            <span class="keyword">if</span> (cluster != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cluster.setService(service);</span><br><span class="line">                service.getClusterMap().put(cluster.getName(), cluster);</span><br><span class="line">            &#125;</span><br><span class="line">            service.validate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重点方法</span></span><br><span class="line">            putServiceAndInit(service);</span><br><span class="line">            <span class="keyword">if</span> (!local) &#123;</span><br><span class="line">                addOrReplaceService(service);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putServiceAndInit</span><span class="params">(Service service)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="comment">//放入 serviceMap</span></span><br><span class="line">        putService(service);</span><br><span class="line">        <span class="comment">//初始化,后面定时任务讲解</span></span><br><span class="line">        service.init();</span><br><span class="line">        <span class="comment">//consistencyService 监听 Service，一旦 consistencyService 数据更新了，告诉 Service 更新</span></span><br><span class="line">        <span class="comment">//非持久化实例关注这个</span></span><br><span class="line">        consistencyService</span><br><span class="line">                .listen(KeyBuilder.buildInstanceListKey(service.getNamespaceId(), service.getName(), <span class="keyword">true</span>), service);</span><br><span class="line">        <span class="comment">//非持久化实例不关心这个</span></span><br><span class="line">        consistencyService</span><br><span class="line">                .listen(KeyBuilder.buildInstanceListKey(service.getNamespaceId(), service.getName(), <span class="keyword">false</span>), service);</span><br><span class="line">        Loggers.SRV_LOG.info(<span class="string">&quot;[NEW-SERVICE] &#123;&#125;&quot;</span>, service.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 service 下所有旧实例更新一些属性后和新实例合并一起，这里的旧实例，看ephemeral参数，true是非持久化实例，false是持久化实例，这里是非持久化实例， 把合并后实例列表更新进 consistencyService</p><p>addIpAddresses方法，会获取Cluster，名字不同确定唯一 Cluster ，如果没有创建 com.alibaba.nacos.naming.core.Cluster</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInstance</span><span class="params">(String namespaceId, String serviceName, <span class="keyword">boolean</span> ephemeral, Instance... ips)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个key,这个key 用于 consistencyService</span></span><br><span class="line">        String key = KeyBuilder.buildInstanceListKey(namespaceId, serviceName, ephemeral);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Service</span></span><br><span class="line">        Service service = getService(namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (service) &#123;</span><br><span class="line">            <span class="comment">//service 下所有旧实例更新一些属性后和新实例合并一起，</span></span><br><span class="line">            <span class="comment">//这里的旧实例，看ephemeral参数，true是非持久化实例，false是持久化实例</span></span><br><span class="line">            <span class="comment">//这里是非持久化实例</span></span><br><span class="line">            List&lt;Instance&gt; instanceList = addIpAddresses(service, ephemeral, ips);</span><br><span class="line"></span><br><span class="line">            Instances instances = <span class="keyword">new</span> Instances();</span><br><span class="line">            instances.setInstanceList(instanceList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把合并后实例列表更新进 consistencyService </span></span><br><span class="line">            consistencyService.put(key, instances);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Instance&gt; <span class="title">addIpAddresses</span><span class="params">(Service service, <span class="keyword">boolean</span> ephemeral, Instance... ips)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateIpAddresses(service, UtilsAndCommons.UPDATE_INSTANCE_ACTION_ADD, ephemeral, ips);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Instance&gt; <span class="title">updateIpAddresses</span><span class="params">(Service service, String action, <span class="keyword">boolean</span> ephemeral, Instance... ips)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Datum,存实例列表</span></span><br><span class="line">        Datum datum = consistencyService</span><br><span class="line">                .get(KeyBuilder.buildInstanceListKey(service.getNamespaceId(), service.getName(), ephemeral));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的非持久化实例</span></span><br><span class="line">        List&lt;Instance&gt; currentIPs = service.allIPs(ephemeral);</span><br><span class="line">        Map&lt;String, Instance&gt; currentInstances = <span class="keyword">new</span> HashMap&lt;&gt;(currentIPs.size());</span><br><span class="line">        Set&lt;String&gt; currentInstanceIds = Sets.newHashSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Instance instance : currentIPs) &#123;</span><br><span class="line">            currentInstances.put(instance.toIpAddr(), instance);</span><br><span class="line">            currentInstanceIds.add(instance.getInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Instance&gt; instanceMap;</span><br><span class="line">        <span class="keyword">if</span> (datum != <span class="keyword">null</span> &amp;&amp; <span class="keyword">null</span> != datum.value) &#123;</span><br><span class="line">            <span class="comment">//Cluster 比 Datum 新？</span></span><br><span class="line">            <span class="comment">//是的，Service 定时任务会修改 Cluster 下非持久化 Instance.healthy 属性，后面定时任务详细讲</span></span><br><span class="line">            <span class="comment">//客户端发送心跳，服务端处理心跳会修改 Cluster 下非持久化 Instance.healthy 和 Instance.lastBeat 属性</span></span><br><span class="line">            instanceMap = setValid(((Instances) datum.value).getInstanceList(), currentInstances);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//这种情况就是没有注册过，要不就是实例没有心跳，自动剔除实例，最后一个都不剩</span></span><br><span class="line">            instanceMap = <span class="keyword">new</span> HashMap&lt;&gt;(ips.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Instance instance : ips) &#123;</span><br><span class="line">            <span class="comment">//如果 instance.getClusterName() 对应的 Cluster 没有创建</span></span><br><span class="line">            <span class="keyword">if</span> (!service.getClusterMap().containsKey(instance.getClusterName())) &#123;</span><br><span class="line">                Cluster cluster = <span class="keyword">new</span> Cluster(instance.getClusterName(), service);</span><br><span class="line">                cluster.init();</span><br><span class="line">                service.getClusterMap().put(instance.getClusterName(), cluster);</span><br><span class="line">                Loggers.SRV_LOG</span><br><span class="line">                        .warn(<span class="string">&quot;cluster: &#123;&#125; not found, ip: &#123;&#125;, will create new cluster with default configuration.&quot;</span>,</span><br><span class="line">                                instance.getClusterName(), instance.toJson());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (UtilsAndCommons.UPDATE_INSTANCE_ACTION_REMOVE.equals(action)) &#123;</span><br><span class="line">                <span class="comment">//移除实例</span></span><br><span class="line">                instanceMap.remove(instance.getDatumKey());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//ADD action</span></span><br><span class="line">                Instance oldInstance = instanceMap.get(instance.getDatumKey());</span><br><span class="line">                <span class="comment">//重新设置 instanceId</span></span><br><span class="line">                <span class="keyword">if</span> (oldInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance.setInstanceId(oldInstance.getInstanceId());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    instance.setInstanceId(instance.generateInstanceId(currentInstanceIds));</span><br><span class="line">                &#125;</span><br><span class="line">                instanceMap.put(instance.getDatumKey(), instance);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instanceMap.size() &lt;= <span class="number">0</span> &amp;&amp; UtilsAndCommons.UPDATE_INSTANCE_ACTION_ADD.equals(action)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;ip list can not be empty, service: &quot;</span> + service.getName() + <span class="string">&quot;, ip list: &quot;</span> + JacksonUtils</span><br><span class="line">                            .toJson(instanceMap.values()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(instanceMap.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 实际就是DataStore存入合并后实例，回调监听的 Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title">EphemeralConsistencyService</span>, <span class="title">DistroDataProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Record value)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        <span class="comment">//将注册实例更新到内存注册表中</span></span><br><span class="line">        onPut(key, value);</span><br><span class="line">        <span class="comment">//复制新数据到服务集群中</span></span><br><span class="line">        distroProtocol.sync(<span class="keyword">new</span> DistroKey(key, KeyBuilder.INSTANCE_LIST_KEY_PREFIX), DataOperation.CHANGE,</span><br><span class="line">                globalConfig.getTaskDispatchPeriod() / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPut</span><span class="params">(String key, Record value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (KeyBuilder.matchEphemeralInstanceListKey(key)) &#123;</span><br><span class="line">            Datum&lt;Instances&gt; datum = <span class="keyword">new</span> Datum&lt;&gt;();</span><br><span class="line">            datum.value = (Instances) value;</span><br><span class="line">            datum.key = key;</span><br><span class="line">            datum.timestamp.incrementAndGet();</span><br><span class="line">            <span class="comment">//存入内存注册表</span></span><br><span class="line">            dataStore.put(key, datum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!listeners.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调监听的 Service，注意key值要相同</span></span><br><span class="line">        notifier.addTask(key, DataOperation.CHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 Service被告知数据更新了，把新合并后实例更新到 Cluster 相应实例集合</p><p>从这里开始会出现以下方法，这个方法和服务发现有关，在服务发现讲解，暂时跳过</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getPushService().serviceChanged(this);</span><br><span class="line">getPushService().serviceChanged(service);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Record</span>, <span class="title">RecordListener</span>&lt;<span class="title">Instances</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//当 Instances 更新了就会调用这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(String key, Instances value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Loggers.SRV_LOG.info(<span class="string">&quot;[NACOS-RAFT] datum is changed, key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Instance instance : value.getInstanceList()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Reject this abnormal instance list:</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;got null instance &quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (instance.getWeight() &gt; <span class="number">10000.0D</span>) &#123;</span><br><span class="line">                instance.setWeight(<span class="number">10000.0D</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (instance.getWeight() &lt; <span class="number">0.01D</span> &amp;&amp; instance.getWeight() &gt; <span class="number">0.0D</span>) &#123;</span><br><span class="line">                instance.setWeight(<span class="number">0.01D</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重点方法</span></span><br><span class="line">        updateIPs(value.getInstanceList(), KeyBuilder.matchEphemeralInstanceListKey(key));</span><br><span class="line"></span><br><span class="line">        recalculateChecksum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIPs</span><span class="params">(Collection&lt;Instance&gt; instances, <span class="keyword">boolean</span> ephemeral)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;Instance&gt;&gt; ipMap = <span class="keyword">new</span> HashMap&lt;&gt;(clusterMap.size());</span><br><span class="line">        <span class="keyword">for</span> (String clusterName : clusterMap.keySet()) &#123;</span><br><span class="line">            ipMap.put(clusterName, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Loggers.SRV_LOG.error(<span class="string">&quot;[NACOS-DOM] received malformed ip: null&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(instance.getClusterName())) &#123;</span><br><span class="line">                    instance.setClusterName(UtilsAndCommons.DEFAULT_CLUSTER_NAME);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果对应的 Cluster 不存在</span></span><br><span class="line">                <span class="keyword">if</span> (!clusterMap.containsKey(instance.getClusterName())) &#123;</span><br><span class="line">                    Loggers.SRV_LOG</span><br><span class="line">                            .warn(<span class="string">&quot;cluster: &#123;&#125; not found, ip: &#123;&#125;, will create new cluster with default configuration.&quot;</span>,</span><br><span class="line">                                    instance.getClusterName(), instance.toJson());</span><br><span class="line">                    <span class="comment">//创建 Cluster</span></span><br><span class="line">                    Cluster cluster = <span class="keyword">new</span> Cluster(instance.getClusterName(), <span class="keyword">this</span>);</span><br><span class="line">                    <span class="comment">//初始化，定时任务讲解</span></span><br><span class="line">                    cluster.init();</span><br><span class="line">                    getClusterMap().put(instance.getClusterName(), cluster);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Cluster 不存在时，重新创建集合</span></span><br><span class="line">                List&lt;Instance&gt; clusterIPs = ipMap.get(instance.getClusterName());</span><br><span class="line">                <span class="keyword">if</span> (clusterIPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clusterIPs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                    ipMap.put(instance.getClusterName(), clusterIPs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把实例放入 clusterIPs</span></span><br><span class="line">                clusterIPs.add(instance);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.SRV_LOG.error(<span class="string">&quot;[NACOS-DOM] failed to process ip: &quot;</span> + instance, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Instance&gt;&gt; entry : ipMap.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//make every ip mine</span></span><br><span class="line">            List&lt;Instance&gt; entryIPs = entry.getValue();</span><br><span class="line">            <span class="comment">//新合并后实例更新到 Cluster 相应实例集合</span></span><br><span class="line">            clusterMap.get(entry.getKey()).updateIps(entryIPs, ephemeral);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setLastModifiedMillis(System.currentTimeMillis());</span><br><span class="line">        getPushService().serviceChanged(<span class="keyword">this</span>);</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Instance instance : allIPs()) &#123;</span><br><span class="line">            stringBuilder.append(instance.toIpAddr()).append(<span class="string">&quot;_&quot;</span>).append(instance.isHealthy()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Loggers.EVT_LOG.info(<span class="string">&quot;[IP-UPDATED] namespace: &#123;&#125;, service: &#123;&#125;, ips: &#123;&#125;&quot;</span>, getNamespaceId(), getName(),</span><br><span class="line">                stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6 更新 ephemeralInstances</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Cluster</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIps</span><span class="params">(List&lt;Instance&gt; ips, <span class="keyword">boolean</span> ephemeral)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;Instance&gt; toUpdateInstances = ephemeral ? ephemeralInstances : persistentInstances;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Instance&gt; oldIpMap = <span class="keyword">new</span> HashMap&lt;&gt;(toUpdateInstances.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 toUpdateInstances 获取旧数据</span></span><br><span class="line">        <span class="keyword">for</span> (Instance ip : toUpdateInstances) &#123;</span><br><span class="line">            oldIpMap.put(ip.getDatumKey(), ip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ips 和 老集合对比找出需要更新的实例集合</span></span><br><span class="line">        List&lt;Instance&gt; updatedIPs = updatedIps(ips, oldIpMap.values());</span><br><span class="line">        <span class="keyword">if</span> (updatedIPs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Instance ip : updatedIPs) &#123;</span><br><span class="line">                Instance oldIP = oldIpMap.get(ip.getDatumKey());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// do not update the ip validation status of updated ips</span></span><br><span class="line">                <span class="comment">// because the checker has the most precise result</span></span><br><span class="line">                <span class="comment">// Only when ip is not marked, don&#x27;t we update the health status of IP:</span></span><br><span class="line">                <span class="keyword">if</span> (!ip.isMarked()) &#123;</span><br><span class="line">                    ip.setHealthy(oldIP.isHealthy());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ip.isHealthy() != oldIP.isHealthy()) &#123;</span><br><span class="line">                    <span class="comment">// ip validation status updated</span></span><br><span class="line">                    Loggers.EVT_LOG.info(<span class="string">&quot;&#123;&#125; &#123;SYNC&#125; IP-&#123;&#125; &#123;&#125;:&#123;&#125;@&#123;&#125;&quot;</span>, getService().getName(),</span><br><span class="line">                            (ip.isHealthy() ? <span class="string">&quot;ENABLED&quot;</span> : <span class="string">&quot;DISABLED&quot;</span>), ip.getIp(), ip.getPort(), getName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ip.getWeight() != oldIP.getWeight()) &#123;</span><br><span class="line">                    <span class="comment">// ip validation status updated</span></span><br><span class="line">                    Loggers.EVT_LOG.info(<span class="string">&quot;&#123;&#125; &#123;SYNC&#125; &#123;IP-UPDATED&#125; &#123;&#125;-&gt;&#123;&#125;&quot;</span>, getService().getName(), oldIP.toString(),</span><br><span class="line">                            ip.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新加入的实例</span></span><br><span class="line">        List&lt;Instance&gt; newIPs = subtract(ips, oldIpMap.values());</span><br><span class="line">        <span class="keyword">if</span> (newIPs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Loggers.EVT_LOG</span><br><span class="line">                    .info(<span class="string">&quot;&#123;&#125; &#123;SYNC&#125; &#123;IP-NEW&#125; cluster: &#123;&#125;, new ips size: &#123;&#125;, content: &#123;&#125;&quot;</span>, getService().getName(),</span><br><span class="line">                            getName(), newIPs.size(), newIPs.toString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Instance ip : newIPs) &#123;</span><br><span class="line">                <span class="comment">//初始化 HealthCheckStatus</span></span><br><span class="line">                HealthCheckStatus.reset(ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Instance&gt; deadIPs = subtract(oldIpMap.values(), ips);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deadIPs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Loggers.EVT_LOG</span><br><span class="line">                    .info(<span class="string">&quot;&#123;&#125; &#123;SYNC&#125; &#123;IP-DEAD&#125; cluster: &#123;&#125;, dead ips size: &#123;&#125;, content: &#123;&#125;&quot;</span>, getService().getName(),</span><br><span class="line">                            getName(), deadIPs.size(), deadIPs.toString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Instance ip : deadIPs) &#123;</span><br><span class="line">                HealthCheckStatus.remv(ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toUpdateInstances = <span class="keyword">new</span> HashSet&lt;&gt;(ips);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ephemeral) &#123;</span><br><span class="line">            <span class="comment">//更新 toUpdateInstances</span></span><br><span class="line">            ephemeralInstances = toUpdateInstances;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            persistentInstances = toUpdateInstances;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务-1"><a href="#定时任务-1" class="headerlink" title="定时任务"></a>定时任务</h2><p>在前面服务注册的时候创建了定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Record</span>, <span class="title">RecordListener</span>&lt;<span class="title">Instances</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//起一个调度任务</span></span><br><span class="line">        HealthCheckReactor.scheduleCheck(clientBeatCheckTask);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Cluster&gt; entry : clusterMap.entrySet()) &#123;</span><br><span class="line">            entry.getValue().setService(<span class="keyword">this</span>);</span><br><span class="line">            entry.getValue().init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每5秒循环执行 clientBeatCheckTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientBeatCheckTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//单机模式返回 true</span></span><br><span class="line">            <span class="keyword">if</span> (!getDistroMapper().responsible(service.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//默认为true</span></span><br><span class="line">            <span class="keyword">if</span> (!getSwitchDomain().isHealthCheckEnabled()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取非持久化实例</span></span><br><span class="line">            List&lt;Instance&gt; instances = service.allIPs(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// first set health status of instances:</span></span><br><span class="line">            <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">                <span class="comment">//目前时间 大于 实例最后更新时间 加 实例超时时间（默认15秒）</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() - instance.getLastBeat() &gt; instance.getInstanceHeartBeatTimeOut()) &#123;</span><br><span class="line">                    <span class="comment">//默认 false</span></span><br><span class="line">                    <span class="keyword">if</span> (!instance.isMarked()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (instance.isHealthy()) &#123;</span><br><span class="line">                            <span class="comment">//设置状态</span></span><br><span class="line">                            instance.setHealthy(<span class="keyword">false</span>);</span><br><span class="line">                            Loggers.EVT_LOG</span><br><span class="line">                                    .info(<span class="string">&quot;&#123;POS&#125; &#123;IP-DISABLED&#125; valid: &#123;&#125;:&#123;&#125;@&#123;&#125;@&#123;&#125;, region: &#123;&#125;, msg: client timeout after &#123;&#125;, last beat: &#123;&#125;&quot;</span>,</span><br><span class="line">                                            instance.getIp(), instance.getPort(), instance.getClusterName(),</span><br><span class="line">                                            service.getName(), UtilsAndCommons.LOCALHOST_SITE,</span><br><span class="line">                                            instance.getInstanceHeartBeatTimeOut(), instance.getLastBeat());</span><br><span class="line">                            getPushService().serviceChanged(service);</span><br><span class="line">                            <span class="comment">//没有使用</span></span><br><span class="line">                            ApplicationUtils.publishEvent(<span class="keyword">new</span> InstanceHeartbeatTimeoutEvent(<span class="keyword">this</span>, instance));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!getGlobalConfig().isExpireInstance()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// then remove obsolete instances:</span></span><br><span class="line">            <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//默认 false</span></span><br><span class="line">                <span class="keyword">if</span> (instance.isMarked()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//当前时间 大于 实例最后更新时间 加 实例删除超时时间(默认30秒)</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() - instance.getLastBeat() &gt; instance.getIpDeleteTimeout()) &#123;</span><br><span class="line">                    <span class="comment">// delete instance</span></span><br><span class="line">                    Loggers.SRV_LOG.info(<span class="string">&quot;[AUTO-DELETE-IP] service: &#123;&#125;, ip: &#123;&#125;&quot;</span>, service.getName(),</span><br><span class="line">                            JacksonUtils.toJson(instance));</span><br><span class="line">                    <span class="comment">// delete 请求 /nacos/v1/ns/instance 删除实例，服务端处理文章后面详细讲</span></span><br><span class="line">                    deleteIp(instance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;Exception while processing client beat time out.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cluster.init();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">nacos</span>.<span class="title">api</span>.<span class="title">naming</span>.<span class="title">pojo</span>.<span class="title">Cluster</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inited) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        checkTask = <span class="keyword">new</span> HealthCheckTask(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        HealthCheckReactor.scheduleCheck(checkTask);</span><br><span class="line">        inited = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>todo</p><p>这个任务主要检测持久化实例有没有挂，是服务端主动探测的</p><h1 id="服务端删除实例"><a href="#服务端删除实例" class="headerlink" title="服务端删除实例"></a>服务端删除实例</h1><p>Server 定时任务在删除实例超时后会主动删除实例，delete 请求 /nacos/v1/ns/instance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceController</span> </span>&#123; </span><br><span class="line">    <span class="meta">@CanDistro</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.WRITE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deregister</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Instance instance = getIpAddress(request);</span><br><span class="line">      String namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">      String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">      NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line"></span><br><span class="line">      Service service = serviceManager.getService(namespaceId, serviceName);</span><br><span class="line">      <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Loggers.SRV_LOG.warn(<span class="string">&quot;remove instance from non-exist service: &#123;&#125;&quot;</span>, serviceName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//移除实例</span></span><br><span class="line">      serviceManager.removeInstance(namespaceId, serviceName, instance.isEphemeral(), instance);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> <span class="keyword">implements</span> <span class="title">RecordListener</span>&lt;<span class="title">Service</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeInstance</span><span class="params">(String namespaceId, String serviceName, <span class="keyword">boolean</span> ephemeral, Service service,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Instance... ips)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String key = KeyBuilder.buildInstanceListKey(namespaceId, serviceName, ephemeral);</span><br><span class="line">        </span><br><span class="line">        List&lt;Instance&gt; instanceList = substractIpAddresses(service, ephemeral, ips);</span><br><span class="line">        </span><br><span class="line">        Instances instances = <span class="keyword">new</span> Instances();</span><br><span class="line">        instances.setInstanceList(instanceList);</span><br><span class="line">        </span><br><span class="line">        consistencyService.put(key, instances);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑和服务注册差不多</p><h1 id="服务端心跳处理"><a href="#服务端心跳处理" class="headerlink" title="服务端心跳处理"></a>服务端心跳处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceController</span> </span>&#123;</span><br><span class="line"><span class="meta">@CanDistro</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/beat&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.WRITE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectNode <span class="title">beat</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始解析参数</span></span><br><span class="line">        ObjectNode result = JacksonUtils.createEmptyJsonNode();</span><br><span class="line">        <span class="comment">//默认5秒</span></span><br><span class="line">        result.put(SwitchEntry.CLIENT_BEAT_INTERVAL, switchDomain.getClientBeatInterval());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次发心跳不会为空,第二次开始后面会一直为空</span></span><br><span class="line">        String beat = WebUtils.optional(request, <span class="string">&quot;beat&quot;</span>, StringUtils.EMPTY);</span><br><span class="line">        RsInfo clientBeat = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(beat)) &#123;</span><br><span class="line">            clientBeat = JacksonUtils.toObj(beat, RsInfo.class);</span><br><span class="line">        &#125;</span><br><span class="line">        String clusterName = WebUtils</span><br><span class="line">                .optional(request, CommonParams.CLUSTER_NAME, UtilsAndCommons.DEFAULT_CLUSTER_NAME);</span><br><span class="line">        String ip = WebUtils.optional(request, <span class="string">&quot;ip&quot;</span>, StringUtils.EMPTY);</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(WebUtils.optional(request, <span class="string">&quot;port&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (clientBeat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(clientBeat.getCluster())) &#123;</span><br><span class="line">                clusterName = clientBeat.getCluster();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// fix #2533</span></span><br><span class="line">                clientBeat.setCluster(clusterName);</span><br><span class="line">            &#125;</span><br><span class="line">            ip = clientBeat.getIp();</span><br><span class="line">            port = clientBeat.getPort();</span><br><span class="line">        &#125;</span><br><span class="line">        String namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">        String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">        NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line">        Loggers.SRV_LOG.debug(<span class="string">&quot;[CLIENT-BEAT] full arguments: beat: &#123;&#125;, serviceName: &#123;&#125;&quot;</span>, clientBeat, serviceName);</span><br><span class="line">        <span class="comment">//用解析后的参数找到实例</span></span><br><span class="line">        Instance instance = serviceManager.getInstance(namespaceId, serviceName, clusterName, ip, port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//实例为空，clientBeat也为空，之前是发过心跳，但是心跳到了删除超时时间没发心跳，导致自动删除了</span></span><br><span class="line">            <span class="keyword">if</span> (clientBeat == <span class="keyword">null</span>) &#123;</span><br><span class="line">                result.put(CommonParams.CODE, NamingResponseCode.RESOURCE_NOT_FOUND);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Loggers.SRV_LOG.warn(<span class="string">&quot;[CLIENT-BEAT] The instance has been removed for health mechanism, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;perform data compensation operations, beat: &#123;&#125;, serviceName: &#123;&#125;&quot;</span>, clientBeat, serviceName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例为空，客户端没来得及注册，但是心跳先发了</span></span><br><span class="line">            instance = <span class="keyword">new</span> Instance();</span><br><span class="line">            instance.setPort(clientBeat.getPort());</span><br><span class="line">            instance.setIp(clientBeat.getIp());</span><br><span class="line">            instance.setWeight(clientBeat.getWeight());</span><br><span class="line">            instance.setMetadata(clientBeat.getMetadata());</span><br><span class="line">            instance.setClusterName(clusterName);</span><br><span class="line">            instance.setServiceName(serviceName);</span><br><span class="line">            instance.setInstanceId(instance.getInstanceId());</span><br><span class="line">            instance.setEphemeral(clientBeat.isEphemeral());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册</span></span><br><span class="line">            serviceManager.registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Service service = serviceManager.getService(namespaceId, serviceName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NacosException(NacosException.SERVER_ERROR,</span><br><span class="line">                    <span class="string">&quot;service not found: &quot;</span> + serviceName + <span class="string">&quot;@&quot;</span> + namespaceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不是第一次发心跳</span></span><br><span class="line">        <span class="keyword">if</span> (clientBeat == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clientBeat = <span class="keyword">new</span> RsInfo();</span><br><span class="line">            clientBeat.setIp(ip);</span><br><span class="line">            clientBeat.setPort(port);</span><br><span class="line">            clientBeat.setCluster(clusterName);</span><br><span class="line">        &#125;</span><br><span class="line">        service.processClientBeat(clientBeat);</span><br><span class="line"></span><br><span class="line">        result.put(CommonParams.CODE, NamingResponseCode.OK);</span><br><span class="line">        <span class="keyword">if</span> (instance.containsMetadata(PreservedMetadataKeys.HEART_BEAT_INTERVAL)) &#123;</span><br><span class="line">            result.put(SwitchEntry.CLIENT_BEAT_INTERVAL, instance.getInstanceHeartBeatInterval());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置为 true 返回</span></span><br><span class="line">        result.put(SwitchEntry.LIGHT_BEAT_ENABLED, switchDomain.isLightBeatEnabled());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后交给定时任务执行，设置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientBeatProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Service service = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">if</span> (Loggers.EVT_LOG.isDebugEnabled()) &#123;</span><br><span class="line">      Loggers.EVT_LOG.debug(<span class="string">&quot;[CLIENT-BEAT] processing beat: &#123;&#125;&quot;</span>, rsInfo.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String ip = rsInfo.getIp();</span><br><span class="line">    String clusterName = rsInfo.getCluster();</span><br><span class="line">    <span class="keyword">int</span> port = rsInfo.getPort();</span><br><span class="line">    Cluster cluster = service.getClusterMap().get(clusterName);</span><br><span class="line">    <span class="comment">//获取非持久化实例</span></span><br><span class="line">    List&lt;Instance&gt; instances = cluster.allIPs(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance.getIp().equals(ip) &amp;&amp; instance.getPort() == port) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Loggers.EVT_LOG.isDebugEnabled()) &#123;</span><br><span class="line">          Loggers.EVT_LOG.debug(<span class="string">&quot;[CLIENT-BEAT] refresh beat: &#123;&#125;&quot;</span>, rsInfo.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置最后心跳更新时间</span></span><br><span class="line">        instance.setLastBeat(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">if</span> (!instance.isMarked()) &#123;</span><br><span class="line">          <span class="comment">//之前设置过false</span></span><br><span class="line">          <span class="keyword">if</span> (!instance.isHealthy()) &#123;</span><br><span class="line">            <span class="comment">//重新设置为ture</span></span><br><span class="line">            instance.setHealthy(<span class="keyword">true</span>);</span><br><span class="line">            Loggers.EVT_LOG</span><br><span class="line">                    .info(<span class="string">&quot;service: &#123;&#125; &#123;POS&#125; &#123;IP-ENABLED&#125; valid: &#123;&#125;:&#123;&#125;@&#123;&#125;, region: &#123;&#125;, msg: client beat ok&quot;</span>,</span><br><span class="line">                            cluster.getService().getName(), ip, port, cluster.getName(),</span><br><span class="line">                            UtilsAndCommons.LOCALHOST_SITE);</span><br><span class="line">            getPushService().serviceChanged(service);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nacos 版本 1.4.1&lt;/p&gt;
&lt;h1 id=&quot;客户端非持久化注册，AP模式&quot;&gt;&lt;a href=&quot;#客户端非持久化注册，AP模式&quot; class=&quot;headerlink&quot; title=&quot;客户端非持久化注册，AP模式&quot;&gt;&lt;/a&gt;客户端非持久化注册，AP模式&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="nacos" scheme="https://xxnjdg.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-gateway源码笔记1</title>
    <link href="https://xxnjdg.github.io/2021/01/26/spring-cloud-gateway-one/"/>
    <id>https://xxnjdg.github.io/2021/01/26/spring-cloud-gateway-one/</id>
    <published>2021-01-26T09:29:15.000Z</published>
    <updated>2021-01-27T10:14:02.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/spring-cloud/spring-cloud-gateway.git</span><br></pre></td></tr></table></figure><p>用idea打开后发现master分支pom.xml文件parent找不到版本，在阿里云仓库找不到，不知道什么原因</p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_18-17-24.png"></p><p>看了下github当前tag版本是v3.0.0</p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_18-22-11.png"></p><p>在idea切换v3.0.0的tag</p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_18-23-50.png"></p><p>还是有错误，是插件没指定版本，这个暂时不管他了，因为切到了tag,没有指定分支，所以这时候要<br>new 一个自己的分支出来</p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_18-25-51.png"></p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_19-21-14.png"></p><p>项目要想使用gateway就需要加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源码在如下的位置，它依赖了自身 spring-cloud-gateway-server 模块 </p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_19-28-08.png"></p><p>接下来重点看下 spring-cloud-gateway-server 模块</p><h1 id="spring-cloud-gateway-server"><a href="#spring-cloud-gateway-server" class="headerlink" title="spring-cloud-gateway-server"></a>spring-cloud-gateway-server</h1><p>自动配置</p><p><img src="/2021/01/26/spring-cloud-gateway-one/Snipaste_2021-01-26_19-58-11.png"></p><p>能确定的是在初始化 GatewayAutoConfiguration 配置之前有以下4个配置,这4个配置也没法办确定顺序，按顺序看好了<br>，GatewayAutoConfiguration 配置之后的配置不属于这个项目</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.discovery.GatewayDiscoveryClientAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayReactiveLoadBalancerClientAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayAutoConfiguration</span><br></pre></td></tr></table></figure><p>剩下的没法确定顺序，按顺序看就好了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.gateway.config.GatewayResilience4JCircuitBreakerAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayMetricsAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.SimpleUrlHandlerMappingGlobalCorsAutoConfiguration</span><br><span class="line">org.springframework.cloud.gateway.config.GatewayReactiveOAuth2AutoConfiguration</span><br></pre></td></tr></table></figure><p>DiscoveryClientRouteDefinitionLocator<br>ReactiveLoadBalancerClientFilter<br>RedisRateLimiter</p><p>fromIterable</p><p>PredicateArgsEvent</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;克隆代码&quot;&gt;&lt;a href=&quot;#克隆代码&quot; class=&quot;headerlink&quot; title=&quot;克隆代码&quot;&gt;&lt;/a&gt;克隆代码&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="spring cloud" scheme="https://xxnjdg.github.io/categories/spring-cloud/"/>
    
    
    <category term="spring-cloud-gateway" scheme="https://xxnjdg.github.io/tags/spring-cloud-gateway/"/>
    
  </entry>
  
  <entry>
    <title>nacos学习笔记-1</title>
    <link href="https://xxnjdg.github.io/2021/01/25/nacos-1/"/>
    <id>https://xxnjdg.github.io/2021/01/25/nacos-1/</id>
    <published>2021-01-25T13:39:48.000Z</published>
    <updated>2021-02-14T10:24:03.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载与运行"><a href="#下载与运行" class="headerlink" title="下载与运行"></a>下载与运行</h1><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="/2021/01/25/nacos-1/Snipaste_2021-01-25_05-31-53.png"></p><p>如果下载慢，可复制下面链接到迅雷等下载器下载</p><p><a href="https://github.com.cnpmjs.org/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.zip">https://github.com.cnpmjs.org/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.zip</a></p><p>进入bin目录执行命令，以单机模式启动nacos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ddd@DESKTOP-OKBQRKQ MINGW64 /d/nacos-server-1.4.1/nacos/bin</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./startup.cmd -m standalone</span></span><br><span class="line">&quot;nacos is starting with standalone&quot;</span><br><span class="line"></span><br><span class="line">         ,--.</span><br><span class="line">       ,--.&#x27;|</span><br><span class="line">   ,--,:  : |                                           Nacos 1.4.1</span><br><span class="line">,`--.&#x27;`|  &#x27; :                       ,---.               Running in stand alone mode, All function modules</span><br><span class="line">|   :  :  | |                      &#x27;   ,&#x27;\   .--.--.    Port: 8848</span><br><span class="line">:   |   \ | :  ,--.--.     ,---.  /   /   | /  /    &#x27;   Pid: 13260</span><br><span class="line">|   : &#x27;  &#x27;; | /       \   /     \.   ; ,. :|  :  /`./   Console: http://192.168.56.1:8848/nacos/index.html</span><br><span class="line">&#x27;   &#x27; ;.    ;.--.  .-. | /    / &#x27;&#x27;   | |: :|  :  ;_</span><br><span class="line">|   | | \   | \__\/: . ..    &#x27; / &#x27;   | .; : \  \    `.      https://nacos.io</span><br><span class="line">&#x27;   : |  ; .&#x27; ,&quot; .--.; |&#x27;   ; :__|   :    |  `----.   \</span><br><span class="line">|   | &#x27;`--&#x27;  /  /  ,.  |&#x27;   | &#x27;.&#x27;|\   \  /  /  /`--&#x27;  /</span><br><span class="line">&#x27;   : |     ;  :   .&#x27;   \   :    : `----&#x27;  &#x27;--&#x27;.     /</span><br><span class="line">;   |.&#x27;     |  ,     .-./\   \  /            `--&#x27;---&#x27;</span><br><span class="line">&#x27;---&#x27;        `--`---&#x27;     `----&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://localhost:8848/nacos/">http://localhost:8848/nacos/</a> 访问nacos</p><p>账号和密码默认是 nacos</p><p><img src="/2021/01/25/nacos-1/Snipaste_2021-01-25_05-52-32.png"></p><p><img src="/2021/01/25/nacos-1/Snipaste_2021-01-25_05-53-10.png"></p><h1 id="注册一个服务进nacos"><a href="#注册一个服务进nacos" class="headerlink" title="注册一个服务进nacos"></a>注册一个服务进nacos</h1><p><a href="https://github.com/xxnjdg/learning-spring-cloud-alibaba/tree/master/learning-spring-cloud-alibaba-nacos/nacos-example-one">完整代码示例</a></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27991</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-example-one</span></span><br><span class="line">  <span class="comment"># 注册中心nacos地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.14</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p>启动服务后，打开控制台，看到自己注册的服务名，表示成功注册</p><p><img src="/2021/01/25/nacos-1/Snipaste_2021-01-25_06-38-07.png"></p><h1 id="客户端配置属性"><a href="#客户端配置属性" class="headerlink" title="客户端配置属性"></a>客户端配置属性</h1><table>    <tr>        <td>配置项</td>         <td>key</td>        <td>默认值</td>         <td>说明</td>    </tr>    <tr bgcolor="#adff2f">        <td>服务端地址</td>        <td>spring.cloud.nacos.discovery.server-addr</td>        <td>localhost:8848</td>        <td>Nacos Server 启动监听的ip地址和端口,可以写多个地址，用逗号分割</td>    </tr>    <tr>        <td>用户名</td>        <td>spring.cloud.nacos.discovery.username</td>        <td></td>        <td>要打开才生效</td>    </tr>    <tr>        <td>密码</td>        <td>spring.cloud.nacos.discovery.password</td>        <td></td>        <td>要打开才生效</td>    </tr>    <tr>        <td>接入点</td>        <td>spring.cloud.nacos.discovery.endpoint</td>        <td></td>        <td>地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</td>    </tr>    <tr bgcolor="#adff2f">        <td>命名空间</td>        <td>spring.cloud.nacos.discovery.namespace</td>        <td></td>        <td>常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等，clinet端不填，服务端默认给public</td>    </tr>    <tr>        <td>nacos watch</td>        <td>spring.cloud.nacos.discovery.watch-delay</td>        <td>30000ms</td>        <td>todo</td>    </tr>    <tr>        <td>是否开启Nacos Watch</td>        <td>spring.cloud.nacos.discovery.watch.enabled</td>        <td>true</td>        <td>可以设置成false来关闭 watch</td>    </tr>    <tr>        <td>日志文件名</td>        <td>spring.cloud.nacos.discovery.log-name</td>        <td></td>        <td></td>    </tr>    <tr bgcolor="#adff2f">        <td>服务名</td>        <td>spring.cloud.nacos.discovery.service</td>        <td>${spring.application.name}</td>        <td>注册的服务名</td>    </tr>    <tr>        <td>权重</td>        <td>spring.cloud.nacos.discovery.weight</td>        <td>1.0</td>        <td>取值范围 1 到 100，数值越大，权重越大</td>    </tr>    <tr>        <td>集群</td>        <td>spring.cloud.nacos.discovery.cluster-name</td>        <td>DEFAULT</td>        <td>Nacos集群名称</td>    </tr>    <tr bgcolor="#adff2f">        <td>组</td>        <td>spring.cloud.nacos.discovery.group</td>        <td>DEFAULT_GROUP</td>        <td>Nacos组名称</td>    </tr>    <tr>        <td>服务发现列表缓存预加载</td>        <td>spring.cloud.nacos.discovery.naming-load-cache-at-start</td>        <td>false</td>        <td>为true时会先从缓存文件读取服务列表，客户端向服务端请求到的服务列表会写入到缓存文件，等请求到服务列表和当前的列表不同时会重新写入到缓存文件中</td>    </tr>    <tr>        <td>元数据</td>        <td>spring.cloud.nacos.discovery.metadata</td>        <td>{preserved.register.source=<br>SPRING_CLOUD}</td>        <td>使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</td>    </tr>    <tr>        <td>是否启动注册</td>        <td>spring.cloud.nacos.discovery.register-enabled</td>        <td>true</td>        <td>为true服务启动时会自动注册进注册中心</td>    </tr>    <tr>        <td>注册客户端的IP地址</td>        <td>spring.cloud.nacos.discovery.ip</td>        <td>分情况</td>        <td>优先级最高，如果没有配置此项，此时网卡名配了，看网卡名说明，否则用<br>inetUtils.findFirstNonLoopbackHostInfo()<br>.getIpAddress()生成</td>    </tr>    <tr>        <td>网卡名</td>        <td>spring.cloud.nacos.discovery.network-interface</td>        <td></td>        <td>当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</td>    </tr>    <tr>        <td>注册的客户端端口</td>        <td>spring.cloud.nacos.discovery.port</td>        <td>${server.port}</td>        <td>默认情况下不用配置，会自动探测</td>    </tr>    <tr>        <td>todo</td>        <td>spring.cloud.nacos.discovery.secure</td>        <td>false</td>        <td></td>    </tr>    <tr>        <td>AccessKey</td>        <td>spring.cloud.nacos.discovery.access-key</td>        <td></td>        <td>当要上阿里云时，阿里云上面的一个云账号名</td>    </tr>    <tr>        <td>SecretKey</td>        <td>spring.cloud.nacos.discovery.secret-key</td>        <td></td>        <td>当要上阿里云时，阿里云上面的一个云账号密码</td>    </tr>    <tr>        <td>客户端心跳间隔</td>        <td>spring.cloud.nacos.discovery.heart-beat-interval</td>        <td></td>        <td>如果不填，服务端会指定默认为5s,客户端5s发送心跳</td>    </tr>    <tr>        <td>客户端心跳超时时间</td>        <td>spring.cloud.nacos.discovery.heart-beat-timeout</td>        <td></td>        <td>如果不填，服务端会指定默认为15s,超过15s没有发送心跳，服务端修改客户端状态为不健康，但不会剔除客户端</td>    </tr>    <tr>        <td>客户端ip删除时间</td>        <td>spring.cloud.nacos.discovery.ip-delete-timeout</td>        <td></td>        <td>如果不填，服务端会指定默认为30s,超过30s没有发送心跳，服务自动剔除客户端</td>    </tr>    <tr>        <td>实例是否启动</td>        <td>spring.cloud.nacos.discovery.instance-enabled</td>        <td>true</td>        <td>实例是否启动</td>    </tr>    <tr>        <td>是否是非持久化实例</td>        <td>spring.cloud.nacos.discovery.ephemeral</td>        <td>true</td>        <td>true为非持久化实例，非持久化实例会定期上传心跳，告诉服务端他是健康的</td>    </tr></table><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#*************** Spring Boot Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Default web context path:</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="comment">### Default web server port:</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Network Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If prefer hostname over ip for Nacos server addresses in cluster.conf:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.prefer-hostname-over-ip=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Specify local server&#x27;s IP:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.ip-address=</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="comment"># spring.datasource.platform=mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="comment"># db.num=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="comment"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment"># db.user.0=nacos</span></span><br><span class="line"><span class="comment"># db.password.0=nacos</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Connection pool configuration: hikariCP</span></span><br><span class="line"><span class="meta">db.pool.config.connectionTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="meta">db.pool.config.validationTimeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="meta">db.pool.config.maximumPoolSize</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">db.pool.config.minimumIdle</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Naming Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Data dispatch task execution period in milliseconds:</span></span><br><span class="line"><span class="comment">### 同步实例信息到其他Server时间间隔</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.taskDispatchPeriod=200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Data count of batch sync task:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.batchSyncKeyCount=1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Retry delay in milliseconds if sync task failed:</span></span><br><span class="line"><span class="comment">### 同步实例信息到其他Server任务失败后，任务重试间隔</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.syncRetryDelay=5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable data warmup. If set to false, the server would accept request without local data preparation:</span></span><br><span class="line"><span class="comment"># nacos.naming.data.warmup=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable the instance auto expiration, kind like of health check of instance:</span></span><br><span class="line"><span class="comment">### 为true超过实例删除超时时间会自动剔除实例，false只是会设置实例不健康，不会剔除实例</span></span><br><span class="line"><span class="comment"># nacos.naming.expireInstance=true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.naming.empty-service.auto-clean</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.naming.empty-service.clean.initial-delay-ms</span>=<span class="string">50000</span></span><br><span class="line"><span class="meta">nacos.naming.empty-service.clean.period-time-ms</span>=<span class="string">30000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** CMDB Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### The interval to dump external CMDB in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.dumpTaskInterval=3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of polling data change event in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.eventTaskInterval=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of loading labels in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.labelTaskInterval=300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on data loading task:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.loadDataAtStart=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Metrics Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Metrics for prometheus</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include=*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for elastic search</span></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for influx</span></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.db=springboot</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.uri=http://localhost:8086</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.auto-create-db=true</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.consistency=one</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.compressed=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Log Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the access log:</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The access log pattern:</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The directory of access log:</span></span><br><span class="line"><span class="meta">server.tomcat.basedir</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Control Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If enable spring security, this option is deprecated in 1.2.0:</span></span><br><span class="line"><span class="comment">#spring.security.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The ignore urls of auth, is deprecated in 1.2.0:</span></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="meta">nacos.core.auth.system.type</span>=<span class="string">nacos</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on auth system:</span></span><br><span class="line"><span class="comment">### 开启安全功能</span></span><br><span class="line"><span class="meta">nacos.core.auth.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="comment">### token 过期时间</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">18000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.secret.key</span>=<span class="string">SecretKey012345678901234567890123456789012345678901234567890123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="meta">nacos.core.auth.caching.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Since 1.4.1, Turn on/off white auth for user-agent: nacos-server, only for upgrade from old version.</span></span><br><span class="line"><span class="comment">### 这是bug，要设置为false</span></span><br><span class="line"><span class="meta">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Since 1.4.1, worked when nacos.core.auth.enabled=true and nacos.core.auth.enable.userAgentAuthWhite=false.</span></span><br><span class="line"><span class="comment">### The two properties is the white list for auth and used by identity the request from other server.</span></span><br><span class="line"><span class="comment">### nacos.core.auth.enabled 为true时要设置</span></span><br><span class="line"><span class="meta">nacos.core.auth.server.identity.key</span>=<span class="string"></span></span><br><span class="line"><span class="meta">nacos.core.auth.server.identity.value</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Istio Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the MCP server:</span></span><br><span class="line"><span class="meta">nacos.istio.mcp.server.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###*************** Add from 1.3.0 ***************###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Core Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### set the WorkerID manually</span></span><br><span class="line"><span class="comment"># nacos.core.snowflake.worker-id=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Member-MetaData</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.site=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.adweight=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.weight=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### MemberLookup</span></span><br><span class="line"><span class="comment">### Addressing pattern category, If set, the priority is highest</span></span><br><span class="line"><span class="comment"># nacos.core.member.lookup.type=[file,address-server]</span></span><br><span class="line"><span class="comment">## Set the cluster list with a configuration file or command-line argument</span></span><br><span class="line"><span class="comment"># nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</span></span><br><span class="line"><span class="comment">## for AddressServerMemberLookup</span></span><br><span class="line"><span class="comment"># Maximum number of retries to query the address server upon initialization</span></span><br><span class="line"><span class="comment"># nacos.core.address-server.retry=5</span></span><br><span class="line"><span class="comment">## Server domain name address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.domain=jmenv.tbsite.net</span></span><br><span class="line"><span class="comment">## Server port of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.port=8080</span></span><br><span class="line"><span class="comment">## Request address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.url=/nacos/serverlist</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** JRaft Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Sets the Raft cluster election timeout, default value is 5 second</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.election_timeout_ms=5000</span></span><br><span class="line"><span class="comment">### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.snapshot_interval_secs=30</span></span><br><span class="line"><span class="comment">### raft internal worker threads</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.core_thread_num=8</span></span><br><span class="line"><span class="comment">### Number of threads required for raft business request processing</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.cli_service_thread_num=4</span></span><br><span class="line"><span class="comment">### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe</span></span><br><span class="line"><span class="comment">### rpc request timeout, default 5 seconds</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="spring-cloud-starter-alibaba-nacos-discovery"><a href="#spring-cloud-starter-alibaba-nacos-discovery" class="headerlink" title="spring-cloud-starter-alibaba-nacos-discovery"></a>spring-cloud-starter-alibaba-nacos-discovery</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.cloud.nacos.discovery.reactive.NacosReactiveDiscoveryClientConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.endpoint.NacosDiscoveryEndpointAutoConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.discovery.configclient.NacosConfigServerAutoConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.NacosServiceAutoConfiguration</span><br><span class="line">com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.registry.NacosServiceRegistryAutoConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientConfiguration,\</span><br><span class="line">com.alibaba.cloud.nacos.ribbon.RibbonNacosAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>重点关注这个 NacosAutoServiceRegistration 类</p><p>NacosAutoServiceRegistration 继承 AbstractAutoServiceRegistration，这个类实现 ApplicationListener<WebServerInitializedEvent><br>在spring容器初始化时会发送 WebServerInitializedEvent 信号，那么以下的 onApplicationEvent 就会执行</WebServerInitializedEvent></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosAutoServiceRegistration</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractAutoServiceRegistration</span>&lt;<span class="title">Registration</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAutoServiceRegistration</span>&lt;<span class="title">R</span> <span class="keyword">extends</span> <span class="title">Registration</span>&gt; </span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AutoServiceRegistration</span>, <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = event.getApplicationContext();</span><br><span class="line">        <span class="keyword">if</span> (!(context <span class="keyword">instanceof</span> ConfigurableWebServerApplicationContext) || !<span class="string">&quot;management&quot;</span>.equals(((ConfigurableWebServerApplicationContext)context).getServerNamespace())) &#123;</span><br><span class="line">            <span class="keyword">this</span>.port.compareAndSet(<span class="number">0</span>, event.getWebServer().getPort());</span><br><span class="line">            <span class="keyword">this</span>.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Discovery Lifecycle disabled. Not starting&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.running.get()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.context.publishEvent(<span class="keyword">new</span> InstancePreRegisteredEvent(<span class="keyword">this</span>, <span class="keyword">this</span>.getRegistration()));</span><br><span class="line">                <span class="keyword">this</span>.register();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.shouldRegisterManagement()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.registerManagement();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.context.publishEvent(<span class="keyword">new</span> InstanceRegisteredEvent(<span class="keyword">this</span>, <span class="keyword">this</span>.getConfiguration()));</span><br><span class="line">                <span class="keyword">this</span>.running.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceRegistry.register(<span class="keyword">this</span>.getRegistration());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosServiceRegistry</span> <span class="keyword">implements</span> <span class="title">ServiceRegistry</span>&lt;<span class="title">Registration</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册实例进 nacos</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Registration registration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(registration.getServiceId())) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No service to register for nacos client...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 NamingService</span></span><br><span class="line">        NamingService namingService = namingService();</span><br><span class="line">        String serviceId = registration.getServiceId();</span><br><span class="line">        String group = nacosDiscoveryProperties.getGroup();</span><br><span class="line"></span><br><span class="line">        Instance instance = getNacosInstanceFromRegistration(registration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这个方法注册进 nacos</span></span><br><span class="line">            namingService.registerInstance(serviceId, group, instance);</span><br><span class="line">            log.info(<span class="string">&quot;nacos registry, &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; register finished&quot;</span>, group, serviceId,</span><br><span class="line">                    instance.getIp(), instance.getPort());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;nacos registry, &#123;&#125; register failed...&#123;&#125;,&quot;</span>, serviceId,</span><br><span class="line">                    registration.toString(), e);</span><br><span class="line">            <span class="comment">// rethrow a RuntimeException if the registration is failed.</span></span><br><span class="line">            <span class="comment">// issue : https://github.com/alibaba/spring-cloud-alibaba/issues/1132</span></span><br><span class="line">            rethrowRuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> NamingService <span class="title">namingService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nacosServiceManager</span><br><span class="line">                .getNamingService(nacosDiscoveryProperties.getNacosProperties());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosServiceManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NamingService namingService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取 NamingService，如果没有就创建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NamingService <span class="title">getNamingService</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(<span class="keyword">this</span>.namingService)) &#123;</span><br><span class="line">            buildNamingService(properties);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> namingService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//双重检测</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> NamingService <span class="title">buildNamingService</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(namingService)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (NacosServiceManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Objects.isNull(namingService)) &#123;</span><br><span class="line">                    namingService = createNewNamingService(properties);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> namingService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> NamingService <span class="title">createNewNamingService</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 createNamingService</span></span><br><span class="line">            <span class="keyword">return</span> createNamingService(properties);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/25/nacos-1/spring-cloud-starter-alibaba-nacos-discovery.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下载与运行&quot;&gt;&lt;a href=&quot;#下载与运行&quot; class=&quot;headerlink&quot; title=&quot;下载与运行&quot;&gt;&lt;/a&gt;下载与运行&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/nacos/releases&quot;&gt;https:</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="nacos" scheme="https://xxnjdg.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>sentinel学习使用</title>
    <link href="https://xxnjdg.github.io/2021/01/25/sentinel-1/"/>
    <id>https://xxnjdg.github.io/2021/01/25/sentinel-1/</id>
    <published>2021-01-24T16:18:26.000Z</published>
    <updated>2021-01-25T10:18:57.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV18E411x7eT">2020新版视频含SpringCloud Hoxton和SpringCloud alibaba</a></p><h1 id="下载和运行"><a href="#下载和运行" class="headerlink" title="下载和运行"></a>下载和运行</h1><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="/2021/01/25/sentinel-1/Snipaste_2021-01-25_01-14-55.png"></p><p>如果下载慢，可复制下面链接到迅雷等下载器下载</p><p><a href="https://github.com.cnpmjs.org/alibaba/Sentinel/releases/download/v1.8.0/sentinel-dashboard-1.8.0.jar">https://github.com.cnpmjs.org/alibaba/Sentinel/releases/download/v1.8.0/sentinel-dashboard-1.8.0.jar</a></p><p>执行下面命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-jar</span> sentinel<span class="literal">-dashboard</span><span class="literal">-1</span>.<span class="number">8.0</span>.jar</span><br></pre></td></tr></table></figure><p>打开浏览器输入默认地址 <a href="http://localhost:8080/">http://localhost:8080/</a></p><p>账号和密码默认都是 sentinel</p><p><img src="/2021/01/25/sentinel-1/Snipaste_2021-01-25_01-29-49.png"></p><p>登陆后界面</p><p><img src="/2021/01/25/sentinel-1/Snipaste_2021-01-25_01-31-48.png"></p><p>因为 Sentinel 控制台是基于 Spring Boot 实现，所以我们可以通过启动时的命令行参数，自定义配置</p><p>–server.port：自定义服务器端口。默认为 8080 端口。</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="Sentinel-的数据统计"><a href="#Sentinel-的数据统计" class="headerlink" title="Sentinel 的数据统计"></a>Sentinel 的数据统计</h2><p>StatisticNode</p><p>统计节点保留三种实时统计指标：</p><ul><li><p>秒级统计</p></li><li><p>分钟级统计</p></li><li><p>线程数</p></li></ul><p>Sentinel使用滑动窗口实时记录和统计资源统计信息。</p><p>{@link ArrayMetric}后面的滑动窗口基础结构是{@code LeapArray}。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV18E411x7eT&quot;&gt;2020新版视频含SpringC</summary>
      
    
    
    
    <category term="spring cloud alibaba" scheme="https://xxnjdg.github.io/categories/spring-cloud-alibaba/"/>
    
    
    <category term="sentinel" scheme="https://xxnjdg.github.io/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>the-art-of-java-concurrency-programming</title>
    <link href="https://xxnjdg.github.io/2020/12/27/the-art-of-java-concurrency-programming/"/>
    <id>https://xxnjdg.github.io/2020/12/27/the-art-of-java-concurrency-programming/</id>
    <published>2020-12-26T16:48:37.000Z</published>
    <updated>2020-12-27T07:59:11.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-并发编程的挑战"><a href="#第1章-并发编程的挑战" class="headerlink" title="第1章 并发编程的挑战"></a>第1章 并发编程的挑战</h1><p>上下文切换的问题</p><p>线程有创建和上下文切换的开销，如何解决？</p><p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p><p>死锁的问题</p><p>现在我们介绍避免死锁的几个常见方法。<br>·避免一个线程同时获取多个锁。</p><p>·避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</p><p>·尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</p><p>·对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</p><p>以及受限于硬件和软件的资源限制问题</p><p>对于硬件资源限制，可以考虑使用集群并行执行程序。既然单机的资源有限制，那么就让<br>程序在多机上运行</p><p>多使用JDK并发包提供的并发容器和工具类来解决并发问题，因为这些类都已经通过了充分的测试和优化，均可解决了本章提到的几个挑战</p><h1 id="第2章-Java并发机制的底层实现原理"><a href="#第2章-Java并发机制的底层实现原理" class="headerlink" title="第2章 Java并发机制的底层实现原理"></a>第2章 Java并发机制的底层实现原理</h1><h2 id="2-1-volatile的应用"><a href="#2-1-volatile的应用" class="headerlink" title="2.1 volatile的应用"></a>2.1 volatile的应用</h2><p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，<br>Lock前缀的指令在多核处理器下会引发了两件事情[1]。<br>1）将当前处理器缓存行的数据写回到系统内存。<br>2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</p><h2 id="2-2-synchronized的实现原理与应用"><a href="#2-2-synchronized的实现原理与应用" class="headerlink" title="2.2 synchronized的实现原理与应用"></a>2.2 synchronized的实现原理与应用</h2><p>先来看下利用synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现<br>为以下3种形式。<br>·对于普通同步方法，锁是当前实例对象。<br>·对于静态同步方法，锁是当前类的Class对象。<br>·对于同步方法块，锁是Synchonized括号里配置的对象</p><p>JVM基于进入和退出Monitor对<br>象来实现方法同步和代码块同步，但两者的实现细节不一样。代码块同步是使用monitorenter<br>和monitorexit指令实现的，而方法同步是使用另外一种方式实现的，细节在JVM规范里并没有<br>详细说明。但是，方法的同步同样可以使用这两个指令来实现</p><p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结<br>束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有<br>一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter<br>指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。</p><p>Java SE 1.6为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”，在<br>Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状<br>态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏<br>向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高<br>获得锁和释放锁的效率，下文会详细分析。</p><h2 id="2-3-原子操作的实现原理"><a href="#2-3-原子操作的实现原理" class="headerlink" title="2.3 原子操作的实现原理"></a>2.3 原子操作的实现原理</h2><p>在Java中可以通过锁和循环CAS的方式来实现原子操作。<br>JVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的<br>CAS实现原子操作的三大问题<br>ABA问题，循环时间长开销大，以及只能保证一个共享变量的原子操作。</p><h1 id="第3章-Java内存模型"><a href="#第3章-Java内存模型" class="headerlink" title="第3章 Java内存模型"></a>第3章 Java内存模型</h1><p>Java的并发采用的是共享内存模型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-并发编程的挑战&quot;&gt;&lt;a href=&quot;#第1章-并发编程的挑战&quot; class=&quot;headerlink&quot; title=&quot;第1章 并发编程的挑战&quot;&gt;&lt;/a&gt;第1章 并发编程的挑战&lt;/h1&gt;&lt;p&gt;上下文切换的问题&lt;/p&gt;
&lt;p&gt;线程有创建和上下文切换的开销，如何解</summary>
      
    
    
    
    <category term="并发编程" scheme="https://xxnjdg.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="并发编程" scheme="https://xxnjdg.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxnjdg.github.io/2020/12/26/hello-world/"/>
    <id>https://xxnjdg.github.io/2020/12/26/hello-world/</id>
    <published>2020-12-26T06:56:30.821Z</published>
    <updated>2021-02-14T10:38:27.585Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>使用主题 Butterfly</p><p><a href="https://www.cnblogs.com/thanksblog/p/12900165.html">https://www.cnblogs.com/thanksblog/p/12900165.html</a><br><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p><p>文件头部</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2020-12-26 16:03:32</span><br><span class="line">categories: </span><br><span class="line">- 分类1</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">cover: /2020/12/26/test/1.png # 封面图</span><br><span class="line">sticky: 1 # 顶置</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">![ss](test/1.png)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
